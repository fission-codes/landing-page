{"componentChunkName":"component---src-templates-index-js","path":"/page/2/","result":{"data":{"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__600bd66dfbb207001e19bae0","title":"Fission Demo Day January 2021","slug":"fission-demo-day-january-2021","featured":false,"feature_image":"https://images.unsplash.com/photo-1603283029779-4604731a4dd2?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDI2fHxyZWNvdmVyeXxlbnwwfHx8&ixlib=rb-1.2.1&q=80&w=1080","excerpt":"Fission's January 2021 Demo Day - new team members, product updates & demos, an overview of roadmap items, and community app demo of HyperDraft. ","custom_excerpt":"Fission's January 2021 Demo Day - new team members, product updates & demos, an overview of roadmap items, and community app demo of HyperDraft. ","created_at_pretty":"23 January, 2021","published_at_pretty":"25 January, 2021","updated_at_pretty":"25 January, 2021","created_at":"2021-01-22T23:55:25.000-08:00","published_at":"2021-01-25T00:26:43.000-08:00","updated_at":"2021-01-25T11:57:44.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Fission Demo Day","slug":"fission-demo-day","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Fission Demo Day","slug":"fission-demo-day","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null}],"plaintext":"This was the first of our third-Thursday-of-the-month \"Demo Days\" that we'll be\nholding from now on. The Fission team takes this time to talk about new releases\n& product updates, early demos of in-progress work, planned roadmap items and\nopen Q&A. We also invite the community to come and give app demos.\n\nMeet the Team\nWe were joined by three new people this month. Philipp in 🇩🇪 Germany, Brian in\n🇺🇸 Oregon, United States, and Helder in 🇧🇷 Brazil.\n\nPhilipp is working on the Account Dashboard, on both the Elm app and additional\nfeatures in the Fission Haskell server.\n\nBrian is working on the Filecoin Grant Project, and will be building the Backup\nApp in Svelte.\n\nHelder is working on a proof-of-concept around Headless Ghost, and will be\nmoving on to assist with implementation of Fission's new home page, which will\nbe using our current Ghost blog that you're reading this on.\n\nFission Product Updates & Demos\n * Account Dashboard by @matheus23 [https://talk.fission.codes/u/matheus23]:  \n   this is the account dashboard for Fission platform services. Everyone will\n   manage their account basics there, but also security around device linking\n   management, account recovery setup, and more. Developers will manage the apps\n   that they publish on the platform. Built in Elm as all of our 1st party apps\n   are, you can find it on github: https://github.com/fission-suite/dashboard\n * App Generator by @bgins [https://talk.fission.codes/u/bgins]: a tool to help\n   you create manifest files and other settings for Progressive Web Apps (PWA).\n   Built in Elm, find it on github: \n   https://github.com/fission-suite/pwa-generator\n * Fission Github Publish Action by @walkah\n   [https://talk.fission.codes/u/walkah]: For git-based-workflows and teams, add\n   this to your code repo on Github to automatically publish to Fission.\n   Consider it in alpha (we haven't made an official release yet), James will be\n   writing more about it, but it is live and works today on github: \n   https://github.com/fission-suite/publish-action\n\nRoadmap Items\n * CLI Linking: coming soon, developer account linking on your desktop.\n * Account Recovery [https://talk.fission.codes/t/account-recovery/1432]: we're\n   working on an account recovery flow. With password-less logins tied to your\n   devices and encryption, we need to design it in such a way that Fission can\n   help you recover your private files, without having access to those files\n   ourselves. We'll be sharing blog posts, flows, and security & cryptography\n   considerations as we roll this out.\n * Customized Login\n   [https://talk.fission.codes/t/customized-login-branding/1431]: Make a custom\n   branded sign-in experience without having to write your own login code.\n   Include design, logo, and custom text as part of the authorization lobby.\n   This will likely be our first premium paid developer feature.\n * Headless Ghost [https://talk.fission.codes/t/headless-ghost-on-fission/1407]:\n   this blog runs on Ghost. We're planning on re-doing the home page and\n   integrating in the blog more directly in a \"Headless\" style. We'll be sharing\n   open source code starter kits so anyone can build this.\n * Headless WordPress: many of the server-focused systems like Ghost and\n   WordPress are seeing interest in \"headless\" mode: keep the editing interface,\n   but have a static, serverless front end. We've got a mini project with a live\n   customer, and we'll be using that as a test case and document and share how\n   anyone can do this.\n\nCommunity Demo\n\nRosano, who joined us for a great discussion back on January 14th\n[https://blog.fission.codes/rosano-zero-data-apps-remote-storage/], came back to\ndo a demo and walk through of his HyperDraft notes app\n[https://hyperdraft.rosano.ca/].\n\nVideo\nJoin us next time\nWe're experimenting with Luma [https://lu.ma]  for registering for events. Click\nthe button below to sign up for the Fission February 2021 Demo Day, or visit\nthe\nevent page » [https://lu.ma/vhtwkxva]\n\nRegister for Event [https://lu.ma/event/evt-nHhXeNbXYwW4DW1]","html":"<p>This was the first of our third-Thursday-of-the-month \"Demo Days\" that we'll be holding from now on. The Fission team takes this time to talk about new releases &amp; product updates, early demos of in-progress work, planned roadmap items and open Q&amp;A. We also invite the community to come and give app demos.</p><h2 id=\"meet-the-team\">Meet the Team</h2><p>We were joined by three new people this month. Philipp in 🇩🇪 Germany, Brian in 🇺🇸 Oregon, United States, and Helder in 🇧🇷 Brazil.</p><p>Philipp is working on the Account Dashboard, on both the Elm app and additional features in the Fission Haskell server.</p><p>Brian is working on the Filecoin Grant Project, and will be building the Backup App in Svelte.</p><p>Helder is working on a proof-of-concept around Headless Ghost, and will be moving on to assist with implementation of Fission's new home page, which will be using our current Ghost blog that you're reading this on.</p><h2 id=\"fission-product-updates-demos\">Fission Product Updates &amp; Demos</h2><ul><li>Account Dashboard by <a href=\"https://talk.fission.codes/u/matheus23\">@matheus23</a>:<strong> </strong>this is the account dashboard for Fission platform services. Everyone will manage their account basics there, but also security around device linking management, account recovery setup, and more. Developers will manage the apps that they publish on the platform. Built in Elm as all of our 1st party apps are, you can find it on github: <a href=\"https://github.com/fission-suite/dashboard\">https://github.com/fission-suite/dashboard</a></li><li>App Generator by <a href=\"https://talk.fission.codes/u/bgins\">@bgins</a>: a tool to help you create manifest files and other settings for Progressive Web Apps (PWA). Built in Elm, find it on github: <a href=\"https://github.com/fission-suite/pwa-generator\">https://github.com/fission-suite/pwa-generator</a></li><li>Fission Github Publish Action by <a href=\"https://talk.fission.codes/u/walkah\">@walkah</a>: For git-based-workflows and teams, add this to your code repo on Github to automatically publish to Fission. Consider it in alpha (we haven't made an official release yet), James will be writing more about it, but it is live and works today on github: <a href=\"https://github.com/fission-suite/publish-action\">https://github.com/fission-suite/publish-action</a></li></ul><h2 id=\"roadmap-items\">Roadmap Items</h2><ul><li>CLI Linking: coming soon, developer account linking on your desktop.</li><li><a href=\"https://talk.fission.codes/t/account-recovery/1432\">Account Recovery</a>: we're working on an account recovery flow. With password-less logins tied to your devices and encryption, we need to design it in such a way that Fission can help you recover your private files, without having access to those files ourselves. We'll be sharing blog posts, flows, and security &amp; cryptography considerations as we roll this out.</li><li><a href=\"https://talk.fission.codes/t/customized-login-branding/1431\">Customized Login</a>: Make a custom branded sign-in experience without having to write your own login code. Include design, logo, and custom text as part of the authorization lobby. This will likely be our first premium paid developer feature.</li><li><a href=\"https://talk.fission.codes/t/headless-ghost-on-fission/1407\">Headless Ghost</a>: this blog runs on Ghost. We're planning on re-doing the home page and integrating in the blog more directly in a \"Headless\" style. We'll be sharing open source code starter kits so anyone can build this.</li><li>Headless WordPress: many of the server-focused systems like Ghost and WordPress are seeing interest in \"headless\" mode: keep the editing interface, but have a static, serverless front end. We've got a mini project with a live customer, and we'll be using that as a test case and document and share how anyone can do this.</li></ul><h2 id=\"community-demo\">Community Demo<br></h2><p>Rosano, who <a href=\"https://blog.fission.codes/rosano-zero-data-apps-remote-storage/\">joined us for a great discussion back on January 14th</a>, came back to do a demo and walk through of his <a href=\"https://hyperdraft.rosano.ca/\">HyperDraft notes app</a>.</p><h2 id=\"video\">Video</h2><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/503380389?app_id=122963\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"Fission Demo Day January 2021\"></iframe></figure><!--kg-card-end: embed--><h2 id=\"join-us-next-time\">Join us next time</h2><p>We're experimenting with <a href=\"https://lu.ma\">Luma</a> for registering for events. Click the button below to sign up for the Fission February 2021 Demo Day, or <a href=\"https://lu.ma/vhtwkxva\">visit the event page »</a></p><!--kg-card-begin: html--><a href=\"https://lu.ma/event/evt-nHhXeNbXYwW4DW1\" class=\"luma-checkout--button\" data-luma-action=\"checkout\" data-luma-event-id=\"evt-nHhXeNbXYwW4DW1\">\n  Register for Event\n</a>\n\n<script id=\"luma-checkout\" src=\"https://embed.lu.ma/checkout-button.js\"></script><!--kg-card-end: html-->","url":"https://blog.fission.codes/fission-demo-day-january-2021/","canonical_url":null,"uuid":"37a52421-4827-4469-bfbf-d0df8641c028","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"600bd66dfbb207001e19bae0","reading_time":null}},{"node":{"id":"Ghost__Post__600b7b1257e354001ec9ef4f","title":"Brooklyn Zelenka at Speakeasy JS, Jan 22nd, 2021","slug":"brooklyn-zelenka-speakeasyjs-jan2021","featured":true,"feature_image":"https://images.unsplash.com/photo-1519214605650-76a613ee3245?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDUwfHxiYXJ8ZW58MHx8fA&ixlib=rb-1.2.1&q=80&w=1080","excerpt":"Brooklyn Zelenka presents WebNative: How to put a full stack directly in the browser at the Speakeasy JS meetup.","custom_excerpt":"Brooklyn Zelenka presents WebNative: How to put a full stack directly in the browser at the Speakeasy JS meetup.","created_at_pretty":"23 January, 2021","published_at_pretty":"23 January, 2021","updated_at_pretty":"23 January, 2021","created_at":"2021-01-22T17:25:38.000-08:00","published_at":"2021-01-22T17:27:59.000-08:00","updated_at":"2021-01-22T17:40:24.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ♥λ Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"Speakeasy JS","slug":"speakeasy-js","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"ucan","slug":"ucan","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"WNFS","slug":"wnfs","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Brooklyn Zelenka presented the work we're doing at Fission at Speakeasy JS\n[https://speakeasyjs.com/]  which is \"the meetup for 🥼 mad science, 🧙‍♂️\nhacking, and 🧪 experiments\". \n\nWebNative: How to put a full stack directly in the browser\nSlides are available on Notist »\n[https://noti.st/expede/lZJZIu/webnative-how-to-put-a-full-stack-directly-in-the-browser]\nYes we have stickers\n[https://shop.fission.codes/collections/stickers-prints/products/speakeasyjs-jan-2021-js-se-stickers?variant=37714267766952]\n: we made a special edition of JavaScript and Speakeasy JS related stickers.\nCode SPEAKEASYJS  for a limited number of free sticker packs available (just pay\nshipping to wherever you are).\n\nThanks Feross [https://feross.org/]  for organizing!\n\nVideo\nVisit the Fission Vimeo account for all of our videos\n[https://vimeo.com/fission], or subscribe to our YouTube channel\n[https://www.youtube.com/channel/UCkf7isShsKRvQl2J7vz5EaA/featured].","html":"<p>Brooklyn Zelenka presented the work we're doing at Fission at <a href=\"https://speakeasyjs.com/\">Speakeasy JS</a> which is \"the meetup for 🥼 mad science, 🧙‍♂️ hacking, and 🧪 experiments\". </p><h2 id=\"webnative-how-to-put-a-full-stack-directly-in-the-browser\">WebNative: How to put a full stack directly in the browser</h2><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2021/01/webnative-full-stack-1.jpg\" class=\"kg-image\"><figcaption>Slides are <a href=\"https://noti.st/expede/lZJZIu/webnative-how-to-put-a-full-stack-directly-in-the-browser\">available on Notist »</a></figcaption></figure><!--kg-card-end: image--><p>Yes we have <a href=\"https://shop.fission.codes/collections/stickers-prints/products/speakeasyjs-jan-2021-js-se-stickers?variant=37714267766952\">stickers</a>: we made a special edition of JavaScript and Speakeasy JS related stickers. Code <code>SPEAKEASYJS</code> for a limited number of free sticker packs available (just pay shipping to wherever you are).</p><p>Thanks <a href=\"https://feross.org/\">Feross</a> for organizing!</p><h2 id=\"video\">Video</h2><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/TBKQ_TvrK8o?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><!--kg-card-end: embed--><p>Visit the <a href=\"https://vimeo.com/fission\">Fission Vimeo account for all of our videos</a>, or <a href=\"https://www.youtube.com/channel/UCkf7isShsKRvQl2J7vz5EaA/featured\">subscribe to our YouTube channel</a>.</p>","url":"https://blog.fission.codes/brooklyn-zelenka-speakeasyjs-jan2021/","canonical_url":null,"uuid":"527fe227-0088-4ae9-8c9c-14a12425c7e2","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"600b7b1257e354001ec9ef4f","reading_time":null}},{"node":{"id":"Ghost__Post__6002a64d409ef5001ee1047c","title":"Discussion with Rosano: Zero Data Apps, remote storage, and Funding Buttons","slug":"rosano-zero-data-apps-remote-storage","featured":false,"feature_image":"https://images.unsplash.com/photo-1520413766594-6e635f8d9908?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDI3fHx6ZXJvfGVufDB8fHw&ixlib=rb-1.2.1&q=80&w=1080","excerpt":"Rosano joined us as the invited speaker for the second weekly video chat of the\nyear, on January 14th, 2021. What's top of mind\n[https://rosano.hmm.garden/01ethzynrh7mdfr6ez7g412psh]  for Rosano right now is\nfederated systems, zero data, web apps, information architecture, publishing,\nand decentralized funding, and we covered all of them in our discussion.\n\nrosano.ca [https://rosano.ca]You can listen to the full discussion here (Boris\nbeing the main host voice you hear), or watch the video embed","custom_excerpt":null,"created_at_pretty":"16 January, 2021","published_at_pretty":"16 January, 2021","updated_at_pretty":"16 January, 2021","created_at":"2021-01-16T00:39:41.000-08:00","published_at":"2021-01-16T01:31:45.000-08:00","updated_at":"2021-01-16T01:31:45.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"zero data apps","slug":"zero-data-apps","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"funding","slug":"funding","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"ownyourdata","slug":"ownyourdata","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Rosano joined us as the invited speaker for the second weekly video chat of the\nyear, on January 14th, 2021. What's top of mind\n[https://rosano.hmm.garden/01ethzynrh7mdfr6ez7g412psh]  for Rosano right now is\nfederated systems, zero data, web apps, information architecture, publishing,\nand decentralized funding, and we covered all of them in our discussion.\n\nrosano.ca [https://rosano.ca]You can listen to the full discussion here (Boris\nbeing the main host voice you hear), or watch the video embedded at the end of\nthis post.\n\nYour browser does not support the HTML5 Audio element.We had a wide ranging\nconversation starting with his Zero Data Apps initiative [https://0data.app/]:\nexplaining and promoting #ownyourdata principles:\n\n * an app in which your data stays with you\n * you control where  the data is stored\n * no spam, no captcha, no sign up, no passwords, bring your own identity\n * using open protocols for flexibility and interoperability\n * do what you want  with your data at any time\n * your data is accessible forever  even if the app stops working\n\nRosano lists Fission on the page, and is waiting for us to have an app list that\ncan be automatically included on the page. Working on it!\n\nAll of the apps are \"zero data\", whether it uses remote storage, Solid protocol,\nUnhosted, or otherwise upholds the principles listed.\n\nIncluding Fission team member Steven's Diffuse [https://diffuse.sh]  music\nplayer. We interviewed Steven about Diffuse\n[https://blog.fission.codes/fission-interviews-diffuse/]  way back in June 2019,\nbefore he even joined the team.\n\nWe had a great discussion that covered thoughts on how people use apps and what\nconcepts are and aren't familiar to them. It was really inspiring to speak with\nRosano about all of his apps, and the work that he's done with friends and\nothers to introduce them to these zero data app concepts.\n\nLinks from Chat\nKommit [https://kommit.rosano.ca/], Rosano's flashcard app (inspired by Anki)\n\nLocalizing not just interface, but also programming languages. Ramsey Nassar\nhas\ncreated an Arabic programming language [https://nas.sr/قلب/]:\n\n> a programming language exploring the role of human culture in coding. Code is\nwritten entirely in Arabic, highlighting cultural biases of computer science and\nchallenging the assumptions we make about programming. It is implemented as a\ntree-walking language interpreter in JavaScript.\nPrivacy preserving product analytics\n[https://brave.com/privacy-preserving-product-analytics-p3a/]  by Brave (via \nHelder [https://agentofuser.com])\n\nAnagora [https://anagora.org]  \"The [[Agora]] is a [[distributed knowledge\ngraph]] and [[experimental]] [[social network]].\" (by TBD)\n\nRosano's Launchlet [https://launchlet.dev/], for customizing websites with\nJavaScript and CSS. Another area that we talked about for how to enable people\nto customize apps, and if there might be a specification to create. Started a \nwiki page on the forum about User Scripts and Styles\n[https://talk.fission.codes/t/user-scripts-and-styles/1393].\n\nDiscussion on forking/cloning, in the context of Fission's upcoming App Cloning\nfeature. The Fork N Go [http://jlord.us/forkngo/]  concept for Github - \"Forking\na website repository on GitHub designed to be easily used by others.\" (via\nHelder)\n\nThe Fund Button\nSince we didn't do a screenshare during the live talk, here is a short video of\nthe fund button and flows from Rosano's HyperDraft note taking app\n[https://hyperdraft.rosano.ca/].\n\nYou can find links to the separate sections\n[https://talk.fission.codes/t/zero-data-apps-remotestorage-and-hyperdraft-an-interview-with-rosano/1341/2] \n in the forum.\n\nWe talked about perhaps specifying this \"zero data funding\" method into a\nspecification. Could use any sort of payment or donation system – e.g. Paypal,\nPatreon, Github Sponsors, Open Collective, etc.\n\nThis is something that Verifiable Credentials\n[https://www.w3.org/TR/vc-data-model]  could potentially be used for: a\n\"hasPaidForHyperDraft: true\" value could be set for the user.\n\nVideo\nDue to a mistake in settings, the video only pins to Rosano during the\nrecording, so you just get Boris' and James' disembodied voices while we look at\nRosano. The audio recording above is the same content as in this video.\n\n\n--------------------------------------------------------------------------------\n\nOpen video chats happen most Thursdays 9am PST / 12pm EST / 1800 CET on a\nvariety of topics, and everyone is welcome. View the full event listing on the\nforum » [https://talk.fission.codes/c/events/25]","html":"<p>Rosano joined us as the invited speaker for the second weekly video chat of the year, on January 14th, 2021. What's <a href=\"https://rosano.hmm.garden/01ethzynrh7mdfr6ez7g412psh\">top of mind</a> for Rosano right now is federated systems, zero data, web apps, information architecture, publishing, and decentralized funding, and we covered all of them in our discussion.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2021/01/Screen-Shot-2021-01-16-at-12.40.30-AM.png\" class=\"kg-image\"><figcaption><a href=\"https://rosano.ca\">rosano.ca</a></figcaption></figure><!--kg-card-end: image--><p>You can listen to the full discussion here (Boris being the main host voice you hear), or watch the video embedded at the end of this post.</p><!--kg-card-begin: html--><audio controls=\"controls\" src=\"https://podcast.fission.app/2021-01-14-rosano-zerodata-apps.m4a\">\n    Your browser does not support the HTML5 Audio element.\n</audio><!--kg-card-end: html--><p>We had a wide ranging conversation starting with his <a href=\"https://0data.app/\">Zero Data Apps initiative</a>: explaining and promoting #ownyourdata principles:</p><ul><li>an app in which <em><strong>your data stays with you</strong></em></li><li><em><strong>you control where</strong></em> the data is stored</li><li>no spam, no captcha, no sign up, no passwords, <em><strong>bring your own identity</strong></em></li><li>using open protocols for <em><strong>flexibility and interoperability</strong></em></li><li><em><strong>do what you want</strong></em> with your data at <em><strong>any time</strong></em></li><li>your data is <em><strong>accessible forever</strong></em> even if the app stops working</li></ul><p>Rosano lists Fission on the page, and is waiting for us to have an app list that can be automatically included on the page. Working on it!</p><p>All of the apps are \"zero data\", whether it uses remote storage, Solid protocol, Unhosted, or otherwise upholds the principles listed.</p><p>Including Fission team member Steven's <a href=\"https://diffuse.sh\">Diffuse</a> music player. We <a href=\"https://blog.fission.codes/fission-interviews-diffuse/\">interviewed Steven about Diffuse</a> way back in June 2019, before he even joined the team.</p><p>We had a great discussion that covered thoughts on how people use apps and what concepts are and aren't familiar to them. It was really inspiring to speak with Rosano about all of his apps, and the work that he's done with friends and others to introduce them to these zero data app concepts.</p><h2 id=\"links-from-chat\">Links from Chat</h2><p><a href=\"https://kommit.rosano.ca/\">Kommit</a>, Rosano's flashcard app (inspired by Anki)</p><p>Localizing not just interface, but also programming languages. <a href=\"https://nas.sr/قلب/\">Ramsey Nassar has created an Arabic programming language</a>:</p><blockquote>a programming language exploring the role of human culture in coding. Code is written entirely in Arabic, highlighting cultural biases of computer science and challenging the assumptions we make about programming. It is implemented as a tree-walking language interpreter in JavaScript.</blockquote><p><a href=\"https://brave.com/privacy-preserving-product-analytics-p3a/\">Privacy preserving product analytics</a> by Brave (via <a href=\"https://agentofuser.com\">Helder</a>)</p><p><a href=\"https://anagora.org\">Anagora</a> \"The [[Agora]] is a [[distributed knowledge graph]] and [[experimental]] [[social network]].\" (by TBD)</p><p>Rosano's <a href=\"https://launchlet.dev/\">Launchlet</a>, for customizing websites with JavaScript and CSS. Another area that we talked about for how to enable people to customize apps, and if there might be a specification to create. Started a <a href=\"https://talk.fission.codes/t/user-scripts-and-styles/1393\">wiki page on the forum about User Scripts and Styles</a>.</p><p>Discussion on forking/cloning, in the context of Fission's upcoming App Cloning feature. The <a href=\"http://jlord.us/forkngo/\">Fork N Go</a> concept for Github - \"Forking a website repository on GitHub designed to be easily used by others.\" (via Helder)</p><h2 id=\"the-fund-button\">The Fund Button</h2><p>Since we didn't do a screenshare during the live talk, here is a short video of the fund button and flows from Rosano's <a href=\"https://hyperdraft.rosano.ca/\">HyperDraft note taking app</a>.</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/500628067?app_id=122963\" width=\"640\" height=\"400\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"The Fund Button\"></iframe></figure><!--kg-card-end: embed--><p>You can find <a href=\"https://talk.fission.codes/t/zero-data-apps-remotestorage-and-hyperdraft-an-interview-with-rosano/1341/2\">links to the separate sections</a> in the forum.</p><p>We talked about perhaps specifying this \"zero data funding\" method into a specification. Could use any sort of payment or donation system – e.g. Paypal, Patreon, Github Sponsors, Open Collective, etc.</p><p>This is something that <a href=\"https://www.w3.org/TR/vc-data-model\">Verifiable Credentials</a> could potentially be used for: a \"hasPaidForHyperDraft: true\" value could be set for the user.</p><h2 id=\"video\">Video</h2><p>Due to a mistake in settings, the video only pins to Rosano during the recording, so you just get Boris' and James' disembodied voices while we look at Rosano. The audio recording above is the same content as in this video.</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/500673127?app_id=122963\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"Discussion with Rosano: Zero Data Apps, Remote Storage, Funding Buttons, and more\"></iframe></figure><!--kg-card-end: embed--><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>Open video chats happen most Thursdays 9am PST / 12pm EST / 1800 CET on a variety of topics, and everyone is welcome. <a href=\"https://talk.fission.codes/c/events/25\">View the full event listing on the forum »</a></p>","url":"https://blog.fission.codes/rosano-zero-data-apps-remote-storage/","canonical_url":null,"uuid":"7fb23e28-7c61-497d-8110-10e85cb16a06","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"6002a64d409ef5001ee1047c","reading_time":null}},{"node":{"id":"Ghost__Post__5ffcad298c9ab6001e39307a","title":"Web Native Database Community Kickoff","slug":"webnative-database-community-kickoff","featured":false,"feature_image":"https://images.unsplash.com/photo-1495592822108-9e6261896da8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDV8fGRhdGF8ZW58MHx8fA&ixlib=rb-1.2.1&q=80&w=1080","excerpt":"We held our first community meeting about building out the distributed database capabilities of the Web Native File System. Video from Jan 7, 2021.","custom_excerpt":"We held our first community meeting about building out the distributed database capabilities of the Web Native File System. Video from Jan 7, 2021.","created_at_pretty":"11 January, 2021","published_at_pretty":"16 January, 2021","updated_at_pretty":"16 January, 2021","created_at":"2021-01-11T11:55:21.000-08:00","published_at":"2021-01-16T00:38:43.000-08:00","updated_at":"2021-01-16T00:38:43.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"WNFS","slug":"wnfs","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Community","slug":"community","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We held our first community meeting about interest in building out the\ndistributed database capabilities of the Web Native File System (WNFS).\n\nHere is the video from the January 7th, 2021 meeting:\n\nJames posted notes from the kickoff\n[https://talk.fission.codes/t/kicking-things-off/1372]:\n\n * As we had predicted, the group was a mix of people who are interested in\n   using WNDB as app developers (who have feature and API design interests) and\n   those interested in the protocol / “plumbing” of WNDB\n * There were not a lot of strong feelings about the nature of the API - rather,\n   WNDB needs features and documentation on how to implement them\n * There is a lot of interest / consensus around our initial event source-based\n   design ideas. Brooklyn highlighted datomic\n   [https://tonsky.me/blog/unofficial-guide-to-datomic-internals/]  and \n   datascript [https://github.com/tonsky/datascript].\n * A lot of good (early) discussion around schema management: developers should\n   be able to define them (but also share and re-use), they should be applied as\n   “views”, and lots of interest in project cambria\n   [https://www.inkandswitch.com/cambria.html]\n\nWe've got a new Webnative DB category in the forum\n[https://talk.fission.codes/c/developers/webnative-db/53]  that you can\nsubscribe to and follow along, as well as join the Fission Discord chat\n[https://fission.codes/discord].","html":"<p>We held our first community meeting about interest in building out the distributed database capabilities of the Web Native File System (WNFS).</p><p>Here is the video from the January 7th, 2021 meeting:</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/499093948?app_id=122963\" width=\"640\" height=\"295\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"WNDB Community R&amp;amp;D Kickoff\"></iframe></figure><!--kg-card-end: embed--><p>James posted <a href=\"https://talk.fission.codes/t/kicking-things-off/1372\">notes from the kickoff</a>:</p><ul><li>As we had predicted, the group was a mix of people who are interested in using WNDB as app developers (who have feature and API design interests) and those interested in the protocol / “plumbing” of WNDB</li><li>There were not a lot of strong feelings about the nature of the API - rather, WNDB needs features and documentation on how to implement them</li><li>There is a lot of interest / consensus around our initial event source-based design ideas. Brooklyn highlighted <a href=\"https://tonsky.me/blog/unofficial-guide-to-datomic-internals/\">datomic</a> and <a href=\"https://github.com/tonsky/datascript\">datascript</a>.</li><li>A lot of good (early) discussion around schema management: developers should be able to define them (but also share and re-use), they should be applied as “views”, and lots of interest in <a href=\"https://www.inkandswitch.com/cambria.html\">project cambria</a></li></ul><p>We've got a <a href=\"https://talk.fission.codes/c/developers/webnative-db/53\">new Webnative DB category in the forum</a> that you can subscribe to and follow along, as well as <a href=\"https://fission.codes/discord\">join the Fission Discord chat</a>.</p>","url":"https://blog.fission.codes/webnative-database-community-kickoff/","canonical_url":null,"uuid":"78e560d6-f386-4814-9d06-976b389a1e01","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ffcad298c9ab6001e39307a","reading_time":null}},{"node":{"id":"Ghost__Post__5fdd44842cbc3f001e11b027","title":"Fission Demo Day December 2020","slug":"fission-demo-day-december-2020","featured":true,"feature_image":"https://images.unsplash.com/photo-1499470117579-6e87c00de75e?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDE5fHxjZWxlYnJhdGV8ZW58MHx8fA&ixlib=rb-1.2.1&q=80&w=1080","excerpt":"Watch the full video from Fission's December 2020 Demo Day. Learn about the platform, and check out the launch of Drive+ on Open Collective.","custom_excerpt":"Watch the full video from Fission's December 2020 Demo Day. Learn about the platform, and check out the launch of Drive+ on Open Collective.","created_at_pretty":"19 December, 2020","published_at_pretty":"19 December, 2020","updated_at_pretty":"19 December, 2020","created_at":"2020-12-18T16:08:36.000-08:00","published_at":"2020-12-18T17:42:07.000-08:00","updated_at":"2020-12-18T17:42:07.000-08:00","meta_title":null,"meta_description":"Watch the full video from Fission's December 2020 Demo Day. Learn about the platform, and check out the launch of Drive+ on Open Collective.","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":"https://s3.fission.codes/2020/12/ship-apps-1.jpg","twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"Fission Demo Day","slug":"fission-demo-day","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We invited everyone to join us for a Demo Day to learn about the company, meet\nthe Fission team, and share everything we've built in the past year. We shared\nour technical building blocks and the roadmap that we have planned. We ended\nwith demos of apps built on our platform so far.\n\nFission: Fast App Publishing Platform\nFission is building an app publishing platform that supports developers in\nbuilding great apps, connecting to users, and getting app makers paid.\n\nRather than \"just\" being next-gen cloud infrastructure and technology that\npowers great apps, we're saying that the Fission platform will help developers\nreach their ultimate goal of building an app: having app users, and having those\nusers support the app.\n\nIn short:\n\n🚢 Ship Apps, 🗣 Talk to Users, 💵 Make Money\n\nIs that too bold or blunt? We are a platform that supports developers, and\nensuring that digital makers are successful means that more great software can\nget built.\n\nHere are some of the further themes, movements, and beliefs we're thinking\nabout:\n\nOpen Collective\nFission is now a Fiscal Host on Open Collective\n[https://opencollective.com/fission]. We are doing this in order to work closely\nwith open source developers that want to work together with their users to build\nand maintain apps sustainably over time.\n\nWe are also placing our own open source software on Open Collective, starting\nwith Fission Drive.\n\nTry Fission Drive » [https://drive.fission.codes]The Drive+ membership tier\n[https://opencollective.com/fissiondrive/contribute/drive-23617]  is an annual\nsupport tier that supports building out Drive and the associated Fission\naccount. Backers get special badges on our Discord chat and Discourse forums,\nwill have members-only access to communication channels, including voting on\nfeatures and other opportunities. Drive+ members will also get a one year\nFission Premium account when we launch support for it.\n\nIf you like what we're doing, and want to support more of it, sign up for\nDrive+\n» [https://opencollective.com/fissiondrive/contribute/drive-23617]\n\nThank you so much to Gyuri\n[https://twitter.com/FISSIONcodes/status/1339652057049911296], Helder\n[https://twitter.com/FISSIONcodes/status/1339688618726584320], Brian\n[https://brianginsburg.com/], and the Omo Earth\n[https://twitter.com/FISSIONcodes/status/1339659752393961473?s=20]  team for\nbeing backers on the very first day. We appreciate your early support in this!\n\nFull Demo Day Video\nThe full 2 hour video is split into chapters so you can jump to different\nsections. We'll be sharing smaller portions of the video after a little bit of\nediting.\n\nSlides are available on Notist »\n[https://noti.st/events/n1BLwS/fission-demo-day-december-2020]\n\nOpen Source Collaboration\nWe are very proud of all the technical building blocks we've shipped so far, and\nhave had some early discussions with other teams about adopting some of the\nprotocols we've defined. During Demo Day, it was fantastic to hear that a lot of\nyou want to get more involved!\n\nWe've scheduled a community kick off meeting to work on the WNFS Database layer\nfor January 7th, 2021. Full details on the forum\n[https://talk.fission.codes/t/wnfs-db-api-aka-wndb-research-design-session/1335]\n, please RSVP » [https://airtable.com/shrKyfvfigz8PpNGV]\n\n\n--------------------------------------------------------------------------------\n\nThank you to everyone that joined us. It was great to see you and we really\nappreciate your interest and the excitement you showed. The team has put a lot\nof work into what we've shipped so far, and we can't wait to see what you build\nwith Fission.\n\nWe shared and announced a lot during this one event, so we'll be posting more\nfrom the event over the next week. We wish everyone a restful time as we head\ninto the winter holidays, and look forward to more in 2021!","html":"<p>We invited everyone to join us for a Demo Day to learn about the company, meet the Fission team, and share everything we've built in the past year. We shared our technical building blocks and the roadmap that we have planned. We ended with demos of apps built on our platform so far.</p><h2 id=\"fission-fast-app-publishing-platform\">Fission: Fast App Publishing Platform</h2><p>Fission is building an app publishing platform that supports developers in building great apps, connecting to users, and getting app makers paid.</p><p>Rather than \"just\" being next-gen cloud infrastructure and technology that powers great apps, we're saying that the Fission platform will help developers reach their ultimate goal of building an app: having app users, and having those users support the app.</p><p>In short:</p><!--kg-card-begin: html--><div style=\"text-align: center;\"><p style=\"font-size: 3em; line-height: 1.2em; margin-bottom: 30px; padding-bottom: 0px\">🚢&nbsp;Ship Apps, 🗣&nbsp;Talk to Users, 💵&nbsp;Make Money</p></div><!--kg-card-end: html--><p>Is that too bold or blunt? We are a platform that supports developers, and ensuring that digital makers are successful means that more great software can get built.</p><p>Here are some of the further themes, movements, and beliefs we're thinking about:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2020/12/fission-themes.jpg\" class=\"kg-image\"></figure><!--kg-card-end: image--><h2 id=\"open-collective\">Open Collective</h2><p>Fission is now a <a href=\"https://opencollective.com/fission\">Fiscal Host on Open Collective</a>. We are doing this in order to work closely with open source developers that want to work together with their users to build and maintain apps sustainably over time.</p><p>We are also placing our own open source software on Open Collective, starting with Fission Drive.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/12/fission-drive-boris_mann.png\" class=\"kg-image\"><figcaption>Try <a href=\"https://drive.fission.codes\">Fission Drive »</a></figcaption></figure><!--kg-card-end: image--><p>The <a href=\"https://opencollective.com/fissiondrive/contribute/drive-23617\">Drive+ membership tier</a> is an annual support tier that supports building out Drive and the associated Fission account. Backers get special badges on our Discord chat and Discourse forums, will have members-only access to communication channels, including voting on features and other opportunities. Drive+ members will also get a one year Fission Premium account when we launch support for it.</p><p>If you like what we're doing, and want to support more of it, <a href=\"https://opencollective.com/fissiondrive/contribute/drive-23617\">sign up for Drive+ »</a></p><p>Thank you so much to <a href=\"https://twitter.com/FISSIONcodes/status/1339652057049911296\">Gyuri</a>, <a href=\"https://twitter.com/FISSIONcodes/status/1339688618726584320\">Helder</a>, <a href=\"https://brianginsburg.com/\">Brian</a>, and the <a href=\"https://twitter.com/FISSIONcodes/status/1339659752393961473?s=20\">Omo Earth</a> team for being backers on the very first day. We appreciate your early support in this!</p><h2 id=\"full-demo-day-video\">Full Demo Day Video</h2><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/492295991?app_id=122963\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Fission Demo Day December 2020\"></iframe></figure><!--kg-card-end: embed--><p>The full 2 hour video is split into chapters so you can jump to different sections. We'll be sharing smaller portions of the video after a little bit of editing.</p><p><a href=\"https://noti.st/events/n1BLwS/fission-demo-day-december-2020\">Slides are available on Notist »</a></p><h2 id=\"open-source-collaboration\">Open Source Collaboration</h2><p>We are very proud of all the technical building blocks we've shipped so far, and have had some early discussions with other teams about adopting some of the protocols we've defined. During Demo Day, it was fantastic to hear that a lot of you want to get more involved!</p><p>We've scheduled a community kick off meeting to work on the WNFS Database layer for January 7th, 2021. <a href=\"https://talk.fission.codes/t/wnfs-db-api-aka-wndb-research-design-session/1335\">Full details on the forum</a>, please <a href=\"https://airtable.com/shrKyfvfigz8PpNGV\">RSVP » </a></p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>Thank you to everyone that joined us. It was great to see you and we really appreciate your interest and the excitement you showed. The team has put a lot of work into what we've shipped so far, and we can't wait to see what you build with Fission.</p><p>We shared and announced a lot during this one event, so we'll be posting more from the event over the next week. We wish everyone a restful time as we head into the winter holidays, and look forward to more in 2021!</p>","url":"https://blog.fission.codes/fission-demo-day-december-2020/","canonical_url":null,"uuid":"15df576a-bb84-4ece-a6d1-32f0421fd40e","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5fdd44842cbc3f001e11b027","reading_time":null}},{"node":{"id":"Ghost__Post__5fc559f78d0988001eef486f","title":"Developer Communities on Discord: Share your announce channels!","slug":"developer-communities-on-discord-share-your-announce-channels","featured":true,"feature_image":"https://images.unsplash.com/photo-1545112719-ce81d7de0b71?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"New Discord announce channels: creating an awesome list for great developer community content on Discord.","custom_excerpt":"New Discord announce channels: creating an awesome list for great developer community content on Discord.","created_at_pretty":"30 November, 2020","published_at_pretty":"30 November, 2020","updated_at_pretty":"30 November, 2020","created_at":"2020-11-30T12:45:43.000-08:00","published_at":"2020-11-30T13:49:26.000-08:00","updated_at":"2020-11-30T13:50:58.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"Community","slug":"community","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Community","slug":"community","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Discord","slug":"discord","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Discord is increasingly being used by a number of developer communities. New\ncommunity server and announce channels are an opportunity for us to share\ninteresting developer content.\n\nFission has already upgraded to being a Community Server\n[https://support.discord.com/hc/en-us/articles/360047132851-Enabling-Your-Community-Server]\n. This means we get a Welcome screen\n[https://support.discord.com/hc/en-us/articles/360043913591]  with recommended\nchannels, along with a few other features. \n\nHere's Fission's Welcome screen:\n\nScreenshot from the edit mode of Fission's Discord Welcome ScreenYou can check\nout the Fission emoji filled server here » [https://fission.codes/discord]\n\n> By the way, on the general topic of tools for developer communities, the Orbit\nteam wrote about Slack vs Discord vs Discourse\n[https://talk.fission.codes/t/slack-vs-discord-vs-discourse-the-best-tool-for-your-community-orbit-blog-may-2020/654] \n back in May. Fission uses Discord (obviously), but specifically we also use it\nfor our private internal company discussions. And we have a Discourse forum\n[https://talk.fission.codes]  that we use the same way, for both public\ncommunity and internal communications.\nAnnouncement Channels\nBut the new thing for inter-connecting people are Announcement Channels\n[https://support.discord.com/hc/en-us/articles/360032008192]: you can post\nupdates in your server to a special channel, which other people can \"follow\" so\nthat the content automatically posts into their server channels.\n\nHere's what the Fission announcements channel looks like, with a \"follow\" button\nat the top:\n\nHere's the link to our #fission-announce [https://discord.gg/JNg3McC6Ew] \nchannelWe've been posting about once per week, around new content, new releases,\nand upcoming events.\n\nOn the \"follower\" side, you can have the posts by published into a channel of\nyour choosing. This could be a single \"subscriptions\" channel, or a dedicated\n#fission-is-cool channel, and it can be public or members only. You can also\nread the background on how to follow channels\n[https://support.discord.com/hc/en-us/articles/360028384531-Channel-Following-FAQ] \n (you'll need to be an admin on a server for this).\n\nShare your announce channels: awesome-discord-announce\nWe've created the beginnings of an awesome-list on Github, \nawesome-discord-announce\n[https://github.com/fission-suite/awesome-discord-announce].\n\nIf you have a Discord server with an announce channel that covers technical\ntopics – add it to the list!\n\nAnd, as a thank you to Sindre Sorhus, creator of the original Awesome list\n[https://github.com/sindresorhus/awesome/], Fission has signed up to support\nhim\non Patreon [https://patreon.com/sindresorhus]. Support all the digital makers\nand open source contributors!","html":"<p>Discord is increasingly being used by a number of developer communities. New community server and announce channels are an opportunity for us to share interesting developer content.</p><p>Fission has already upgraded to being a <a href=\"https://support.discord.com/hc/en-us/articles/360047132851-Enabling-Your-Community-Server\">Community Server</a>. This means we get a <a href=\"https://support.discord.com/hc/en-us/articles/360043913591\">Welcome screen</a> with recommended channels, along with a few other features. </p><p>Here's Fission's Welcome screen:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/11/Screen-Shot-2020-11-30-at-1.06.15-PM.png\" class=\"kg-image\"><figcaption>Screenshot from the edit mode of Fission's Discord Welcome Screen</figcaption></figure><!--kg-card-end: image--><p>You can check out the <a href=\"https://fission.codes/discord\">Fission emoji filled server here »</a></p><blockquote>By the way, on the general topic of tools for developer communities, the <a href=\"https://talk.fission.codes/t/slack-vs-discord-vs-discourse-the-best-tool-for-your-community-orbit-blog-may-2020/654\">Orbit team wrote about Slack vs Discord vs Discourse</a> back in May. Fission uses Discord (obviously), but specifically we also use it for our private internal company discussions. And we have a <a href=\"https://talk.fission.codes\">Discourse forum</a> that we use the same way, for both public community and internal communications.</blockquote><h2 id=\"announcement-channels\">Announcement Channels</h2><p>But the new thing for inter-connecting people are <a href=\"https://support.discord.com/hc/en-us/articles/360032008192\">Announcement Channels</a>: you can post updates in your server to a special channel, which other people can \"follow\" so that the content automatically posts into their server channels.</p><p>Here's what the Fission announcements channel looks like, with a \"follow\" button at the top:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/11/Screen-Shot-2020-11-30-at-1.09.27-PM.png\" class=\"kg-image\"><figcaption>Here's the link to our <a href=\"https://discord.gg/JNg3McC6Ew\">#fission-announce</a> channel</figcaption></figure><!--kg-card-end: image--><p>We've been posting about once per week, around new content, new releases, and upcoming events.</p><p>On the \"follower\" side, you can have the posts by published into a channel of your choosing. This could be a single \"subscriptions\" channel, or a dedicated #fission-is-cool channel, and it can be public or members only. You can also read the background on <a href=\"https://support.discord.com/hc/en-us/articles/360028384531-Channel-Following-FAQ\">how to follow channels</a> (you'll need to be an admin on a server for this).</p><h2 id=\"share-your-announce-channels-awesome-discord-announce\">Share your announce channels: awesome-discord-announce</h2><p>We've created the beginnings of an awesome-list on Github, <a href=\"https://github.com/fission-suite/awesome-discord-announce\">awesome-discord-announce</a>.</p><p>If you have a Discord server with an announce channel that covers technical topics – add it to the list!</p><p>And, as a thank you to <strong>Sindre Sorhus</strong>, creator of the <a href=\"https://github.com/sindresorhus/awesome/\">original Awesome list</a>, Fission has signed up to <a href=\"https://patreon.com/sindresorhus\">support him on Patreon</a>. Support all the digital makers and open source contributors!</p>","url":"https://blog.fission.codes/developer-communities-on-discord-share-your-announce-channels/","canonical_url":null,"uuid":"78c1b28e-3c3c-494b-a62e-97ec880d2245","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5fc559f78d0988001eef486f","reading_time":null}},{"node":{"id":"Ghost__Post__5f7c83a7af9100001e524349","title":"Introduction to Web Native Apps","slug":"intro-web-native-apps","featured":true,"feature_image":"https://images.unsplash.com/photo-1483058712412-4245e9b90334?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"An initial intro to Fission's web native apps. Browser as operating system, with the addition of identity and files, like an open source iCloud.","custom_excerpt":"An initial intro to Fission's web native apps. Browser as operating system, with the addition of identity and files, like an open source iCloud.","created_at_pretty":"06 October, 2020","published_at_pretty":"07 October, 2020","updated_at_pretty":"07 October, 2020","created_at":"2020-10-06T07:48:07.000-07:00","published_at":"2020-10-06T17:52:18.000-07:00","updated_at":"2020-10-06T17:52:18.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Fission builds on top of the web browser as an operating system, and enables web\nnative apps  with additional features that run locally: user controlled files\nand identity.\n\nTom MacWright's article, A clean start for the web\n[https://macwright.com/2020/08/22/clean-starts-for-the-web.html], introduced a\nuseful distinction: the \"document web\" vs. the \"application web\":\n\n> Then there’s the “application web”. This started as server applications, built\nwith things like Django and Ruby on Rails and before them a variety of\ntechnologies that will live forever in corporations, like Java Servlets.\n\nBackbone.js demonstrated that a lot of these applications could be moved into\nthe browser, and then React and its many SPA-style competitors established a new\norder for the web – highly-interactive, quite complex, client-side applications.\nWe don't necessarily agree with a lot of the changes that MacWright wishes for,\nbut we do think that the documentic-centric web  and the app-centric web  is a\nuseful way to think about the difference between websites that we access through\nour browsers.\n\nLike an operating system, your desktop or mobile browser now provides common\nservices for the many web sites – and increasingly web apps  – that you access\nevery day.\n\nWeb Native Apps\nAt Fission, we're both building on top of features that the browser provides,\nand adding additional features that can be used by Fission-powered apps. \n\nWe call these apps \"web native\" apps:\n\n * Works in all browsers, including mobile\n * Doesn't need browser plug-ins\n * Makes use of advanced web APIs in the browser, including on mobile\n * Has user owned data and storage\n * Gives users control over app permissions\n * Can function local-first, and in many cases, offline\n\nWeb native apps are designed to run on the web, taking advantage of all the\ncapabilities your browser has to offer, as well as native, local capabilities\nlike identity, storage, and computation.\n\nWe're also very inspired by Ink & Switch's research findings on local-first\nsoftware [https://www.inkandswitch.com/local-first.html], and continue to build\non and implement the concepts they outline.\n\nAsking Permission\nOne of the things that smartphone apps do is ask permission: can I use your\ncamera? Can I access your files? Can I see your photos? For security reasons,\nthese same sort of permissions are making their way into modern desktop\noperating systems as well.\n\nWith a regular web app, we don't get any of that. Or, even worse, we're clicking\nthrough an agreement for trackers and cookies to be used!\n\nAs a user, signing up for a hosted web app means agreeing to some terms of\nservice. You're using an app that is running on someone else's server, where\nyour data is stored. At best, you've got an export function, and hopefully a\nlowest common denominator format that you can import somewhere else. \n\nWant to work with a batch of your images? First step, upload them all to a\nserver. And hope that you can get export them later. Or that the developer has\nbacked up those files in case something goes wrong. And, that the developer\nhasn't made any mistakes around security and privacy.\n\nOn our smartphones, we feel more in control. Apps ask us for permission. We can\nattach three or four different apps to our photo library, and switch between\nthem, all the while having all of our photos available to us.\n\nThat's how we've built Fission's web native apps. Each app asks for permission,\ngets its own space to write files to. Everything is encrypted, and neither\nFission nor the app developer can see your files without permission.\n\nI'll quote MacWright again:\n\n> There was a time when we could install applications, give some sort of explicit\nagreement that something would run on our computers and use our hardware. \nUsing a web native app is more like installing an app. It uses your local\nidentity, your files, and in many cases can even run offline.\n\nIt is using your browser as an operating system.\n\nWeb Native Apps with Fission\nFission is building an app hosting marketplace for developers and users that\nsupports web native apps.\n\nFor developers, they can design a user app using only front end and design\nskills. The web native app can be installed by 10 or 10,000 users, just like\nmobile or desktop software. Because the app is running on the user's computer,\nyou can focus on finding new users and adding new features, rather than having\nto learn DevOps or server scaling. It's the fastest way to start sharing – and\nsoon, selling – your app on the web.\n\nUsers create a secure identity in their browsers. Every Fission account is\nlinked to a file system, available in any browser. Much like an open source\niCloud, users give permissions to apps, and can access their files from\nanywhere. Users can browse their file system, both public and private, and mix\nand match which apps they use, just like they're used to with mobile and desktop\napps.\n\n\n--------------------------------------------------------------------------------\n\nOur code is open source [https://github.com/fission-suite]. We're building on\ntop of commons infrastructure, and we're aiming to be a federated constellation\nprovider\n[https://blog.fission.codes/constellation-providers-at-decentralized-storage-summit/] \n rather than a cloud provider.\n\nOur 1.0 release is coming soon, sign up on the home page to get notified\n[https://fission.codes], or jump into our Discord chat\n[https://fission.codes/discord]  to get involved and ask questions.","html":"<p>Fission builds on top of the web browser as an operating system, and enables <strong>web native apps</strong> with additional features that run locally: user controlled files and identity.</p><p>Tom MacWright's article, <a href=\"https://macwright.com/2020/08/22/clean-starts-for-the-web.html\">A clean start for the web</a>, introduced a useful distinction: the \"document web\" vs. the \"application web\":</p><blockquote>Then there’s the “application web”. This started as server applications, built with things like Django and Ruby on Rails and before them a variety of technologies that will live forever in corporations, like Java Servlets.<br><br>Backbone.js demonstrated that a lot of these applications could be moved into the browser, and then React and its many SPA-style competitors established a new order for the web – highly-interactive, quite complex, client-side applications.</blockquote><p>We don't necessarily agree with a lot of the changes that MacWright wishes for, but we do think that the <strong>documentic-centric web</strong> and the <strong>app-centric web</strong> is a useful way to think about the difference between websites that we access through our browsers.</p><p>Like an operating system, your desktop or mobile browser now provides common services for the many web sites – and increasingly web <em>apps</em> – that you access every day.</p><h2 id=\"web-native-apps\">Web Native Apps</h2><p>At Fission, we're both building on top of features that the browser provides, and adding additional features that can be used by Fission-powered apps. </p><p>We call these apps \"web native\" apps:</p><ul><li>Works in all browsers, including mobile</li><li>Doesn't need browser plug-ins</li><li>Makes use of advanced web APIs in the browser, including on mobile</li><li>Has user owned data and storage</li><li>Gives users control over app permissions</li><li>Can function local-first, and in many cases, offline</li></ul><p>Web native apps are designed to run on the web, taking advantage of all the capabilities your browser has to offer, as well as native, local capabilities like identity, storage, and computation.</p><p>We're also very inspired by <a href=\"https://www.inkandswitch.com/local-first.html\">Ink &amp; Switch's research findings on local-first software</a>, and continue to build on and implement the concepts they outline.</p><h2 id=\"asking-permission\">Asking Permission</h2><p>One of the things that smartphone apps do is ask permission: can I use your camera? Can I access your files? Can I see your photos? For security reasons, these same sort of permissions are making their way into modern desktop operating systems as well.</p><p>With a regular web app, we don't get any of that. Or, even worse, we're clicking through an agreement for trackers and cookies to be used!</p><p>As a user, signing up for a hosted web app means agreeing to some terms of service. You're using an app that is running on someone else's server, where your data is stored. At best, you've got an export function, and hopefully a lowest common denominator format that you can import somewhere else. </p><p>Want to work with a batch of your images? First step, upload them all to a server. And hope that you can get export them later. Or that the developer has backed up those files in case something goes wrong. And, that the developer hasn't made any mistakes around security and privacy.</p><p>On our smartphones, we feel more in control. Apps ask us for permission. We can attach three or four different apps to our photo library, and switch between them, all the while having all of our photos available to us.</p><p>That's how we've built Fission's web native apps. Each app asks for permission, gets its own space to write files to. Everything is encrypted, and neither Fission nor the app developer can see your files without permission.</p><p>I'll quote MacWright again:</p><blockquote>There was a time when we could install applications, give some sort of explicit agreement that something would run on our computers and use our hardware. </blockquote><p>Using a web native app is more like installing an app. It uses your local identity, your files, and in many cases can even run offline.</p><p>It is using your browser as an operating system.</p><h2 id=\"web-native-apps-with-fission\">Web Native Apps with Fission</h2><p>Fission is building an app hosting marketplace for developers and users that supports web native apps.</p><p>For developers, they can design a user app using only front end and design skills. The web native app can be installed by 10 or 10,000 users, just like mobile or desktop software. Because the app is running on the user's computer, you can focus on finding new users and adding new features, rather than having to learn DevOps or server scaling. It's the fastest way to start sharing – and soon, selling – your app on the web.</p><p>Users create a secure identity in their browsers. Every Fission account is linked to a file system, available in any browser. Much like an open source iCloud, users give permissions to apps, and can access their files from anywhere. Users can browse their file system, both public and private, and mix and match which apps they use, just like they're used to with mobile and desktop apps.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>Our code is <a href=\"https://github.com/fission-suite\">open source</a>. We're building on top of commons infrastructure, and we're aiming to be a federated <a href=\"https://blog.fission.codes/constellation-providers-at-decentralized-storage-summit/\">constellation provider</a> rather than a cloud provider.</p><p>Our 1.0 release is coming soon, <a href=\"https://fission.codes\">sign up on the home page to get notified</a>, or jump into our <a href=\"https://fission.codes/discord\">Discord chat</a> to get involved and ask questions.</p>","url":"https://blog.fission.codes/intro-web-native-apps/","canonical_url":null,"uuid":"f6327283-e877-4625-b614-ef27605157a9","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5f7c83a7af9100001e524349","reading_time":null}},{"node":{"id":"Ghost__Post__5f7d56dc5117dc001edafbdf","title":"Web Native File System Technical Design Overview","slug":"web-native-file-system-presentation","featured":false,"feature_image":"https://images.unsplash.com/photo-1524351543168-8e38787614e9?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"Brooklyn and Daniel from the Fission team present a technical overview of the Web Native File System.","custom_excerpt":"Brooklyn and Daniel from the Fission team present a technical overview of the Web Native File System.","created_at_pretty":"07 October, 2020","published_at_pretty":"14 August, 2020","updated_at_pretty":"19 November, 2020","created_at":"2020-10-06T22:49:16.000-07:00","published_at":"2020-08-13T22:49:00.000-07:00","updated_at":"2020-11-19T11:58:53.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ♥λ Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null},{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"WNFS","slug":"wnfs","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Fission has designed a spec for what we call the Web Native File System (WNFS).\nIt is implemented on top of IPFS and can be loaded in any browser, including\nmobile.\n\nWe’ve designed the system to store metadata, encrypt private files, and offer a\nnumber of features for end users and developers using the file system to build\nweb apps with a web native file system, where files are owned by users. This\nalso leads to a style of single tenant architecture for web apps, but for this\npresentation we will focus mainly on the file system details.\n\nJoin Brooklyn Zelenka and Daniel Holmgren as they present a technical design\noverview of WNFS. Leave a comment in the forum\n[https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818] \n if you have questions.\n\nSlides\nFull Slide deck available on Notist »\n[https://noti.st/expede/QAYFyW/webnative-file-system]Screencast\nSorry, your browser doesn't support embedded videos.Video\nResources\n * Slides on Notist [https://noti.st/expede/QAYFyW/webnative-file-system]\n * Fission Whitepaper\n   [https://whitepaper.fission.codes/file-system/file-system-basics]  (continues\n   to be a living document)\n * Implemented in webnative SDK on Github\n   [https://github.com/fission-suite/webnative], with basic info in the README \n * Extended usage and documentation in the Fission Guide\n   [https://guide.fission.codes/webnative-sdk/getting-started-webnative-sdk]","html":"<p>Fission has designed a spec for what we call the Web Native File System (WNFS). It is implemented on top of IPFS and can be loaded in any browser, including mobile.</p><p>We’ve designed the system to store metadata, encrypt private files, and offer a number of features for end users and developers using the file system to build web apps with a web native file system, where files are owned by users. This also leads to a style of single tenant architecture for web apps, but for this presentation we will focus mainly on the file system details.</p><p>Join Brooklyn Zelenka and Daniel Holmgren as they present a technical design overview of WNFS. Leave a <a href=\"https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818\">comment in the forum</a> if you have questions.</p><h2 id=\"slides\">Slides</h2><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/10/common-concepts-virtual-nodes-large-34.png\" class=\"kg-image\"><figcaption><a href=\"https://noti.st/expede/QAYFyW/webnative-file-system\">Full Slide deck available on Notist »</a></figcaption></figure><!--kg-card-end: image--><h2 id=\"screencast\">Screencast</h2><!--kg-card-begin: html--><video width=\"100%\" height=\"100%\" controls>\n\n    <source src=\"https://ipfs.runfission.com/ipfs/QmaLfohLFTdBu3SU7H3CX6vT8qMZHjUQ8v2mYqcXosBnYY/Screencast_from_08-12-2020_090507_PM.webm\" type=\"video/webm\">\n\n    Sorry, your browser doesn't support embedded videos.\n</video>\n\n<!--kg-card-end: html--><h2 id=\"video\">Video</h2><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/479944561?app_id=122963\" width=\"426\" height=\"240\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Technical Overview of the Web Native File System with Brooklyn Zelenka, Daniel Holmgren - Fission Video Chat Aug 13, 2020\"></iframe></figure><!--kg-card-end: embed--><h2 id=\"resources\">Resources</h2><ul><li><a href=\"https://noti.st/expede/QAYFyW/webnative-file-system\">Slides on Notist</a></li><li><a href=\"https://whitepaper.fission.codes/file-system/file-system-basics\">Fission Whitepaper</a> (continues to be a living document)</li><li>Implemented in <a href=\"https://github.com/fission-suite/webnative\">webnative SDK on Github</a>, with basic info in the README </li><li>Extended usage and documentation in the <a href=\"https://guide.fission.codes/webnative-sdk/getting-started-webnative-sdk\">Fission Guide</a></li></ul>","url":"https://blog.fission.codes/web-native-file-system-presentation/","canonical_url":null,"uuid":"6f6ff611-83a0-4e6f-a8ef-8290044743d3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5f7d56dc5117dc001edafbdf","reading_time":null}},{"node":{"id":"Ghost__Post__5eb19b7a82ce80001ee86716","title":"UCAN: Authorizing Users Without a Back End","slug":"auth-without-backend","featured":true,"feature_image":"https://s3.fission.codes/2020/05/zdenek-machacek-EtxsgEcHnZg-unsplash.jpg","excerpt":"User Controlled Authorization Networks (UCANs) are a way of doing authorization (\"what you can do\") where users are fully in control.","custom_excerpt":"User Controlled Authorization Networks (UCANs) are a way of doing authorization (\"what you can do\") where users are fully in control.","created_at_pretty":"05 May, 2020","published_at_pretty":"07 May, 2020","updated_at_pretty":"26 May, 2020","created_at":"2020-05-05T09:59:38.000-07:00","published_at":"2020-05-07T12:23:57.000-07:00","updated_at":"2020-05-26T15:19:05.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ♥λ Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ♥λ Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null},"primary_tag":{"name":"Technology Highlight","slug":"technology-highlight","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Technology Highlight","slug":"technology-highlight","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"ucan","slug":"ucan","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"auth","slug":"auth","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"authorization","slug":"authorization","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"jwt","slug":"jwt","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Fission is building a system which \"makes the right thing the easy thing.\" It\nlets you write apps for the browser without having to write or deploy a back\nend. We're making use of fairly recent browser features and W3C standards to\nmake this all possible. Read on for a technical summary, or join us in the\ndeveloper forum [https://talk.fission.codes]  to get into more detail.\n\nOne of the most common tasks for apps is authorizing users to perform some\naction, like storing new data to storage, updating records, or fetching a file. \n\nTraditional app architecture has many users share one database (\"multi-tenant\"),\nwith all user data fully interleaved with each other. Authorization here is\nprimarily focused on keeping users from editing each other's records on this\nshared infrastructure. The server's rules give fairly coarse-grained control.\nDue to the inevitable exceptions to these rules, the logic becomes increasingly\ncomplex over time.\n\nEven in a microservice architecture, typically all requests are funneled through\na central authorization service. Over time this causes several challenges,\nincluding complex logic, cost of maintenance, tricky edge cases, and difficulty\nmanaging traffic spikes. In short: it doesn't scale well.\n\nEven incumbents like  Google are moving away from the traditional auth server\nmodel [https://research.google/pubs/pub41892/]  to overcome the above\nchallenges. Fission has different constraints from Google and Amazon, but can\nadapt a lot of these ideas for our purposes. Essentially they're moving from a\ncentral auth server setup to a distributed model where more power is delegated\nto services.\n\nWhat if we learn from Google's approach (plus older approaches like SDSI/SPKI\n[https://tools.ietf.org/html/rfc2693]) but took it to its logic conclusion?\n\nIntroducing UCANs\n> User Controlled Authorization Networks (UCANs) are a way of doing authorization\nwhere users are fully in control. OAuth is designed for a centralized world,\nUCAN is the distributed user controlled version.\nUCAN SamAt a high level, User Controlled Authorization Networks (UCANs) are a\nway of doing authorization (\"what you can  do\") where users are fully in\ncontrol. There's no all-powerful authorization server, or server of any kind\nrequired. Everything that a users is allowed to do is captured directly in a key\nor token, and can be sent to anyone that knows how to interpret this format.\n\nSince all Fission accounts are equipped with a global ID and cryptographic keys,\nwe were able to design a system that has very few assumptions and thus works in\na huge number of situations.\n\nThis setup has several advantages:\n\n 1. Low effort: developers don't need to write and maintain complex access logic\n 2. Familiar: uses very common JSON Web Tokens (JWTs)\n 3. Invisible: users don't need to know that anything special is happening\n 4. Flexible: access can be granted as coarse or granular as the end users wants\n 5. Scalable: no auth server bottleneck / scales infinitely\n 6. Secure: military-grade encryption\n 7. Collaborative: users and services and delegate a subset of their access to\n    others\n 8. Self-contained: the token contains all the information needed to verify it\n\nUCANs are all that we need to sign into multiple machines, delegate access for\nservice providers to do things while we're offline, securely collaborate on\ndocuments with a team, and more. We get the flexibility of fine- or\ncoarse-grained control, all controlled by the one who cares about the data the\nmost: the user.\n\nWe've implemented this as the authorization system for Fission, and are also\nmaking this available as a building block for developers to solve user\nauthorization and delegation within their own applications.\n\n\n--------------------------------------------------------------------------------\n\nThis system of authorization is broken into two halves: read and write (or\n\"command and query\", depending on your background). Without getting too in the\nweeds, here's a high level description of how this all works:\n\nRead (Query) Access\nRead access comes in three flavours: public, private, and unlisted. Access\nfollows the object-capability model\n[https://en.wikipedia.org/wiki/Object-capability_model?oldformat=true], where\nanyone with the reference (URL or CID) and cryptograhic key can read the data by\nvirtue of having access to these.\n\nPublic 👀\nPublic files are just that: files that can be discovered or accessed by anyone\nat an easy-to read path.\n\nHere's a live example: https://boris.fission.name/Photos/boris-with-icecream.jpg\n\nPrivate 🔐\nThe user encrypts the data, and shares the key with those that should have\naccess. The contents of a private directory is only readable with a key, but\nonce you have access to that directory, all of the data in that directory\n(including subdirectories and metadata) is accessible.\n\nThe end experience matches the behaviour in other online consumer file storage\nsolutions like Dropbox and Google Drive. A major difference with Fission is that\nthe end user is given complete control over who has access, and access does not\ndepend on Fission's servers being accessible (i.e. you're offline or Fission\ndisappears).\n\nUnlisted 🗺️\nSort of a mashup of public and private files! This is useful when you want to\n(e.g.) embed an image in an email without distributing keys, but also don't want\nit easily discoverable.\n\nThe unlisted files themselves are left unencrypted, but finding them is\npractically infeasible without the private index. Think of this index as a\nsecret treasure map for the web — the map itself private (only a select few have\nthe map), but anyone with it can find the data at the marked locations.\n\nUnder the hood, the Fission SDK creates a JSON file that lists all of the\nlocations. That JSON file is then encrypted and the key passed to whoever should\nhave access., or the links can be shared directly.\n\nHere's a simple example of what this looks like:\n\n// The \"treasure map\"\n{\n  \"QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ\": {\n      \"cat.jpg\": \"Qmd286K6pohQcTKYqnS1YhWrCiS4gz7Xi34sdwMe9USZ7u\"\n  }\n}\n\n# URL\nhttps://ipfs.runfission.com/ipfs/QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ/cat.jpg\n\nWrite (Command) Access 🖊️\nThere are some actions that a user needs the help of another user or service to\nperform. For example: sending an email, or updating DNS.\n\nIn a traditional OAuth based system, the \"account\" lives entirely on the server,\nand the user is granted access with a token. In Fission's design, the account is\na key pair, and a UCAN is equivalent to an OAuth token. OAuth is designed for a\ncentralized client/server world. UCANs are the distributed user controlled\nequivalent.\n\nUCANs are simply JWT [jwt.io]s that contain special keys. Much of this will look\nfamiliar if you've done web auth in the past decade or so. Here's an example:\n\n{\n  \"alg\": \"Ed25519\",\n  \"typ\": \"JWT\"\n  \"uav\": \"0.1.0\"\n}\n{\n  \"aud\": \"did:key:zStEZpzSMtTt9k2vszgvCwF4fLQQSyA15W5AQ4z3AR6Bx4eFJ5crJFbuGxKmbma4\",\n  \"iss\": \"did:key:z5C4fuP2DDJChhMBCwAkpYUMuJZdNWWH5NeYjUyY8btYfzDh3aHwT5picHr9Ttjq\",\n  \"nbf\": 1588713622,\n  \"exp\": 1589000000,\n  \"scp\": \"/\"\n  \"ptc\": \"APPEND\",\n  \"prf\": null,\n}\n\nExample UCAN JSON Web TokenBearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsInVhdiI6IjAuMS4wIn0.eyJhdWQiOiJkaW\nQ6a2V5OnpTdEVacHpTTXRUdDlrMnZzemd2Q3dGNGZMUVFTeUExNVc1QVE0ejNBUjZCeDRl\nRko1Y3JKRmJ1R3hLbWJtYTQiLCJpc3MiOiJkaWQ6a2V5Ono1QzRmdVAyRERKQ2hoTUJDd0\nFrcFlVTXVKWmROV1dINU5lWWpVeVk4YnRZZnpEaDNhSHdUNXBpY0hyOVR0anEiLCJuYmYi\nOjE1ODg3MTM2MjIsImV4cCI6MTU4OTAwMDAwMCwic2NwIjoiLyIsInB0YyI6IkFQUEVORC\nIsInByZiI6bnVsbH0.Ay8C5ajYWHxtD8y0msla5IJ8VFffTHgVq448Hlr818JtNaTUzNIw\nFiuutEMECGTy69hV9Xu9bxGxTe0TpC7AzV34p0wSFax075mC3w9JYB8yqck_MEBg_dZ1xl\nJCfDve60AHseKPtbr2emp6hZVfTpQGZzusstimAxyYPrQUWv9wqTFmin0Ls-loAWamleUZ\noE1Tarlp_0h9SeV614RfRTC0e3x_VP9Ra_84JhJHZ7kiLf44TnyPl_9AbzuMdDwCvu-zX\njd_jMlDyYcuwamJ15XqrgykLOm0WTREgr_sNLVciXBXd6EQ-Zh2L7hd38noJm1P_MIr9_\nEDRWAhoRLXPQ\n\nThe same, as a bearer token (for an HTTP Authorization  header)Let's break that\ndown:\n\nHeader 📋\nThis is a standard JWT header, plus a uav  field.\n\n * alg  — type of signature\n * typ  — state that this is a JWT\n * uav  — \"UCAN version\" (so we can track the format of when it was issued)\n\nBody 💪\n * aud  \"Audience\" — the ID of who it's intended for (the \"to\" field)\n * iss  \"Issuer\" — ID of who sent it (the \"from\" field)\n * nbf  \"Not Before\" — Unix timestamp of when it becomes valid (typically when\n   it was created, but not always)\n * exp  \"Expiry\" — Unix timestamp of when it stops being valid\n * scp  \"Scope\" — The scope of things it's able to change (e.g. a file system\n   path)\n * ptc  \"Potency\" — what rights comes with the token (in this case it's append\n   only)\n * prf  \"Proof\" — an optional nested token with equal or greater privileges\n\nThese are then all signed with the user's private key. This key must match the\npublic key in the iss  field (user IDs are public keys), directly authenticating\nthe token. As the token is a complete description of access, this token is\nself-validating with no need to look at other data or services.\n\nDelegation 🤝\nWhat if you want to grant another user or service the ability to perform some\naction on your behalf? As long as they have a valid UCAN, they can wrap it in\nanother with equal or lesser rights and include the original in the prf  field.\n\nSince every UCAN layer is self-signed, we can trace back to the root (no prf \nfield), and know who the delegate is acting as. This chain of tokens is itself\nis the proof that you're perform some action.\n\nFor example, here's a chain:\n\n\"prf\":\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.\n       eyJhdWQiOiJkaWQ6a2V5OnpTdEVacHpTTXRUdDlrMnZz\n       emd2Q3dGNGZMUVFTeUExNVc1QVE0ejNBUjZCeDRlRko1\n       Y3JKRmJ1R3hLbWJtYTQiLCJleHAiOjE1ODgyNjU0MjAs\n       ImlzcyI6ImRpZDprZXk6ejFMQm53RWt0d1lMcnBQaHV3\n       Rm93ZFZ3QUZYNXpwUm85cnJWendpUlJCQmlhQm9DUjdo\n       TnFnc3RXN1ZNM1Q5YXVOYnFUbVFXNHZkSGI2MVJoVE1W\n       Z0NwMUJUeHVhS1UzYW5Xb0VSRlhwdVp2ZkUzOWc4dTdI\n       UzlCZUQxUUpOMWZYNlM4dnZza2FQaHhGa3dMdEdyNFpm\n       ZmtVRTU3V1pwTldNNlU2QnFka3RaeG1LenhDODV6TjRG\n       QzlXczVMSHVHZnhhQ3VCTGlVZkE3cUVZVlN6MVF1MXJa\n       RHBENk55ZlVOckhKMUVyWmR1SnVuOTc2bmJGSHJtRG5V\n       NDdSY1NNRkVTYk5LRGkxNDY3dFJmdWJzTXJEemViZENG\n       S1EybTFBWXlzdG8yaTZXbWNudWNqdDN0bndUcWU3Qm84\n       TDFnOGg4VUdBOTQ2REYzV2VHYlBVR3F6bnNVZExxNlhM\n       Q21KekprSm1yTnllWmtzd2R5UFgyVnU2SjlFNEoxMlNi\n       M2g5ZHM3YXRCeWFtZnRpdEVac2Y2aFBKa0xVWEdUaFlw\n       Q25tUkFBclJSZlBZMkg2Y0tEYzdBY25GUHlOSEdrYWI1\n       WkZvNHF2Z0JaeXRiSzFLNW9EM0hmUTZFMnliTGh5QzJi\n       OGk1d282REx0bTl1Zml4U0pOTlRIN1Vpa2s4OENtZXJ0\n       S1I3czEyQ0sxV0xFTTNadTVZQlpOcGhuamo3Y3A4UVRv\n       ZEFlaFJQVjlORzFDTEVBTUpWTjc5RHZZZTZTZmlhZkpv\n       YmN2ZkQ4bnBmUzZqY2VqY3lvdVFiRXBLREc3UUFuS1M0\n       OFA0QXZnQnFEdmZOVWU1NGpNa2s2cjZDb1g0TGNZR0h1\n       a1pERW5lYTlrd2tFb1hrVVlTNGoxQWZiS2g0NEZ6U3VY\n       YlFxWm5qalZwVGh4Q05tbU5uMUU0cUhtc0ZrdkdvRjNG\n       TjU1Q1Brb0dmREN2eVFKZ3Ftc0ZtcGVUSlN5OXd6djRN\n       dmJxcHVBVHhyN2V5eHNHZUNXUWtjRHd1YjMyaW5HcFIz\n       cmVUZnpSSkVDQ0ZaYXJuWGRjQzVQaWRha2IxV3U4TCIs\n       Im5iZiI6MCwicHRjIjoiQVBQRU5EIiwicHJmIjpudWxs\n       LCJzY3AiOiIvIn0.leyE9w2TF28espPq6mOWziQuJny2\n       GHH_wajV6S9q4gF9SLP-i9JaX_XbkHlE1GhpQ36gSs6F\n       v4_AXSuJzDkUhnAA-oPsI5bSHl28XbobzqdmXtQ2liK-\n       Gum7kUtF1CPXlIamV0NIUlCKLlaUgFod5ZQvvA19kMHU\n       ugDGm8O3G98TSm3qLlG-eoFNVXr0NSpvLeui3kQbdBsP\n       GMykaTsUn1fNLI3oKkK6JvUIq4po6gIidTdOJDlS7y_W\n       4bdMXUQcTprtpd2QmTqwTzws9tu4GBdx7q1vz35LiG39\n       ohhRs2NKB4rxbZK2O9kX1G2xLMSETE_YT9GR04XWMnFo\n       eIodsg\"\n\nNested proofYou'll notice that the nested proof is encoded as a bearer token.\nThis is because it needs to include its signature to prove that it's valid, and\na JWT signature is on the content encoded this way.\n\nThis token is thus valid as long as:\n\n * All token signatures are correct\n * The time range, potency, and scope of prf  are greater-or-equal to the\n   enclosing token\n * The outer token's iss  field matches the prf's aud  field (chain \"to\" and\n   \"from\" correctly)\n * The timestamps are valid at the present time\n\nHashing ️ 🏎️\nThese chains can get large, so you can optionally hash the outermost one before\nsending to a server. This acts as a \"content address\", meaning that if the\nservice hasn't seen it before, it can separately request that token, but if it\nalready has it in cache and doesn't need to get it over the network. Since\nhashes are much smaller than their content, this can save a lot of bandwidth on\nrepeated requests.\n\n\"prf\": \"QmU5WJTTp9vtMN1PBJpTV9xWXbTFBcWx3qjPGuXJXtujyd\"\n\nSame as the example above, but with the proof compressed to a content address\nConclusion\nUCANs are a straightforward way of doing authorization that leverage the public\nkey infrastructure already baked into Fission. This is essentially\nauthorization-at-the-edge with familiar JWTs. Since the token is self-contained,\nit's infinitely scalable. It's also very flexible: the user can grant root\naccess to everything, or grant a tab write access to a single object for one\nminute.\n\nThis article covers everything that you need to use a UCAN. For those interested\nin the space at a deeper level, there's a lot more background and technical\ndesign thinking that we didn't cover here. Keep an eye on our developer forum\n[talk.fission.codes]  for an upcoming article detailing the deeper internals!","html":"<p>Fission is building a system which \"makes the right thing the easy thing.\" It lets you write apps for the browser without having to write or deploy a back end. We're making use of fairly recent browser features and W3C standards to make this all possible. Read on for a technical summary, or <a href=\"https://talk.fission.codes\">join us in the developer forum</a> to get into more detail.</p><p>One of the most common tasks for apps is authorizing users to perform some action, like storing new data to storage, updating records, or fetching a file. </p><p>Traditional app architecture has many users share one database (\"multi-tenant\"), with all user data fully interleaved with each other. Authorization here is primarily focused on keeping users from editing each other's records on this shared infrastructure. The server's rules give fairly coarse-grained control. Due to the inevitable exceptions to these rules, the logic becomes increasingly complex over time.</p><p>Even in a microservice architecture, typically all requests are funneled through a central authorization service. Over time this causes several challenges, including complex logic, cost of maintenance, tricky edge cases, and difficulty managing traffic spikes. In short: it doesn't scale well.</p><p>Even incumbents like<a href=\"https://research.google/pubs/pub41892/\"> Google are moving away from the traditional auth server model</a> to overcome the above challenges. Fission has different constraints from Google and Amazon, but can adapt a lot of these ideas for our purposes. Essentially they're moving from a central auth server setup to a distributed model where more power is delegated to services.</p><p>What if we learn from Google's approach (plus older approaches like <a href=\"https://tools.ietf.org/html/rfc2693\">SDSI/SPKI</a>) but took it to its logic conclusion?</p><h2 id=\"introducing-ucans\">Introducing UCANs</h2><blockquote>User Controlled Authorization Networks (UCANs) are a way of doing authorization where users are fully in control. OAuth is designed for a centralized world, UCAN is the distributed user controlled version.</blockquote><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/05/UCAN_SAM-1.png\" class=\"kg-image\"><figcaption>UCAN Sam</figcaption></figure><!--kg-card-end: image--><p>At a high level, User Controlled Authorization Networks (UCANs) are a way of doing authorization (\"what <em>you can</em> do\") where users are fully in control. There's no all-powerful authorization server, or server of any kind required. Everything that a users is allowed to do is captured directly in a key or token, and can be sent to anyone that knows how to interpret this format.</p><p>Since all Fission accounts are equipped with a global ID and cryptographic keys, we were able to design a system that has very few assumptions and thus works in a huge number of situations.</p><p>This setup has several advantages:</p><ol><li>Low effort: developers don't need to write and maintain complex access logic</li><li>Familiar: uses very common JSON Web Tokens (JWTs)</li><li>Invisible: users don't need to know that anything special is happening</li><li>Flexible: access can be granted as coarse or granular as the end users wants</li><li>Scalable: no auth server bottleneck / scales infinitely</li><li>Secure: military-grade encryption</li><li>Collaborative: users and services and delegate a subset of their access to others</li><li>Self-contained: the token contains all the information needed to verify it</li></ol><p>UCANs are all that we need to sign into multiple machines, delegate access for service providers to do things while we're offline, securely collaborate on documents with a team, and more. We get the flexibility of fine- or coarse-grained control, all controlled by the one who cares about the data the most: the user.</p><p>We've implemented this as the authorization system for Fission, and are also making this available as a building block for developers to solve user authorization and delegation within their own applications.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>This system of authorization is broken into two halves: read and write (or \"command and query\", depending on your background). Without getting too in the weeds, here's a high level description of how this all works:</p><h2 id=\"read-query-access\">Read (Query) Access</h2><p>Read access comes in three flavours: public, private, and unlisted. Access follows the <a href=\"https://en.wikipedia.org/wiki/Object-capability_model?oldformat=true\">object-capability model</a>, where anyone with the reference (URL or CID) and cryptograhic key can read the data by virtue of having access to these.</p><h3 id=\"public-\">Public 👀</h3><p>Public files are just that: files that can be discovered or accessed by anyone at an easy-to read path.</p><p>Here's a live example: <a href=\"https://boris.fission.name/Photos/boris-with-icecream.jpg\">https://boris.fission.name/Photos/boris-with-icecream.jpg</a></p><h3 id=\"private-\">Private 🔐</h3><p>The user encrypts the data, and shares the key with those that should have access. The contents of a private directory is only readable with a key, but once you have access to that directory, all of the data in that directory (including subdirectories and metadata) is accessible.</p><p>The end experience matches the behaviour in other online consumer file storage solutions like Dropbox and Google Drive. A major difference with Fission is that the end user is given complete control over who has access, and access does not depend on Fission's servers being accessible (i.e. you're offline or Fission disappears).</p><h3 id=\"unlisted-\">Unlisted 🗺️</h3><p>Sort of a mashup of public and private files! This is useful when you want to (e.g.) embed an image in an email without distributing keys, but also don't want it easily discoverable.</p><p>The unlisted files themselves are left unencrypted, but finding them is practically infeasible without the private index. Think of this index as a secret treasure map for the web — the map itself private (only a select few have the map), but anyone with it can find the data at the marked locations.</p><p>Under the hood, the Fission SDK creates a JSON file that lists all of the locations. That JSON file is then encrypted and the key passed to whoever should have access., or the links can be shared directly.</p><p>Here's a simple example of what this looks like:</p><!--kg-card-begin: code--><pre><code class=\"language-javascript\">// The \"treasure map\"\n{\n  \"QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ\": {\n      \"cat.jpg\": \"Qmd286K6pohQcTKYqnS1YhWrCiS4gz7Xi34sdwMe9USZ7u\"\n  }\n}</code></pre><!--kg-card-end: code--><!--kg-card-begin: code--><pre><code class=\"language-URL\"># URL\nhttps://ipfs.runfission.com/ipfs/QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ/cat.jpg</code></pre><!--kg-card-end: code--><h2 id=\"write-command-access-\">Write (Command) Access 🖊️</h2><p>There are some actions that a user needs the help of another user or service to perform. For example: sending an email, or updating DNS.</p><p>In a traditional OAuth based system, the \"account\" lives entirely on the server, and the user is granted access with a token<em><em>. </em></em>In Fission's design, the account is a key pair, and a UCAN is equivalent to an OAuth token. OAuth is designed for a centralized client/server world. UCANs are the distributed user controlled equivalent.</p><p>UCANs are simply <a href=\"jwt.io\">JWT</a>s that contain special keys. Much of this will look familiar if you've done web auth in the past decade or so. Here's an example:</p><!--kg-card-begin: code--><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-json\">{\n  \"alg\": \"Ed25519\",\n  \"typ\": \"JWT\"\n  \"uav\": \"0.1.0\"\n}\n{\n  \"aud\": \"did:key:zStEZpzSMtTt9k2vszgvCwF4fLQQSyA15W5AQ4z3AR6Bx4eFJ5crJFbuGxKmbma4\",\n  \"iss\": \"did:key:z5C4fuP2DDJChhMBCwAkpYUMuJZdNWWH5NeYjUyY8btYfzDh3aHwT5picHr9Ttjq\",\n  \"nbf\": 1588713622,\n  \"exp\": 1589000000,\n  \"scp\": \"/\"\n  \"ptc\": \"APPEND\",\n  \"prf\": null,\n}</code></pre><figcaption>Example UCAN JSON Web Token</figcaption></figure><!--kg-card-end: code--><!--kg-card-begin: code--><figure class=\"kg-card kg-code-card\"><pre><code>Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsInVhdiI6IjAuMS4wIn0.eyJhdWQiOiJkaW\nQ6a2V5OnpTdEVacHpTTXRUdDlrMnZzemd2Q3dGNGZMUVFTeUExNVc1QVE0ejNBUjZCeDRl\nRko1Y3JKRmJ1R3hLbWJtYTQiLCJpc3MiOiJkaWQ6a2V5Ono1QzRmdVAyRERKQ2hoTUJDd0\nFrcFlVTXVKWmROV1dINU5lWWpVeVk4YnRZZnpEaDNhSHdUNXBpY0hyOVR0anEiLCJuYmYi\nOjE1ODg3MTM2MjIsImV4cCI6MTU4OTAwMDAwMCwic2NwIjoiLyIsInB0YyI6IkFQUEVORC\nIsInByZiI6bnVsbH0.Ay8C5ajYWHxtD8y0msla5IJ8VFffTHgVq448Hlr818JtNaTUzNIw\nFiuutEMECGTy69hV9Xu9bxGxTe0TpC7AzV34p0wSFax075mC3w9JYB8yqck_MEBg_dZ1xl\nJCfDve60AHseKPtbr2emp6hZVfTpQGZzusstimAxyYPrQUWv9wqTFmin0Ls-loAWamleUZ\noE1Tarlp_0h9SeV614RfRTC0e3x_VP9Ra_84JhJHZ7kiLf44TnyPl_9AbzuMdDwCvu-zX\njd_jMlDyYcuwamJ15XqrgykLOm0WTREgr_sNLVciXBXd6EQ-Zh2L7hd38noJm1P_MIr9_\nEDRWAhoRLXPQ</code></pre><figcaption>The same, as a bearer token (for an HTTP <code>Authorization</code> header)</figcaption></figure><!--kg-card-end: code--><p>Let's break that down:</p><h2 id=\"header-\">Header 📋</h2><p>This is a standard JWT header, plus a <code>uav</code> field.</p><ul><li><code>alg</code> — type of signature</li><li><code>typ</code> — state that this is a JWT</li><li><code>uav</code> — \"UCAN version\" (so we can track the format of when it was issued)</li></ul><h2 id=\"body-\">Body 💪</h2><ul><li><code>aud</code> \"Audience\" — the ID of who it's intended for (the \"to\" field)</li><li><code>iss</code> \"Issuer\" — ID of who sent it (the \"from\" field)</li><li><code>nbf</code> \"Not Before\" — Unix timestamp of when it becomes valid (typically when it was created, but not always)</li><li><code>exp</code> \"Expiry\" — Unix timestamp of when it stops being valid</li><li><code>scp</code> \"Scope\" — The scope of things it's able to change (e.g. a file system path)</li><li><code>ptc</code> \"Potency\" — what rights comes with the token (in this case it's append only)</li><li><code>prf</code> \"Proof\" — an optional nested token with equal or greater privileges</li></ul><p>These are then all signed with the user's private key. This key must match the public key in the <code>iss</code> field (user IDs are public keys), directly authenticating the token. As the token is a complete description of access, this token is self-validating with no need to look at other data or services.</p><h3 id=\"delegation-\">Delegation 🤝</h3><p>What if you want to grant another user or service the ability to perform some action on your behalf? As long as they have a valid UCAN, they can wrap it in another with equal or lesser rights and include the original in the <code>prf</code> field.</p><p>Since every UCAN layer is self-signed, we can trace back to the root (no <code>prf</code> field), and know who the delegate is acting as. This chain of tokens is itself is the proof that you're perform some action.</p><p>For example, here's a chain:</p><!--kg-card-begin: code--><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-plaintext\">\"prf\":\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.\n       eyJhdWQiOiJkaWQ6a2V5OnpTdEVacHpTTXRUdDlrMnZz\n       emd2Q3dGNGZMUVFTeUExNVc1QVE0ejNBUjZCeDRlRko1\n       Y3JKRmJ1R3hLbWJtYTQiLCJleHAiOjE1ODgyNjU0MjAs\n       ImlzcyI6ImRpZDprZXk6ejFMQm53RWt0d1lMcnBQaHV3\n       Rm93ZFZ3QUZYNXpwUm85cnJWendpUlJCQmlhQm9DUjdo\n       TnFnc3RXN1ZNM1Q5YXVOYnFUbVFXNHZkSGI2MVJoVE1W\n       Z0NwMUJUeHVhS1UzYW5Xb0VSRlhwdVp2ZkUzOWc4dTdI\n       UzlCZUQxUUpOMWZYNlM4dnZza2FQaHhGa3dMdEdyNFpm\n       ZmtVRTU3V1pwTldNNlU2QnFka3RaeG1LenhDODV6TjRG\n       QzlXczVMSHVHZnhhQ3VCTGlVZkE3cUVZVlN6MVF1MXJa\n       RHBENk55ZlVOckhKMUVyWmR1SnVuOTc2bmJGSHJtRG5V\n       NDdSY1NNRkVTYk5LRGkxNDY3dFJmdWJzTXJEemViZENG\n       S1EybTFBWXlzdG8yaTZXbWNudWNqdDN0bndUcWU3Qm84\n       TDFnOGg4VUdBOTQ2REYzV2VHYlBVR3F6bnNVZExxNlhM\n       Q21KekprSm1yTnllWmtzd2R5UFgyVnU2SjlFNEoxMlNi\n       M2g5ZHM3YXRCeWFtZnRpdEVac2Y2aFBKa0xVWEdUaFlw\n       Q25tUkFBclJSZlBZMkg2Y0tEYzdBY25GUHlOSEdrYWI1\n       WkZvNHF2Z0JaeXRiSzFLNW9EM0hmUTZFMnliTGh5QzJi\n       OGk1d282REx0bTl1Zml4U0pOTlRIN1Vpa2s4OENtZXJ0\n       S1I3czEyQ0sxV0xFTTNadTVZQlpOcGhuamo3Y3A4UVRv\n       ZEFlaFJQVjlORzFDTEVBTUpWTjc5RHZZZTZTZmlhZkpv\n       YmN2ZkQ4bnBmUzZqY2VqY3lvdVFiRXBLREc3UUFuS1M0\n       OFA0QXZnQnFEdmZOVWU1NGpNa2s2cjZDb1g0TGNZR0h1\n       a1pERW5lYTlrd2tFb1hrVVlTNGoxQWZiS2g0NEZ6U3VY\n       YlFxWm5qalZwVGh4Q05tbU5uMUU0cUhtc0ZrdkdvRjNG\n       TjU1Q1Brb0dmREN2eVFKZ3Ftc0ZtcGVUSlN5OXd6djRN\n       dmJxcHVBVHhyN2V5eHNHZUNXUWtjRHd1YjMyaW5HcFIz\n       cmVUZnpSSkVDQ0ZaYXJuWGRjQzVQaWRha2IxV3U4TCIs\n       Im5iZiI6MCwicHRjIjoiQVBQRU5EIiwicHJmIjpudWxs\n       LCJzY3AiOiIvIn0.leyE9w2TF28espPq6mOWziQuJny2\n       GHH_wajV6S9q4gF9SLP-i9JaX_XbkHlE1GhpQ36gSs6F\n       v4_AXSuJzDkUhnAA-oPsI5bSHl28XbobzqdmXtQ2liK-\n       Gum7kUtF1CPXlIamV0NIUlCKLlaUgFod5ZQvvA19kMHU\n       ugDGm8O3G98TSm3qLlG-eoFNVXr0NSpvLeui3kQbdBsP\n       GMykaTsUn1fNLI3oKkK6JvUIq4po6gIidTdOJDlS7y_W\n       4bdMXUQcTprtpd2QmTqwTzws9tu4GBdx7q1vz35LiG39\n       ohhRs2NKB4rxbZK2O9kX1G2xLMSETE_YT9GR04XWMnFo\n       eIodsg\"</code></pre><figcaption>Nested proof</figcaption></figure><!--kg-card-end: code--><p>You'll notice that the nested proof is encoded as a bearer token. This is because it needs to include its signature to prove that it's valid, and a JWT signature is on the content encoded this way.</p><p>This token is thus valid as long as:</p><ul><li>All token signatures are correct</li><li>The time range, potency, and scope of <code>prf</code> are greater-or-equal to the enclosing token</li><li>The outer token's <code>iss</code> field matches the <code>prf</code>'s <code>aud</code> field (chain \"to\" and \"from\" correctly)</li><li>The timestamps are valid at the present time</li></ul><h3 id=\"hashing-\">Hashing ️ 🏎️</h3><p>These chains can get large, so you can optionally hash the outermost one before sending to a server. This acts as a \"content address\", meaning that if the service hasn't seen it before, it can separately request that token, but if it already has it in cache and doesn't need to get it over the network. Since hashes are much smaller than their content, this can save a lot of bandwidth on repeated requests.</p><!--kg-card-begin: code--><figure class=\"kg-card kg-code-card\"><pre><code>\"prf\": \"QmU5WJTTp9vtMN1PBJpTV9xWXbTFBcWx3qjPGuXJXtujyd\"</code></pre><figcaption>Same as the example above, but with the proof compressed to a content address</figcaption></figure><!--kg-card-end: code--><h1 id=\"conclusion\">Conclusion</h1><p>UCANs are a straightforward way of doing authorization that leverage the public key infrastructure already baked into Fission. This is essentially authorization-at-the-edge with familiar JWTs. Since the token is self-contained, it's infinitely scalable. It's also very flexible: the user can grant root access to everything, or grant a tab write access to a single object for one minute.</p><p>This article covers everything that you need to use a UCAN. For those interested in the space at a deeper level, there's a lot more background and technical design thinking that we didn't cover here. Keep an eye on <a href=\"talk.fission.codes\">our developer forum</a> for an upcoming article detailing the deeper internals!</p>","url":"https://blog.fission.codes/auth-without-backend/","canonical_url":null,"uuid":"9bd5ed02-502d-4e31-828c-6ad1fa4613b9","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb19b7a82ce80001ee86716","reading_time":null}},{"node":{"id":"Ghost__Post__5eb0b3c3847394001e25cfe8","title":"TiddlyWiki as the original serverless","slug":"tiddlywiki-as-the-original-serverless","featured":true,"feature_image":"https://images.unsplash.com/photo-1506784881475-0e408bbca849?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"Using TiddlyWiki as your own open source Roam or Notion using the Git saver, plus an App Idea for running this on Fission","custom_excerpt":"Using TiddlyWiki as your own open source Roam or Notion using the Git saver, plus an App Idea for running this on Fission","created_at_pretty":"05 May, 2020","published_at_pretty":"05 May, 2020","updated_at_pretty":"08 October, 2020","created_at":"2020-05-04T17:30:59.000-07:00","published_at":"2020-05-05T11:28:24.000-07:00","updated_at":"2020-10-08T12:33:45.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"App Ideas","slug":"app-ideas","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"App Ideas","slug":"app-ideas","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"TiddlyWiki","slug":"tiddlywiki","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"serverless","slug":"serverless","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"TiddlyWiki is a really interesting \"non linear personal notebook\" that's\ncurrently getting a lot of people tinkering with it because it's a bit like an\nopen source, build your own Roam Research or Notion: a tool for building second\nbrains.\n\nI've used TiddlyWiki [https://tiddlywiki.com]  off and on over many years. I can\ntrace back to a post from May 2005 on my old blog\n[https://bmannconsulting.com/archive/2005/05/19/tiddlywiki-as-note-system/],\nalthough even there I mention running it earlier than that. A couple of years\nago, I even ran it on Google App Engine with the Go-based TiddlyWiki App Engine\nServer [https://github.com/rsc/tiddly]. That was multi-user, using Google\naccounts to restrict read/write.\n\nAlthough we didn't really appreciate it at the time, it had this lovely aspect\nof all your \"stuff\" being in this one file. You could move the file around,\nwhether it be on a USB stick or an FTP folder or a cloud service. Any web\nbrowser opens it and \"runs\" it – no servers involved.\n\nJeremy Ruston @Jermolene [https://twitter.com/Jermolene], the creator of\nTiddlyWiki, posted a great tweetstorm about how TiddlyWiki has been serverless\nall the way back to 2004:\n\n> TiddlyWiki was literally serverless in 2004, but it was at @Osmosoft\n[https://twitter.com/osmosoft?ref_src=twsrc%5Etfw]  in 2007/8 with @jayfresh\n[https://twitter.com/jayfresh?ref_src=twsrc%5Etfw], @psd\n[https://twitter.com/psd?ref_src=twsrc%5Etfw]  and others that we understood the\nvalue\n\n— Jeremy Ruston (@Jermolene) July 6, 2016\n[https://twitter.com/Jermolene/status/750677048021094400?ref_src=twsrc%5Etfw]\nRun your own Roam with TiddlyWiki plus Git\nThere has been a lot of excitement about Roam Research\n[https://roamresearch.com], which describes itself on the home page as:\n\n> A note-taking tool for networked thought.\nAs easy to use as a document. As powerful as a graph database. Roam helps you\norganize your research for the long haul.\nThe #roamcult  Twitter hashtag or community run @CultRoam account\n[https://twitter.com/CultRoam]  should give you an idea of how excited people\nare, as well as surfacing lots of great tutorials and tips.\n\n(Insert Notion [https://www.notion.so/]  love here if you're a fan of it\ninstead)\n\nVenkatesh Rao wrote about A Text Renaissance\n[https://www.ribbonfarm.com/2020/02/24/a-text-renaissance/]  which covers a bit\nabout why this is all coming up now:\n\n> The text renaissance is an actual renaissance. It’s a story of history-inspired\nrenewal in a very fundamental way: exciting recent developments are due in part\nto a new generation of young product visionaries circling back to the early\nhistory of digital text, rediscovering old, abandoned ideas, and reimagining the\nbleeding edge in terms of the unexplored adjacent possible of the 80s and 90s.\n\n--------------------------------------------------------------------------------\n\nBut of course, both Notion and Roam are hosted SaaS apps, neither of them with\nofficial APIs yet. They have markdown exports, but ultimately your personal\ndata, your notes, or \"Second Brain\" [https://www.buildingasecondbrain.com/]  as\nsome people call it, isn't fully under your control.\n\nEnter TiddlyWiki, which is open source and thus can be hosted and backed up and\nmodified as you desire.\n\nTiddlyBlink [https://giffmex.org/gifts/tiddlyblink.html]  and Drift\n[https://akhater.github.io/drift/]  are two distros / plugins for TiddlyWiki\nthat include the bi-directional linking capability\n\nToday, TiddlyWiki has the concept of \"Savers\"\n[https://tiddlywiki.com/dev/static/Saver.html]. You can still save updates to\nyour local machine, but you can also connect it up to a Git service of your\nchoice and \"save\" by committing the HTML back through an API call.\n\nPesho Ivanov documents this as Two-click TiddlyWiki with Github Pages\n[https://pesho-ivanov.github.io/#Two-click%20TiddlyWiki%20with%20GitHub-pages],\nor you can read the extended edition from Chris Aldrich, Self-hosting\nTiddlyWiki\nwith Github Pages\n[https://boffosocko.com/2020/04/04/self-hosting-tiddlywiki-with-github-pages/].\n\nI set Drift up for myself, including turning on password-based encryption in\nTiddlyWiki [https://tiddlywiki.com/static/Encryption.html]. Here's my publicly\nhosted Drift TiddlyWiki [https://projects.bmannconsulting.com/tiddlywiki-drift/]\n. I can enter the password, and use it in the browser, and then periodically the\nencrypted version is saved back to my own private Github repo.\n\nMy second brain, publicly available everywhere, backed up and versioned. Pretty\nnice!\n\nApp Idea: Fission Saver for TiddlyWiki\nOf course, git is still pretty complex to learn, for someone who mainly wants to\ntake personal notes and make sure they're around forever. What I've described\nabove was a fun exercise for me, but it's very <insert-yak-shaving\n[https://talk.fission.codes/t/yak-shaving-programming-term/582]-gif>.\n\nThe Fission tech stack gives users and developers a web native file system.\nHaving files available everywhere, read/write, encrypted, and accessible through\njust a browser, means that developers can build apps that keep users in control\nof their files, and that a lot of existing apps can easily be connected to\nFission. Serverless, as it were.\n\nI wrote up what a \"Fission Saver\" would look like for TiddlyWiki\n[https://talk.fission.codes/t/fission-saver-for-tiddlywiki/616]  on our App\nIdeas forum, which is a very basic start. Since you can publish files with\nFission, the TiddlyWiki would be hosted on Fission, but also write back to\nitself over the HTTP API. This is pretty much the same as the Git savers today.\n\nBut we can do better than that, since we have portable user IDs and a\npasswordless login which can do encryption. A \"native\" Fission adapter for\nTiddlyWiki would mean offline and online access to your data available\neverywhere, and encrypted or public data as needed. \n\nI'm looking forward to more \"serverless\" thinking with the tools we now have,\nwhich TiddlyWiki had figured out 15+ years ago.","html":"<p>TiddlyWiki is a really interesting \"non linear personal notebook\" that's currently getting a lot of people tinkering with it because it's a bit like an open source, build your own Roam Research or Notion: a tool for building second brains.</p><p>I've used <a href=\"https://tiddlywiki.com\">TiddlyWiki</a> off and on over many years. I can trace back to a <a href=\"https://bmannconsulting.com/archive/2005/05/19/tiddlywiki-as-note-system/\">post from May 2005 on my old blog</a>, although even there I mention running it earlier than that. A couple of years ago, I even ran it on Google App Engine with the <a href=\"https://github.com/rsc/tiddly\">Go-based TiddlyWiki App Engine Server</a>. That was multi-user, using Google accounts to restrict read/write.</p><p>Although we didn't really appreciate it at the time, it had this lovely aspect of all your \"stuff\" being in this one file. You could move the file around, whether it be on a USB stick or an FTP folder or a cloud service. Any web browser opens it and \"runs\" it – no servers involved.</p><p><a href=\"https://twitter.com/Jermolene\">Jeremy Ruston @Jermolene</a>, the creator of TiddlyWiki, posted a great tweetstorm about how TiddlyWiki has been serverless all the way back to 2004:</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">TiddlyWiki was literally serverless in 2004, but it was at <a href=\"https://twitter.com/osmosoft?ref_src=twsrc%5Etfw\">@Osmosoft</a> in 2007/8 with <a href=\"https://twitter.com/jayfresh?ref_src=twsrc%5Etfw\">@jayfresh</a>, <a href=\"https://twitter.com/psd?ref_src=twsrc%5Etfw\">@psd</a> and others that we understood the value</p>&mdash; Jeremy Ruston (@Jermolene) <a href=\"https://twitter.com/Jermolene/status/750677048021094400?ref_src=twsrc%5Etfw\">July 6, 2016</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><!--kg-card-end: embed--><h2 id=\"run-your-own-roam-with-tiddlywiki-plus-git\">Run your own Roam with TiddlyWiki plus Git</h2><p>There has been a lot of excitement about <a href=\"https://roamresearch.com\">Roam Research</a>, which describes itself on the home page as:</p><blockquote><strong>A note-taking tool for networked thought.</strong><br>As easy to use as a document. As powerful as a graph database. Roam helps you organize your research for the long haul.</blockquote><p>The <em>#roamcult</em> Twitter hashtag or community run <a href=\"https://twitter.com/CultRoam\">@CultRoam account</a> should give you an idea of how excited people are, as well as surfacing lots of great tutorials and tips.</p><p>(Insert <a href=\"https://www.notion.so/\">Notion</a> love here if you're a fan of it instead)</p><p><a href=\"https://www.ribbonfarm.com/2020/02/24/a-text-renaissance/\">Venkatesh Rao wrote about A Text Renaissance</a> which covers a bit about why this is all coming up now:</p><blockquote>The text renaissance is an actual <em>renaissance. </em>It’s a story of history-inspired renewal in a very fundamental way: exciting recent developments are due in part to a new generation of young product visionaries circling back to the early history of digital text, rediscovering old, abandoned ideas, and reimagining the bleeding edge in terms of the unexplored adjacent possible of the 80s and 90s.</blockquote><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>But of course, both Notion and Roam are hosted SaaS apps, neither of them with official APIs yet. They have markdown exports, but ultimately your personal data, your notes, or <a href=\"https://www.buildingasecondbrain.com/\">\"Second Brain\"</a> as some people call it, isn't fully under your control.</p><p>Enter TiddlyWiki, which is open source and thus can be hosted and backed up and modified as you desire.</p><p><a href=\"https://giffmex.org/gifts/tiddlyblink.html\">TiddlyBlink</a> and <a href=\"https://akhater.github.io/drift/\">Drift</a> are two distros / plugins for TiddlyWiki that include the bi-directional linking capability</p><p>Today, TiddlyWiki has the concept of <a href=\"https://tiddlywiki.com/dev/static/Saver.html\">\"Savers\"</a>. You can still save updates to your local machine, but you can also connect it up to a Git service of your choice and \"save\" by committing the HTML back through an API call.</p><p>Pesho Ivanov documents this as <a href=\"https://pesho-ivanov.github.io/#Two-click%20TiddlyWiki%20with%20GitHub-pages\">Two-click TiddlyWiki with Github Pages</a>, or you can read the extended edition from <a href=\"https://boffosocko.com/2020/04/04/self-hosting-tiddlywiki-with-github-pages/\">Chris Aldrich, Self-hosting TiddlyWiki with Github Pages</a>.</p><p>I set Drift up for myself, including turning on <a href=\"https://tiddlywiki.com/static/Encryption.html\">password-based encryption in TiddlyWiki</a>. Here's my <a href=\"https://projects.bmannconsulting.com/tiddlywiki-drift/\">publicly hosted Drift TiddlyWiki</a>. I can enter the password, and use it in the browser, and then periodically the encrypted version is saved back to my own private Github repo.</p><p>My second brain, publicly available everywhere, backed up and versioned. Pretty nice!</p><h2 id=\"app-idea-fission-saver-for-tiddlywiki\">App Idea: Fission Saver for TiddlyWiki</h2><p>Of course, git is still pretty complex to learn, for someone who mainly wants to take personal notes and make sure they're around forever. What I've described above was a fun exercise for me, but it's very &lt;insert-<a href=\"https://talk.fission.codes/t/yak-shaving-programming-term/582\">yak-shaving</a>-gif&gt;.</p><p>The Fission tech stack gives users and developers a web native file system. Having files available everywhere, read/write, encrypted, and accessible through just a browser, means that developers can build apps that keep users in control of their files, and that a lot of existing apps can easily be connected to Fission. Serverless, as it were.</p><p>I wrote up what a <a href=\"https://talk.fission.codes/t/fission-saver-for-tiddlywiki/616\">\"Fission Saver\" would look like for TiddlyWiki</a> on our App Ideas forum, which is a very basic start. Since you can publish files with Fission, the TiddlyWiki would be hosted on Fission, but also write back to itself over the HTTP API. This is pretty much the same as the Git savers today.</p><p>But we can do better than that, since we have portable user IDs and a passwordless login which can do encryption. A \"native\" Fission adapter for TiddlyWiki would mean offline and online access to your data available everywhere, and encrypted or public data as needed. </p><p>I'm looking forward to more \"serverless\" thinking with the tools we now have, which TiddlyWiki had figured out 15+ years ago.</p>","url":"https://blog.fission.codes/tiddlywiki-as-the-original-serverless/","canonical_url":null,"uuid":"639e84ca-a7a1-4f62-b6c0-ede9ff32629a","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb0b3c3847394001e25cfe8","reading_time":null}},{"node":{"id":"Ghost__Post__5ea068b333f762001e6c6fae","title":"Experimenting with HLS Video Streaming and IPFS","slug":"experimenting-with-hls-video-streaming-and-ipfs","featured":false,"feature_image":"https://images.unsplash.com/photo-1501141178950-e7fa06e4adf5?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"Walk through of encoding video using HTTP Live Streaming (HLS) and publishing to Fission.","custom_excerpt":"Walk through of encoding video using HTTP Live Streaming (HLS) and publishing to Fission.","created_at_pretty":"22 April, 2020","published_at_pretty":"22 April, 2020","updated_at_pretty":"22 April, 2020","created_at":"2020-04-22T08:54:27.000-07:00","published_at":"2020-04-22T10:09:39.000-07:00","updated_at":"2020-04-22T10:09:39.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"HLS","slug":"hls","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We've been running weekly developer lunch & learn sessions\n[https://talk.fission.codes/c/events/dweblunchnlearn/27]  over video. I've been\ndownloading the video from Zoom, doing some basic trimming, and then uploading\nit using Fission, and embedding the IPFS link in our Discourse forum. This works\npretty well – Discourse recognizes the video file extension and embeds a video\nplayer in the post automatically. I had read a bit about HTTP Live Streaming\n(HLS) and wanted to experiment.\n\nOriginally developed by Apple, and now widely supported, HLS doesn't need any\nspecial server-side support. A bit more in this freeCodeCamp article:\n\n> The most important feature of HLS is its ability to adapt the bitrate of the\nvideo to the actual speed of the connection. This optimizes the quality of the\nexperience.\n\nHLS videos are encoded in different renditions at different resolutions and\nbitrates. This is usually referred to as the bitrate ladder. When a connection\ngets slower, the protocol automatically adjusts the requested bitrate to the\nbandwidth available.\n\n– freeCodeCamp: HLS Video Streaming: What it is, and When to Use it\n[https://www.freecodecamp.org/news/what-is-hls-and-when-to-use-it/]\nThere's an example in the JavaScript implementation of IPFS about using HLS\nwith\njs-ipfs\n[https://github.com/ipfs/js-ipfs/tree/master/examples/browser-video-streaming].\nThe README explains:\n\n> The fact that HLS content is just \"a bunch of files\" makes it a good choice for\nIPFS (another protocol that works this way is MPEG-DASH, which could certainly\nbe a good choice as well). Furthermore, the hls.js\n[https://github.com/video-dev/hls.js]  library enables straightforward\nintegration with the HTML5 video element.\n\"Just a bunch of files\" is pretty much how we're thinking about Fission. Fission\nand any standard IPFS gateway serves up files over HTTP and/or natively with\nIPFS, without plugins, in any browser. It's really great to get back to what is\nbasically the 2020 equivalent of upload files to the server.\n\nI took the latest video file of Joel talking about Ceramic Network\n[https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559] \n and ran the ffmpeg  command from the js-ipfs example. On MacOS, brew install\nffmpeg  will get you the program.\n\nffmpeg -i ../YOURVIDEO.mp4 -profile:v baseline -level 3.0 -start_number 0\n-hls_time 5 -hls_list_size 0 -f hls master.m3u8\n\nOn my desktop iMac, the progress showed to be encoding at 4x - 5x speed. The\nvideo is about an hour, so it took about 20 minutes to complete. The output is\n400+ files, which I uploaded with fission up  and then noted down the hash of\nthe folder.\n\nBrowse the files on IPFS using Fission Drive\n[https://drive.fission.codes/#/QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S]\nThen I went back and edited the streaming.js  folder and index.html. The \nstreaming.js  file just needs the hash of the folder that contains the\nHLS-encoded video, which for this video is \nQmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S. Feel free to use this to\nexperiment with! I kept the master.m3u8  file name so didn't need to change\nthat.\n\nOne change I made was to to also include the IPFS script from a CDN in the \nindex.html  file (the js-ipfs example assumes you're running things locally and\nworking with js-ipfs from there). Just add this line:\n\n<script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"></script>\n\nYou can browse all the files directly using Fission Drive\n[https://drive.fission.codes/#/events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network]\n, including the source video that was encoded. Visiting the index page\n[https://events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network/] \nwill load the player and HLS stream the video.\n\nExample HLS Video\nHere's the source and video embedded via Codepen – hit the HTML button to view\nsource. Note the Fission gateway link to the published version of the \nstreaming.js  file, also remotely included:\n\nThe video isn't very high quality to begin with, and adding width/height to the\nvideo element could constrain it to different sizes.\n\nMore about Joel and Ceramic Network on the forum event page »\n[https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559]\n\nConclusion\nThis is a very manual process, and there are lots of dedicated video encoding\nservices. It was a good experiment to see that anything that is a \"bunch of\nfiles\" can just work over the distributed IPFS network, and easily published and\nhosted on Fission.\n\nExperimenting with a large, high quality video and testing across different\ndevices and network speeds (and whether or not nearby peers had a copy of the\nvideo) would need to be done vs. just embedding the original video to see what\nthe user experience is actually like.\n\nThis also leads to some interesting thoughts about distributed encoding. Once an\noriginal video is encoded and added to the network by one person, it never needs\nto be encoded again. From some brief research, ffmpeg is not deterministic,\nwhich lead to this thread on Mastodon\n[https://mastodon.social/@Gargron/11088922]. This means that different people\nencoding a video could get different output files, which means different hashes\nin IPFS.\n\nHowever, the original video file is unique, so adding metadata to the original\nsource video file for discovery of the unique, permanent hash of an HLS-encoded\nversion could work.\n\nWe're currently doing some work on how to do this for images, so that different\nsizes are automatically available and cached in the network.\n\n\n--------------------------------------------------------------------------------\n\nFission is an app & web hosting platform that implements a web native file\nsystem powered by IPFS. Build and run locally, fission up  to host everywhere. \nRead our guide [https://guide.fission.codes]  to get started and sign up right\nfrom the command line.","html":"<p>We've been running <a href=\"https://talk.fission.codes/c/events/dweblunchnlearn/27\">weekly developer lunch &amp; learn sessions</a> over video. I've been downloading the video from Zoom, doing some basic trimming, and then uploading it using Fission, and embedding the IPFS link in our Discourse forum. This works pretty well – Discourse recognizes the video file extension and embeds a video player in the post automatically. I had read a bit about HTTP Live Streaming (HLS) and wanted to experiment.</p><p>Originally developed by Apple, and now widely supported, HLS doesn't need any special server-side support. A bit more in this freeCodeCamp article:</p><blockquote>The most important feature of HLS is its ability to adapt the bitrate of the video to the actual speed of the connection. This optimizes the quality of the experience.<br><br>HLS videos are encoded in different renditions at different resolutions and bitrates. This is usually referred to as the bitrate ladder. When a connection gets slower, the protocol automatically adjusts the requested bitrate to the bandwidth available.<br><br>– <a href=\"https://www.freecodecamp.org/news/what-is-hls-and-when-to-use-it/\">freeCodeCamp: HLS Video Streaming: What it is, and When to Use it</a></blockquote><p>There's an <a href=\"https://github.com/ipfs/js-ipfs/tree/master/examples/browser-video-streaming\">example in the JavaScript implementation of IPFS about using HLS with js-ipfs</a>. The README explains:</p><blockquote>The fact that HLS content is just \"a bunch of files\" makes it a good choice for IPFS (another protocol that works this way is MPEG-DASH, which could certainly be a good choice as well). Furthermore, the <a href=\"https://github.com/video-dev/hls.js\">hls.js</a> library enables straightforward integration with the HTML5 video element.</blockquote><p>\"Just a bunch of files\" is pretty much how we're thinking about Fission. Fission and any standard IPFS gateway serves up files over HTTP and/or natively with IPFS, without plugins, in any browser. It's really great to get back to what is basically the 2020 equivalent of upload files to the server.</p><p>I took the latest video file of <a href=\"https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559\">Joel talking about Ceramic Network</a> and ran the <code>ffmpeg</code> command from the js-ipfs example. On MacOS, <code>brew install ffmpeg</code> will get you the program.</p><p><code>ffmpeg -i ../YOURVIDEO.mp4 -profile:v baseline -level 3.0 -start_number 0 -hls_time 5 -hls_list_size 0 -f hls master.m3u8</code></p><p>On my desktop iMac, the progress showed to be encoding at 4x - 5x speed. The video is about an hour, so it took about 20 minutes to complete. The output is 400+ files, which I uploaded with <code>fission up</code> and then noted down the hash of the folder.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/04/hls-video-files-in-drive-600.png\" class=\"kg-image\"><figcaption>Browse the <a href=\"https://drive.fission.codes/#/QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S\">files on IPFS using Fission Drive</a></figcaption></figure><!--kg-card-end: image--><p>Then I went back and edited the <code>streaming.js</code> folder and <code>index.html</code>. The <code>streaming.js</code> file just needs the hash of the folder that contains the HLS-encoded video, which for this video is <code>QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S</code>. Feel free to use this to experiment with! I kept the <code>master.m3u8</code> file name so didn't need to change that.</p><p>One change I made was to to also include the IPFS script from a CDN in the <code>index.html</code> file (the js-ipfs example assumes you're running things locally and working with js-ipfs from there). Just add this line:</p><p><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"&gt;&lt;/script&gt;</code></p><p>You can <a href=\"https://drive.fission.codes/#/events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network\">browse all the files directly using Fission Drive</a>, including the source video that was encoded. <a href=\"https://events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network/\">Visiting the index page</a> will load the player and HLS stream the video.</p><h2 id=\"example-hls-video\">Example HLS Video</h2><p>Here's the source and video embedded via Codepen – hit the HTML button to view source. Note the Fission gateway link to the published version of the <code>streaming.js</code> file, also remotely included:</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe id=\"cp_embed_GRprJoZ\" src=\"https://codepen.io/borismann/embed/preview/GRprJoZ?height=300&amp;slug-hash=GRprJoZ&amp;default-tabs=html,result&amp;host=https://codepen.io\" title=\"HLS Streaming over IPFS Example\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" class=\"cp_embed_iframe\" style=\"width: 100%; overflow: hidden;\"></iframe></figure><!--kg-card-end: embed--><p>The video isn't very high quality to begin with, and adding width/height to the video element could constrain it to different sizes.</p><p>More about <a href=\"https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559\">Joel and Ceramic Network on the forum event page »</a></p><h2 id=\"conclusion\">Conclusion</h2><p>This is a very manual process, and there are lots of dedicated video encoding services. It was a good experiment to see that anything that is a \"bunch of files\" can just work over the distributed IPFS network, and easily published and hosted on Fission.</p><p>Experimenting with a large, high quality video and testing across different devices and network speeds (and whether or not nearby peers had a copy of the video) would need to be done vs. just embedding the original video to see what the user experience is actually like.</p><p>This also leads to some interesting thoughts about distributed encoding. Once an original video is encoded and added to the network by one person, it never needs to be encoded again. From some brief research, <a href=\"https://mastodon.social/@Gargron/11088922\">ffmpeg is not deterministic, which lead to this thread on Mastodon</a>. This means that different people encoding a video could get different output files, which means different hashes in IPFS.</p><p>However, the original video file is unique, so adding metadata to the original source video file for discovery of the unique, permanent hash of an HLS-encoded version could work.</p><p>We're currently doing some work on how to do this for images, so that different sizes are automatically available and cached in the network.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p><em>Fission is an app &amp; web hosting platform that implements a web native file system powered by IPFS. Build and run locally, <code>fission up</code> to host everywhere. <a href=\"https://guide.fission.codes\">Read our guide</a> to get started and sign up right from the command line.</em></p>","url":"https://blog.fission.codes/experimenting-with-hls-video-streaming-and-ipfs/","canonical_url":null,"uuid":"a59c1236-5ed1-4fda-8b61-e88a76aca80c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ea068b333f762001e6c6fae","reading_time":null}},{"node":{"id":"Ghost__Post__5e9f1c633a435e001e565c5f","title":"What colour is your yak? Visualizing developer jargon","slug":"yak-visualizing-developer-jargon","featured":true,"feature_image":"https://s3.fission.codes/2020/04/lieve-ransijn-FsJ_vzp_NI4-unsplash.jpg","excerpt":"We've created some fun illustrations around software dev jargon. Help us pick which ones we should work on next.","custom_excerpt":"We've created some fun illustrations around software dev jargon. Help us pick which ones we should work on next.","created_at_pretty":"21 April, 2020","published_at_pretty":"21 April, 2020","updated_at_pretty":"21 April, 2020","created_at":"2020-04-21T09:16:35.000-07:00","published_at":"2020-04-21T11:05:00.000-07:00","updated_at":"2020-04-21T11:53:53.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"FISSION","slug":"fission","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"FISSION","slug":"fission","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"SCREAMING_SNAKE_CASE","slug":"screaming_snake_case","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We're creating illustrations for developer concepts, catch phrases, and other\njargon. Yak shaving  is one of those terms. It's fun to dig into the concepts\nand learn about their background, teach other people about them, and we get some\ncool images to use in a number of different ways that aren't just company\nbranding. We have ideas for some new illustrations, we're happy to take other\nsuggestions and have people vote for their favourites\n[https://talk.fission.codes/t/vote-for-and-suggest-developer-concepts-to-illustrate/590]\n.\n\nBear and Penguin\nWe had fun last year sourcing the Bear and Penguin illustration for the Berlin\nOpen Source Salon [https://blog.fission.codes/bear-penguin-bounty-for-boss/].\nThe inner meaning here is that the bear is the coat of arms for the city of\nBerlin – the \"Berliner Bär\". The bear is holding a Club Mate drink, traditional\ndrink of German hackers (although I know at one time the Mozilla Vancouver team\nimported it for their office fridge, too!). And the penguin is the long time\nmascot of Linux.\n\nWizards and Snakes\nSince then, we've worked with Bruno Monts [https://www.behance.net/brunomonts],\nan illustrator based in Brasil, to create a number of other illustrations.\n\nWe just released the Haskell Wizards  series, written up in our Haskell for\nTypescript Devs book\n[https://haskellfortypescriptdevs.fission.codes/appendix/haskell-wizards]:\n\nSCREAMING SNAKE CASE [https://blog.fission.codes/screaming-snake-case/]  was\njust a pure piece of fun, with the vaporwave stylings pushed to the max. We did\na first run of stickers with this image, and can't wait to come up with t-shirts\nor other swag with this fun image:\n\nVote for developer jargon to illustrate\nWe're going to get some more illustrations made, and have a couple of ideas\nalready:\n\n 1. Kebab case  wouldn't be vaporwave, but maybe a sort of comic / graphic art –\n    a delicious kebab, dripping sauce.\n 2. The Elm programming language  is a favourite of ours at Fission, so vote for\n    this one if you want an Elm-y character in the style of the Haskell Wizards\n 3. We recently added some definitions for Yak shaving to our forum\n    [https://talk.fission.codes/t/yak-shaving-programming-term/582]. It's only\n    about 20 years old – but of course software development has changed\n    dramatically in the last 20 years, so it's a term that's not well known.\n 4. Bike shedding  and\n 5. Pets vs. Cattle are the last two suggestions we have so far.\n\nRead more about these ideas, vote in the forum for your favourites to get\nillustrated, or suggest your own »\n[https://talk.fission.codes/t/vote-for-and-suggest-developer-concepts-to-illustrate/590]\n\nWe're working with Bruno now, and will run the vote for a couple of weeks, and\nthen get at least 2 or 3 of the developer jargon ideas turned into high quality\nillustrations.\n\nPost header photo by Lieve Ransijn\n[https://unsplash.com/@lievemax?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText] \n on Unsplash\n[https://unsplash.com/s/photos/yak?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText]","html":"<p>We're creating illustrations for developer concepts, catch phrases, and other jargon. <em>Yak shaving</em> is one of those terms. It's fun to dig into the concepts and learn about their background, teach other people about them, and we get some cool images to use in a number of different ways that aren't just company branding. We have ideas for some new illustrations, we're happy to take other suggestions and have people <a href=\"https://talk.fission.codes/t/vote-for-and-suggest-developer-concepts-to-illustrate/590\">vote for their favourites</a>.</p><h2 id=\"bear-and-penguin\">Bear and Penguin</h2><p>We had fun last year <a href=\"https://blog.fission.codes/bear-penguin-bounty-for-boss/\">sourcing the Bear and Penguin illustration for the Berlin Open Source Salon</a>. The inner meaning here is that the bear is the coat of arms for the city of Berlin – the \"Berliner Bär\". The bear is holding a Club Mate drink, traditional drink of German hackers (although I know at one time the Mozilla Vancouver team imported it for their office fridge, too!). And the penguin is the long time mascot of Linux.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2020/04/bear---penguin-02-2000px-white.jpg\" class=\"kg-image\"></figure><!--kg-card-end: image--><h2 id=\"wizards-and-snakes\">Wizards and Snakes</h2><p>Since then, we've worked with <a href=\"https://www.behance.net/brunomonts\">Bruno Monts</a>, an illustrator based in Brasil, to create a number of other illustrations.</p><p>We just released the <strong>Haskell Wizards</strong> series, written up in our <a href=\"https://haskellfortypescriptdevs.fission.codes/appendix/haskell-wizards\">Haskell for Typescript Devs book</a>:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2020/04/haskell-wizard-trio.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p><a href=\"https://blog.fission.codes/screaming-snake-case/\">SCREAMING SNAKE CASE</a> was just a pure piece of fun, with the vaporwave stylings pushed to the max. We did a first run of stickers with this image, and can't wait to come up with t-shirts or other swag with this fun image:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2020/04/screaming_snake_case-1024.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><h2 id=\"vote-for-developer-jargon-to-illustrate\">Vote for developer jargon to illustrate</h2><p>We're going to get some more illustrations made, and have a couple of ideas already:</p><ol><li><strong>Kebab case</strong> wouldn't be vaporwave, but maybe a sort of comic / graphic art – a delicious kebab, dripping sauce.</li><li>The <strong>Elm programming language</strong> is a favourite of ours at Fission, so vote for this one if you want an Elm-y character in the style of the Haskell Wizards</li><li>We recently added some <a href=\"https://talk.fission.codes/t/yak-shaving-programming-term/582\">definitions for Yak shaving to our forum</a>. It's only about 20 years old – but of course software development has changed dramatically in the last 20 years, so it's a term that's not well known.</li><li><strong>Bike shedding</strong> and</li><li><strong>Pets vs. Cattle </strong>are the last two suggestions we have so far.</li></ol><p><a href=\"https://talk.fission.codes/t/vote-for-and-suggest-developer-concepts-to-illustrate/590\">Read more about these ideas, vote in the forum for your favourites to get illustrated, or suggest your own »</a></p><p>We're working with Bruno now, and will run the vote for a couple of weeks, and then get at least 2 or 3 of the developer jargon ideas turned into high quality illustrations.</p><p><em>Post header photo by <a href=\"https://unsplash.com/@lievemax?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Lieve Ransijn</a> on <a href=\"https://unsplash.com/s/photos/yak?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></em></p>","url":"https://blog.fission.codes/yak-visualizing-developer-jargon/","canonical_url":null,"uuid":"cb97450c-2bcb-483e-b6e5-426bc392e3e4","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e9f1c633a435e001e565c5f","reading_time":null}}]}},"pageContext":{"pageNumber":1,"humanPageNumber":2,"skip":12,"limit":12,"numberOfPages":7,"previousPagePath":"/","nextPagePath":"/page/3"}},"staticQueryHashes":["1752937443","2358152166","2561578252","2731221146","4145280475"]}