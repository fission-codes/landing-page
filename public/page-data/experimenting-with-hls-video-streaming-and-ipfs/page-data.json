{"componentChunkName":"component---src-templates-post-js","path":"/experimenting-with-hls-video-streaming-and-ipfs/","result":{"data":{"ghostPost":{"id":"Ghost__Post__5ea068b333f762001e6c6fae","title":"Experimenting with HLS Video Streaming and IPFS","slug":"experimenting-with-hls-video-streaming-and-ipfs","featured":false,"feature_image":"https://images.unsplash.com/photo-1501141178950-e7fa06e4adf5?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"Walk through of encoding video using HTTP Live Streaming (HLS) and publishing to Fission.","custom_excerpt":"Walk through of encoding video using HTTP Live Streaming (HLS) and publishing to Fission.","created_at_pretty":"22 April, 2020","published_at_pretty":"22 April, 2020","updated_at_pretty":"22 April, 2020","created_at":"2020-04-22T08:54:27.000-07:00","published_at":"2020-04-22T10:09:39.000-07:00","updated_at":"2020-04-22T10:09:39.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"HLS","slug":"hls","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We've been running weekly developer lunch & learn sessions\n[https://talk.fission.codes/c/events/dweblunchnlearn/27]  over video. I've been\ndownloading the video from Zoom, doing some basic trimming, and then uploading\nit using Fission, and embedding the IPFS link in our Discourse forum. This works\npretty well – Discourse recognizes the video file extension and embeds a video\nplayer in the post automatically. I had read a bit about HTTP Live Streaming\n(HLS) and wanted to experiment.\n\nOriginally developed by Apple, and now widely supported, HLS doesn't need any\nspecial server-side support. A bit more in this freeCodeCamp article:\n\n> The most important feature of HLS is its ability to adapt the bitrate of the\nvideo to the actual speed of the connection. This optimizes the quality of the\nexperience.\n\nHLS videos are encoded in different renditions at different resolutions and\nbitrates. This is usually referred to as the bitrate ladder. When a connection\ngets slower, the protocol automatically adjusts the requested bitrate to the\nbandwidth available.\n\n– freeCodeCamp: HLS Video Streaming: What it is, and When to Use it\n[https://www.freecodecamp.org/news/what-is-hls-and-when-to-use-it/]\nThere's an example in the JavaScript implementation of IPFS about using HLS\nwith\njs-ipfs\n[https://github.com/ipfs/js-ipfs/tree/master/examples/browser-video-streaming].\nThe README explains:\n\n> The fact that HLS content is just \"a bunch of files\" makes it a good choice for\nIPFS (another protocol that works this way is MPEG-DASH, which could certainly\nbe a good choice as well). Furthermore, the hls.js\n[https://github.com/video-dev/hls.js]  library enables straightforward\nintegration with the HTML5 video element.\n\"Just a bunch of files\" is pretty much how we're thinking about Fission. Fission\nand any standard IPFS gateway serves up files over HTTP and/or natively with\nIPFS, without plugins, in any browser. It's really great to get back to what is\nbasically the 2020 equivalent of upload files to the server.\n\nI took the latest video file of Joel talking about Ceramic Network\n[https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559] \n and ran the ffmpeg  command from the js-ipfs example. On MacOS, brew install\nffmpeg  will get you the program.\n\nffmpeg -i ../YOURVIDEO.mp4 -profile:v baseline -level 3.0 -start_number 0\n-hls_time 5 -hls_list_size 0 -f hls master.m3u8\n\nOn my desktop iMac, the progress showed to be encoding at 4x - 5x speed. The\nvideo is about an hour, so it took about 20 minutes to complete. The output is\n400+ files, which I uploaded with fission up  and then noted down the hash of\nthe folder.\n\nBrowse the files on IPFS using Fission Drive\n[https://drive.fission.codes/#/QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S]\nThen I went back and edited the streaming.js  folder and index.html. The \nstreaming.js  file just needs the hash of the folder that contains the\nHLS-encoded video, which for this video is \nQmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S. Feel free to use this to\nexperiment with! I kept the master.m3u8  file name so didn't need to change\nthat.\n\nOne change I made was to to also include the IPFS script from a CDN in the \nindex.html  file (the js-ipfs example assumes you're running things locally and\nworking with js-ipfs from there). Just add this line:\n\n<script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"></script>\n\nYou can browse all the files directly using Fission Drive\n[https://drive.fission.codes/#/events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network]\n, including the source video that was encoded. Visiting the index page\n[https://events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network/] \nwill load the player and HLS stream the video.\n\nExample HLS Video\nHere's the source and video embedded via Codepen – hit the HTML button to view\nsource. Note the Fission gateway link to the published version of the \nstreaming.js  file, also remotely included:\n\nThe video isn't very high quality to begin with, and adding width/height to the\nvideo element could constrain it to different sizes.\n\nMore about Joel and Ceramic Network on the forum event page »\n[https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559]\n\nConclusion\nThis is a very manual process, and there are lots of dedicated video encoding\nservices. It was a good experiment to see that anything that is a \"bunch of\nfiles\" can just work over the distributed IPFS network, and easily published and\nhosted on Fission.\n\nExperimenting with a large, high quality video and testing across different\ndevices and network speeds (and whether or not nearby peers had a copy of the\nvideo) would need to be done vs. just embedding the original video to see what\nthe user experience is actually like.\n\nThis also leads to some interesting thoughts about distributed encoding. Once an\noriginal video is encoded and added to the network by one person, it never needs\nto be encoded again. From some brief research, ffmpeg is not deterministic,\nwhich lead to this thread on Mastodon\n[https://mastodon.social/@Gargron/11088922]. This means that different people\nencoding a video could get different output files, which means different hashes\nin IPFS.\n\nHowever, the original video file is unique, so adding metadata to the original\nsource video file for discovery of the unique, permanent hash of an HLS-encoded\nversion could work.\n\nWe're currently doing some work on how to do this for images, so that different\nsizes are automatically available and cached in the network.\n\n\n--------------------------------------------------------------------------------\n\nFission is an app & web hosting platform that implements a web native file\nsystem powered by IPFS. Build and run locally, fission up  to host everywhere. \nRead our guide [https://guide.fission.codes]  to get started and sign up right\nfrom the command line.","html":"<p>We've been running <a href=\"https://talk.fission.codes/c/events/dweblunchnlearn/27\">weekly developer lunch &amp; learn sessions</a> over video. I've been downloading the video from Zoom, doing some basic trimming, and then uploading it using Fission, and embedding the IPFS link in our Discourse forum. This works pretty well – Discourse recognizes the video file extension and embeds a video player in the post automatically. I had read a bit about HTTP Live Streaming (HLS) and wanted to experiment.</p><p>Originally developed by Apple, and now widely supported, HLS doesn't need any special server-side support. A bit more in this freeCodeCamp article:</p><blockquote>The most important feature of HLS is its ability to adapt the bitrate of the video to the actual speed of the connection. This optimizes the quality of the experience.<br><br>HLS videos are encoded in different renditions at different resolutions and bitrates. This is usually referred to as the bitrate ladder. When a connection gets slower, the protocol automatically adjusts the requested bitrate to the bandwidth available.<br><br>– <a href=\"https://www.freecodecamp.org/news/what-is-hls-and-when-to-use-it/\">freeCodeCamp: HLS Video Streaming: What it is, and When to Use it</a></blockquote><p>There's an <a href=\"https://github.com/ipfs/js-ipfs/tree/master/examples/browser-video-streaming\">example in the JavaScript implementation of IPFS about using HLS with js-ipfs</a>. The README explains:</p><blockquote>The fact that HLS content is just \"a bunch of files\" makes it a good choice for IPFS (another protocol that works this way is MPEG-DASH, which could certainly be a good choice as well). Furthermore, the <a href=\"https://github.com/video-dev/hls.js\">hls.js</a> library enables straightforward integration with the HTML5 video element.</blockquote><p>\"Just a bunch of files\" is pretty much how we're thinking about Fission. Fission and any standard IPFS gateway serves up files over HTTP and/or natively with IPFS, without plugins, in any browser. It's really great to get back to what is basically the 2020 equivalent of upload files to the server.</p><p>I took the latest video file of <a href=\"https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559\">Joel talking about Ceramic Network</a> and ran the <code>ffmpeg</code> command from the js-ipfs example. On MacOS, <code>brew install ffmpeg</code> will get you the program.</p><p><code>ffmpeg -i ../YOURVIDEO.mp4 -profile:v baseline -level 3.0 -start_number 0 -hls_time 5 -hls_list_size 0 -f hls master.m3u8</code></p><p>On my desktop iMac, the progress showed to be encoding at 4x - 5x speed. The video is about an hour, so it took about 20 minutes to complete. The output is 400+ files, which I uploaded with <code>fission up</code> and then noted down the hash of the folder.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/04/hls-video-files-in-drive-600.png\" class=\"kg-image\"><figcaption>Browse the <a href=\"https://drive.fission.codes/#/QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S\">files on IPFS using Fission Drive</a></figcaption></figure><!--kg-card-end: image--><p>Then I went back and edited the <code>streaming.js</code> folder and <code>index.html</code>. The <code>streaming.js</code> file just needs the hash of the folder that contains the HLS-encoded video, which for this video is <code>QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S</code>. Feel free to use this to experiment with! I kept the <code>master.m3u8</code> file name so didn't need to change that.</p><p>One change I made was to to also include the IPFS script from a CDN in the <code>index.html</code> file (the js-ipfs example assumes you're running things locally and working with js-ipfs from there). Just add this line:</p><p><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"&gt;&lt;/script&gt;</code></p><p>You can <a href=\"https://drive.fission.codes/#/events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network\">browse all the files directly using Fission Drive</a>, including the source video that was encoded. <a href=\"https://events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network/\">Visiting the index page</a> will load the player and HLS stream the video.</p><h2 id=\"example-hls-video\">Example HLS Video</h2><p>Here's the source and video embedded via Codepen – hit the HTML button to view source. Note the Fission gateway link to the published version of the <code>streaming.js</code> file, also remotely included:</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe id=\"cp_embed_GRprJoZ\" src=\"https://codepen.io/borismann/embed/preview/GRprJoZ?height=300&amp;slug-hash=GRprJoZ&amp;default-tabs=html,result&amp;host=https://codepen.io\" title=\"HLS Streaming over IPFS Example\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" class=\"cp_embed_iframe\" style=\"width: 100%; overflow: hidden;\"></iframe></figure><!--kg-card-end: embed--><p>The video isn't very high quality to begin with, and adding width/height to the video element could constrain it to different sizes.</p><p>More about <a href=\"https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559\">Joel and Ceramic Network on the forum event page »</a></p><h2 id=\"conclusion\">Conclusion</h2><p>This is a very manual process, and there are lots of dedicated video encoding services. It was a good experiment to see that anything that is a \"bunch of files\" can just work over the distributed IPFS network, and easily published and hosted on Fission.</p><p>Experimenting with a large, high quality video and testing across different devices and network speeds (and whether or not nearby peers had a copy of the video) would need to be done vs. just embedding the original video to see what the user experience is actually like.</p><p>This also leads to some interesting thoughts about distributed encoding. Once an original video is encoded and added to the network by one person, it never needs to be encoded again. From some brief research, <a href=\"https://mastodon.social/@Gargron/11088922\">ffmpeg is not deterministic, which lead to this thread on Mastodon</a>. This means that different people encoding a video could get different output files, which means different hashes in IPFS.</p><p>However, the original video file is unique, so adding metadata to the original source video file for discovery of the unique, permanent hash of an HLS-encoded version could work.</p><p>We're currently doing some work on how to do this for images, so that different sizes are automatically available and cached in the network.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p><em>Fission is an app &amp; web hosting platform that implements a web native file system powered by IPFS. Build and run locally, <code>fission up</code> to host everywhere. <a href=\"https://guide.fission.codes\">Read our guide</a> to get started and sign up right from the command line.</em></p>","url":"https://blog.fission.codes/experimenting-with-hls-video-streaming-and-ipfs/","canonical_url":null,"uuid":"a59c1236-5ed1-4fda-8b61-e88a76aca80c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ea068b333f762001e6c6fae","reading_time":null}},"pageContext":{"slug":"experimenting-with-hls-video-streaming-and-ipfs"}},"staticQueryHashes":["1752937443","2358152166","2561578252","2731221146","4145280475"]}