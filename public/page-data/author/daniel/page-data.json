{"componentChunkName":"component---src-templates-author-js","path":"/author/daniel/","result":{"data":{"ghostAuthor":{"slug":"daniel","name":"Daniel Holmgren","bio":null,"cover_image":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","location":null,"website":null,"twitter":null,"facebook":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5f7d56dc5117dc001edafbdf","title":"Web Native File System Technical Design Overview","slug":"web-native-file-system-presentation","featured":false,"feature_image":"https://images.unsplash.com/photo-1524351543168-8e38787614e9?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"Brooklyn and Daniel from the Fission team present a technical overview of the Web Native File System.","custom_excerpt":"Brooklyn and Daniel from the Fission team present a technical overview of the Web Native File System.","created_at_pretty":"07 October, 2020","published_at_pretty":"14 August, 2020","updated_at_pretty":"19 November, 2020","created_at":"2020-10-06T22:49:16.000-07:00","published_at":"2020-08-13T22:49:00.000-07:00","updated_at":"2020-11-19T11:58:53.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ♥λ Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null},{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"WNFS","slug":"wnfs","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Fission has designed a spec for what we call the Web Native File System (WNFS).\nIt is implemented on top of IPFS and can be loaded in any browser, including\nmobile.\n\nWe’ve designed the system to store metadata, encrypt private files, and offer a\nnumber of features for end users and developers using the file system to build\nweb apps with a web native file system, where files are owned by users. This\nalso leads to a style of single tenant architecture for web apps, but for this\npresentation we will focus mainly on the file system details.\n\nJoin Brooklyn Zelenka and Daniel Holmgren as they present a technical design\noverview of WNFS. Leave a comment in the forum\n[https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818] \n if you have questions.\n\nSlides\nFull Slide deck available on Notist »\n[https://noti.st/expede/QAYFyW/webnative-file-system]Screencast\nSorry, your browser doesn't support embedded videos.Video\nResources\n * Slides on Notist [https://noti.st/expede/QAYFyW/webnative-file-system]\n * Fission Whitepaper\n   [https://whitepaper.fission.codes/file-system/file-system-basics]  (continues\n   to be a living document)\n * Implemented in webnative SDK on Github\n   [https://github.com/fission-suite/webnative], with basic info in the README \n * Extended usage and documentation in the Fission Guide\n   [https://guide.fission.codes/webnative-sdk/getting-started-webnative-sdk]","html":"<p>Fission has designed a spec for what we call the Web Native File System (WNFS). It is implemented on top of IPFS and can be loaded in any browser, including mobile.</p><p>We’ve designed the system to store metadata, encrypt private files, and offer a number of features for end users and developers using the file system to build web apps with a web native file system, where files are owned by users. This also leads to a style of single tenant architecture for web apps, but for this presentation we will focus mainly on the file system details.</p><p>Join Brooklyn Zelenka and Daniel Holmgren as they present a technical design overview of WNFS. Leave a <a href=\"https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818\">comment in the forum</a> if you have questions.</p><h2 id=\"slides\">Slides</h2><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/10/common-concepts-virtual-nodes-large-34.png\" class=\"kg-image\"><figcaption><a href=\"https://noti.st/expede/QAYFyW/webnative-file-system\">Full Slide deck available on Notist »</a></figcaption></figure><!--kg-card-end: image--><h2 id=\"screencast\">Screencast</h2><!--kg-card-begin: html--><video width=\"100%\" height=\"100%\" controls>\n\n    <source src=\"https://ipfs.runfission.com/ipfs/QmaLfohLFTdBu3SU7H3CX6vT8qMZHjUQ8v2mYqcXosBnYY/Screencast_from_08-12-2020_090507_PM.webm\" type=\"video/webm\">\n\n    Sorry, your browser doesn't support embedded videos.\n</video>\n\n<!--kg-card-end: html--><h2 id=\"video\">Video</h2><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/479944561?app_id=122963\" width=\"426\" height=\"240\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Technical Overview of the Web Native File System with Brooklyn Zelenka, Daniel Holmgren - Fission Video Chat Aug 13, 2020\"></iframe></figure><!--kg-card-end: embed--><h2 id=\"resources\">Resources</h2><ul><li><a href=\"https://noti.st/expede/QAYFyW/webnative-file-system\">Slides on Notist</a></li><li><a href=\"https://whitepaper.fission.codes/file-system/file-system-basics\">Fission Whitepaper</a> (continues to be a living document)</li><li>Implemented in <a href=\"https://github.com/fission-suite/webnative\">webnative SDK on Github</a>, with basic info in the README </li><li>Extended usage and documentation in the <a href=\"https://guide.fission.codes/webnative-sdk/getting-started-webnative-sdk\">Fission Guide</a></li></ul>","url":"https://blog.fission.codes/web-native-file-system-presentation/","canonical_url":null,"uuid":"6f6ff611-83a0-4e6f-a8ef-8290044743d3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5f7d56dc5117dc001edafbdf","reading_time":null}},{"node":{"id":"Ghost__Post__5e73df8b73d281001e1ea40d","title":"Weekly Decentralized Web \"Lunch & Learn\" Video Calls","slug":"weekly-dweb-video-calls","featured":true,"feature_image":"https://s3.fission.codes/2020/03/dweb-lunch-n-learn-3.jpg","excerpt":"We're hosting weekly decentralized web related video calls on Thursdays. Watch the video from the first one on the topic of cryptography, browser APIs, and macaroons, presented by Daniel from our team.","custom_excerpt":"We're hosting weekly decentralized web related video calls on Thursdays. Watch the video from the first one on the topic of cryptography, browser APIs, and macaroons, presented by Daniel from our team.","created_at_pretty":"19 March, 2020","published_at_pretty":"19 March, 2020","updated_at_pretty":"19 March, 2020","created_at":"2020-03-19T14:09:31.000-07:00","published_at":"2020-03-19T15:34:19.000-07:00","updated_at":"2020-03-19T15:34:19.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"DWeb Lunch & Learn","slug":"dweblunchnlearn","description":"Decentralized Web Lunch & Learn. Weekly video calls hosted on Thursdays by the Fission team.","feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"DWeb Lunch & Learn","slug":"dweblunchnlearn","description":"Decentralized Web Lunch & Learn. Weekly video calls hosted on Thursdays by the Fission team.","feature_image":null,"meta_description":null,"meta_title":null},{"name":"cryptography","slug":"cryptography","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"WebAuthN","slug":"webauthn","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"macaroons","slug":"macaroons","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"ecc","slug":"ecc","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We did our first Decentralized Web \"Lunch & Learn\" video presentation this\nmorning. Join us weekly on Thursdays for live chats, follow the upcoming\nspeakers and topics list [https://talk.fission.codes/t/upcoming-dweb-talks/530],\nor suggest your own topic you'd like to see covered.\n\nWe'll be hosting these calls on a weekly basis, and anyone is welcome to drop\nin. We'll schedule some \"formal\" presentations, other times it might just be\ndemos, sharing some interesting apps we've seen, and so on. Kind of like an\noffice based \"Lunch & Learn\", except there's no office, and it's only lunch time\nin the North American Eastern Time Zone!\n\nCryptography, Keys, and Auth, with Daniel Holmgren\nThis weeks call we had Daniel from our team cover a lot of different\ncryptography and authentication topics related to what we're building at\nFission:\n\n * Cryptographic building blocks: hashes, symmetric keys, asymmetric keys,\n   public/private keys\n * Types of crypto-systems, including RSA and ECC\n * Browser APIs, including WebCrypto, IndexedDB, and WebAuthN\n * Macaroons, a better version of cookies\n\nDaniel also wrote up Everything you wanted to know about Elliptic Curve\nCryptography\n[https://blog.fission.codes/everything-you-wanted-to-know-about-elliptic-curve-cryptography/] \n as a full blog post, with definitions of all the various algorithms.\n\nHere's the video of the live call:\n\nhttps://ipfs.runfission.com/ipfs/Qme4pju9gFYuzCtZc1RJHAB31o9i4ay57FvBGDVgyk2rg5/daniel-crypto-dweb-lunchnlearn.mp4\n\n You can find all the related links and resources in our forum\n[https://talk.fission.codes/t/cryptography-keys-and-authorization-authentication-with-daniel-holmgren/529]\n.\n\nWant to be reminded about joining us next week? Subscribe to our Events &\nMeetups list »\n[https://5d04d668.sibforms.com/serve/MUIEAIlLz1kjYt6HZ5KK2HdjjwFSCY6DGobJY_wWMJTUB96KYAKCKS51gCUfiqsTtGbfpX30jAXqWjG3mCxFaQtmFY-rGKE_TIr5PSj8RYMuCqoONmKwjC2-4kKvu0MyX_0kSjSwVQJsYf9a5BamJo_OmRfUvVJWjXgaWsHbEtBV_7iR4ulTCCQao_l1MMjN_t4YsG0eCtyB3bBF]","html":"<p>We did our first Decentralized Web \"Lunch &amp; Learn\" video presentation this morning. Join us weekly on Thursdays for live chats, follow the <a href=\"https://talk.fission.codes/t/upcoming-dweb-talks/530\">upcoming speakers and topics list</a>, or suggest your own topic you'd like to see covered.</p><p>We'll be hosting these calls on a weekly basis, and anyone is welcome to drop in. We'll schedule some \"formal\" presentations, other times it might just be demos, sharing some interesting apps we've seen, and so on. Kind of like an office based \"Lunch &amp; Learn\", except there's no office, and it's only lunch time in the North American Eastern Time Zone!</p><h2 id=\"cryptography-keys-and-auth-with-daniel-holmgren\">Cryptography, Keys, and Auth, with Daniel Holmgren</h2><p>This weeks call we had Daniel from our team cover a lot of different cryptography and authentication topics related to what we're building at Fission:</p><ul><li>Cryptographic building blocks: hashes, symmetric keys, asymmetric keys, public/private keys</li><li>Types of crypto-systems, including RSA and ECC</li><li>Browser APIs, including WebCrypto, IndexedDB, and WebAuthN</li><li>Macaroons, a better version of cookies</li></ul><p>Daniel also wrote up <a href=\"https://blog.fission.codes/everything-you-wanted-to-know-about-elliptic-curve-cryptography/\">Everything you wanted to know about Elliptic Curve Cryptography</a> as a full blog post, with definitions of all the various algorithms.</p><p>Here's the video of the live call:</p><!--kg-card-begin: html--><video width=\"100%\" height=\"100%\" controls>\n              <source src=\"https://ipfs.runfission.com/ipfs/Qme4pju9gFYuzCtZc1RJHAB31o9i4ay57FvBGDVgyk2rg5/daniel-crypto-dweb-lunchnlearn.mp4\">\n              <a href=\"https://ipfs.runfission.com/ipfs/Qme4pju9gFYuzCtZc1RJHAB31o9i4ay57FvBGDVgyk2rg5/daniel-crypto-dweb-lunchnlearn.mp4\">https://ipfs.runfission.com/ipfs/Qme4pju9gFYuzCtZc1RJHAB31o9i4ay57FvBGDVgyk2rg5/daniel-crypto-dweb-lunchnlearn.mp4</a>\n            </video><!--kg-card-end: html--><p>You can find all the related <a href=\"https://talk.fission.codes/t/cryptography-keys-and-authorization-authentication-with-daniel-holmgren/529\">links and resources in our forum</a>.</p><p>Want to be reminded about joining us next week? <a href=\"https://5d04d668.sibforms.com/serve/MUIEAIlLz1kjYt6HZ5KK2HdjjwFSCY6DGobJY_wWMJTUB96KYAKCKS51gCUfiqsTtGbfpX30jAXqWjG3mCxFaQtmFY-rGKE_TIr5PSj8RYMuCqoONmKwjC2-4kKvu0MyX_0kSjSwVQJsYf9a5BamJo_OmRfUvVJWjXgaWsHbEtBV_7iR4ulTCCQao_l1MMjN_t4YsG0eCtyB3bBF\">Subscribe to our Events &amp; Meetups list »</a></p>","url":"https://blog.fission.codes/weekly-dweb-video-calls/","canonical_url":null,"uuid":"8da9e8f8-20f2-43ae-bd37-af065305a892","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e73df8b73d281001e1ea40d","reading_time":null}},{"node":{"id":"Ghost__Post__5e274d05fbc2c9001eeb9759","title":"Everything you wanted to know about Elliptic Curve Cryptography","slug":"everything-you-wanted-to-know-about-elliptic-curve-cryptography","featured":true,"feature_image":"https://s3.fission.codes/2020/03/math.jpg","excerpt":"So you've heard of Elliptic Curve Cryptography. Maybe you know it's supposed to\nbe better than RSA. Maybe you know that all these cool new decentralized\nprotocols use it. Maybe you've seen the landslide of acronyms that go along with\nit: ECC, ECDSA, ECDH, EdDSA, Ed25519, etc. Maybe you've seen some cool looking\ngraphs but don't know how those translate to working cryptography. The articles\nyou find online either don't answer your questions, or launch in to a 30 minute\ndescription of birational e","custom_excerpt":null,"created_at_pretty":"21 January, 2020","published_at_pretty":"19 March, 2020","updated_at_pretty":"19 March, 2020","created_at":"2020-01-21T11:12:05.000-08:00","published_at":"2020-03-18T18:50:41.000-07:00","updated_at":"2020-03-19T09:16:18.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"cryptography","slug":"cryptography","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"cryptography","slug":"cryptography","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"elliptic","slug":"elliptic","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"ecc","slug":"ecc","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"keys","slug":"keys","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"DID","slug":"did","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"encryption","slug":"encryption","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Technology Highlight","slug":"technology-highlight","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"So you've heard of Elliptic Curve Cryptography. Maybe you know it's supposed to\nbe better than RSA. Maybe you know that all these cool new decentralized\nprotocols use it. Maybe you've seen the landslide of acronyms that go along with\nit: ECC, ECDSA, ECDH, EdDSA, Ed25519, etc. Maybe you've seen some cool looking\ngraphs but don't know how those translate to working cryptography. The articles\nyou find online either don't answer your questions, or launch in to a 30 minute\ndescription of birational equivalence.\n\nWe feel your pain. We wanted to create a resource that answers all those\nquestions you have, gives you a cheat sheet for those pesky acronyms, and takes\nyou from crypto-kindergartener to elliptic-expert in less than 10 minutes.\n\nEnough with the talk! I just need to figure out what all these funky acronyms\nmean!\n  \nRSA:  Rivest–Shamir–Adleman (the three inventors of RSA)\nOld school cryptography that uses prime-factorization\n\nECC:  Elliptic Curve Cryptography\nNew-fangled cryptography that uses elliptic curves. More secure & smaller keys\nthan RSA.\n\nECDH:  Elliptic Curve Diffie Hellman\nKey-sharing algorithm used for asymmetric encryption\n\nECDSA:  Elliptic Curve Digital Signing Algorithm\nDigital signing algorithm using elliptic curves (makes sense right?)\n\nEdwards Curve:  \nA special type of elliptic curve (most are Montgomery Curves). Faster for\ncertain operations.\n\nEdDSA:  Edwards Digital Signing Algorithm\nDigital signing algorithm using an Edwards curve. Runs in constant time.\n\nEd25519:  Edwards Curve 25519\nThe most commonly used Edwards Curve\n\nCurve25519:\nThe non-edwards companion to Ed25519\n\nsecp256k1:\nThe curve used by Bitcoin & Ethereum\n\nNIST Curves:\nCurves created and standardized by the National Institute of Standards and\nTechnology \n\nWhat is asymmetric cryptography?\n\nAsymmetric cryptography  (or \"public key cryptography\") is a cryptographic\nsystem that uses keypairs (a private key and a public key). The public key is\nshared widely, while the private key must be kept \ncompletely secret. \n\nThere are two main use cases for public key cryptography: asymmetric encryption\nand digital signatures.\n\nAsymmetric encryption  is a method by which Alice can send a message to Bob\nwithout leaking any information about her private key to Bob and nothing about\nthe key or the message to the outside world. \n\nDigital signatures  are a means of verifying that a message came from the holder\nof a certain private key and that the information has not been tampered with in\nflight.\n\nHow on earth does that work?\n\nAll public key cryptography relies on the existence of one-way functions:\nmathematical functions that are very easy to calculate in one direction but\nnearly impossible to \"undo\", or calculate in the other direction.\n\nRSA has been the predominant cryptosystem since its introduction in 1977. It\nrelies on prime factorization  of very large numbers.\n\nPrime factorization is the process of breaking a number down into the product of\nprime numbers. This is easy with small numbers: for instance, the prime factors\nof 70 are 2 * 5 * 7. Now do that with a 2048-bit integer, and it ends up being\npretty complicated.\n\nSweet good thing someone figured that out. Now we can all kick back and relax\nknowing all of our information is secure!\n\nWell, computers are a lot faster nowadays than in 1977. Unfortunately that means\nthat they're also getting faster at factoring large prime numbers. While a 256\nbit key might've cut it at one point, now that key can be broken in ⌚👀, 103\nseconds. \n\nComputers and prime numbers are now in an arms race, with the current key size\nrecommendation being 2048 bits. As keys get larger, operations obviously become\nslower. Meanwhile, the threat of quantum computing looms on the horizon. The now\ninfamous Shor's algorithm [https://en.wikipedia.org/wiki/Shor%27s_algorithm] \nthreatens to solve prime factorization in polynomial time. Which would render\nRSA as good as done.\n\nIs there no hope for privacy?!\n\nThere's a new one-way function on the block: Elliptic Curve Cryptography. Now\nwith 100% less prime factorization! \n\nWhat's an elliptic curve?\n\nElliptic curves are cool looking curves that look like this: \n\nAnd are graphed with equations that looks like this: \n\ny^2 = x^3 + ax + b\n\nExcept decimals are a bit unruly so we only take the integers, and then take a\nmodulus of the function (basically wrap the graph around the edges like an old\ngame of snake), so the graph actually ends up looking something like this (note\nthere's still a horizontal line of symmetry):\n\nAlright, but what do these have to do with cryptography?\nThe basic procedure of ECC is this:\n\n * Choose a curve and a point P  on the curve (everyone uses the same point)\n * Choose an arbitrary very large number N  (this is your private key).\n * Using point addition, add P  to itself N  times\n * The x-coordinate of N*P  is your public-key\n\nCan you ground this in reality a bit?\n\nSure! Let's draw an analogy to adjusting a clock. Here are the same steps listed\nout but with a clock instead of an elliptic curve:\n\n * Grab a clock sitting at exactly midnight and choose an arbitrary number of\n   seconds P\n * Choose a very large number N\n * Move the clock forward P  seconds N  times (pretend you have really fast\n   hands 😜)\n * Give the clock to a friend and tell them how big each step was (P) then see\n   if they can figure out how many times you moved it (N) to arrive at the\n   current location\n\nAnd how well does this whole thing work?\n\nIt turns out this is a much more robust one-way function than prime\nfactorization. In fact, we can achieve the same security as a 3072-bit RSA key\nwith a 256-bit ECC key. Not bad!\n\nWhat if someone guesses the same number N  that I chose?\n\nThere's a mind-blowingly large range of numbers to choose from. Each key is 256\nbits so you have 2^256 = 10^77  options. To give you a scale of how big this is,\nthere are: \n\n * ~10^18  grains of sand on earth\n * ~10^22  stars in the observable universe\n * ~10^78  atoms in the observable universe\n\nSo guessing someone's private key would be approximately equivalent to guessing\na random atom in the universe.\n\nDoesn't it take a long time to calculate my public key?\n\nNope, point addition is associative. Meaning:\nP + P + P + P = (P + P) + (P + P) = 2P + 2P\n\nSo when calculating a N*P  for a very large N, you only need to calculate P + 2P\n+ 4P + 8P...\n\nAt most, you must calculate 256 terms. Trivial for a computer. But to guess the\npublic key for a given private key, you would need to check every number in\nbetween (that big number we talked about earlier).\n\nHow do these keys translate into cryptographic functions?\n\nECDH  is a key sharing algorithm, most commonly used to send encrypted messages.\nECDH works by multiplying your private key by another's public key to get a\nshared secret, then using that shared secret to perform symmetric encryption.\n\nTo illustrate why this works:\n\n * Alice and Bob agree on a curve with starting point P\n * Alice has a private key a  and public key A = a * P\n * Bob has a private key b  and public key B = b * P\n * a * B = a * b * P = b * A\n * So a * b * P  ends up being the shared secret\n\nECDSA is a signature algorithm, used to prove authenticity of some information.\nThe algorithm is a bit trickier than ECDH. \nWarning: lots of equations, feel free to skip to the takeways below.\n\n * Alice and bob agree on a curve with starting point P\n * Alice has a private key a  and public key A = a * P\n * Alice chooses a random k  and point K = k * P\n * Alice takes r  which is just the x-value of K\n * Alice hashes her message to produce hash H\n * Alice calculates a value s = inv(k)*(H+ra)\n * Alice sends her message to Bob along with the signature (r, s)\n * Bob calculates H  from the message\n * Bob ensures that r = H*inv(s)*P + r*inv(s)*A\n * If it does, the signature is valid!\n\nIf you skipped those equations or they don't quite click, the key takeaways \nare:\n\n * Alice sends a random value r  and a calculated value s  that could only be\n   calculated with a combination of the private key, the message hash, and the\n   random value, but gives away no information about her private key.\n * Bob can verify r  and s  by using just the message hash and Alice's public\n   key\n * You need  a good source of randomness to use ECDSA. If you're randomness\n   function is broken, repeated signatures can disclose your private key\n\nReal quick, you mentioned symmetric encryption. How does that work?\nSymmetric encryption uses just one key to encrypt and decrypt a message.\nEncrypted messages just look like random jumbles of letters and numbers that\ngive no information about the underlying message unless you have the key to\n\"unjumble\" it. Most algorithms use a block cipher. This involves choosing a\nblock size (say 64 bits), and encrypting the message in blocks of that size.\n\nWe mentioned symmetric encryption when talking about ECDH. When people say\n\"asymmetrically encrypted\", they actually mean \"symmetrically encrypted with a\nsecret that is shared asymmetrically\".\n\nA few examples of algorithms are AES\n[https://en.wikipedia.org/wiki/Advanced_Encryption_Standard], Salsa20\n[https://en.wikipedia.org/wiki/Salsa20], or Triplesec\n[https://keybase.io/triplesec]  (which is actually just a combo of the first two\nfor extra security).\n\nOkay, I generally understand how this works, but how do people decide on a curve\nand a point P?\n\nA bunch of different ways, sometimes they're chosen for a specific reason,\nsometimes they're algorithmically determined. Different curves have different\nproperties. Checkout Safe Curves [https://safecurves.cr.yp.to/]  for an analysis\nof different curves.\n\nCan \"faulty\" curves give backdoors?\n\nYes! Faulty curves can give shortcuts to determining a private key from a given\npublic key. \n\nMany suspect that NIST curves have NSA backdoors in them.  This is because a\npublished NIST randomization algorithm (that the NSA tightly collaborated on)\nwas found to have a backdoor.\n[https://www.ams.org/notices/201402/rnoti-p190.pdf]  We encourage you not to use\nany curves published by the NIST!\n\nWhat's this \"Edwards Curve\" I keep hearing about?\n\nMost Elliptic curves are Montgomery Curves\n[https://en.wikipedia.org/wiki/Montgomery_curve]. Edwards Curves were described\nby mathematician Harold Edwards and popularized by cryptographer Daniel\nBernstein. They have a different structure that allows for a faster signature\nalgorithm. This signature algorithm, when performed on an Edwards curve, is\ncalled EdDSA. This algorithm runs in constant time, meaning it's faster and\nleaks less information\n\nCan Edwards Curves do key sharing?\n\nEdwards curves are specifically used for signatures. There is not a related\nDiffie-Hellman key sharing algorithm.\n\nSo if I want to use both ECDH & EdDSA, I need two key pairs?\n\nNot exactly. Let's take the most common Edwards curve Ed25519. This curve is\nrelated to Montgomery curve Curve25519. In fact Ed25519 is a twist\n[https://en.wikipedia.org/wiki/Twists_of_curves]  of Curve25519. A \"twist\"\nbasically means that the curves are mappable to one another. What this means is\nthat you can use the same private key to generate a public key on both curves\nand then transform those public keys between one another without any knowledge\nof the private key. Specifically, with these equations.\n\n(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)\n(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))\n\n\nwhere (u, v)  is the Curve25519 point and (x, y)  is the Ed25519 point\n\nYou can read a more in-depth post about that Here\n[https://blog.filippo.io/using-ed25519-keys-for-encryption/].\n\nWhat cryptography algorithms do protocols like Bitcoin, Ethereum, and IPFS use?\n\nBitcoin uses secp256k1  for completely arbitrary reasons\n[https://bitcointalk.org/index.php?topic=2699.msg37328#msg37328]\nEtherem uses secp256k1  for interop with Bitcoin\n[https://forum.ethereum.org/discussion/comment/53/#Comment_53]\nIPFS uses Ed25519  and RSA.\n\nOkay so what do you recommend?\nWe're using Ed25519 & Curve25519. We chose these because:\n\n * They are well-recognized as safe curves [https://safecurves.cr.yp.to/]\n * They are one of the more commonly used curves, so we have easier interop\n * They allow us to use EdDSA for signatures\n * We're fairly certain that they don't have any backdoors in them\n\nThis is sweet! Why doesn't everyone have a private key??\n\nWe ask ourselves the same question everyday. The main reason is: it's a pain.\nKeys look scary (6A576D5A7134743777217A25432A462D4A614...). And if you lose a\nkey, you're forever screwed. There's no \"recovery by email\" available. \n\nWhat are people doing about this?\n\nWe need to fix the UX of public keys. Remove the scary hexadecimal strings and\nprovide more painless recovery.\n\nA few options are\n\n * Replication: Share the same key across multiple devices. If you drop your\n   phone in a lake, you can recover your key with your laptop\n * Shamir Secret Sharing: This involves splitting a key up into separate\n   \"shares\". Each share reveals nothing about the key, but by combining the\n   shares back together, you can recover the private key. This leads to\n   interesting solutions like social recovery\n   [https://www.coindesk.com/pay-your-friends-to-protect-your-keys-one-startups-new-take-on-crypto-custody] \n    or zero-knowledge key recovery\n   [https://medium.com/@amanladia1/zerowallet-a-zkp-based-wallet-authentication-mechanism-9871dcca0a01] \n    which we implemented as a Proof of Concept\n   [https://github.com/fission-suite/zerowallet-poc].\n * Secure Hardware Enclaves: Many phones and computers that are coming out these\n   days have Secure Hardware Enclaves. These use both hardware and software to\n   provide very  strong security gurantees\n * Hardware Secure Modules (HSMs): These are similar to Secure Hardware\n   Enclaves, but larger and hold more information. Physical modules exist, and\n   you can also rent space from cloud providers such as AWS. Less\n   security-minded users might be interested in backing up their keys with a\n   \"trusted custodian\" (this still ends up being quite a bit safer than the\n   internet's current security model).\n\nHow are you using private keys?\n\nHere at Fission, we wanted to get private keys into the hands of our users as\nquickly as possible. We just rolled out our new authentication scheme which uses\nprivate keys to power our command line tool: Fission Live\n[https://github.com/fission-suite/cli]. Give it a go and let us know what you\nthink! We have other big projects coming down the pipeline soon that will use\nthis public key infrastructure to power some really neat features: a global\nencrypted filesystem, cryptographically verifiable claims, and more!","html":"<p>So you've heard of Elliptic Curve Cryptography. Maybe you know it's supposed to be better than RSA. Maybe you know that all these cool new decentralized protocols use it. Maybe you've seen the landslide of acronyms that go along with it: ECC, ECDSA, ECDH, EdDSA, Ed25519, etc. Maybe you've seen some cool looking graphs but don't know how those translate to working cryptography. The articles you find online either don't answer your questions, or launch in to a 30 minute description of <em>birational equivalence</em>.<br><br>We feel your pain. We wanted to create a resource that answers all those questions you have, gives you a cheat sheet for those pesky acronyms, and takes you from crypto-kindergartener to elliptic-expert in less than 10 minutes.</p><h3 id=\"enough-with-the-talk-i-just-need-to-figure-out-what-all-these-funky-acronyms-mean-\">Enough with the talk! I just need to figure out what all these funky acronyms mean!</h3><p> <br><strong>RSA:</strong> Rivest–Shamir–Adleman (the three inventors of RSA)<br>Old school cryptography that uses prime-factorization<br><br><strong>ECC:</strong> Elliptic Curve Cryptography<br>New-fangled cryptography that uses elliptic curves. More secure &amp; smaller keys than RSA.<br><br><strong>ECDH:</strong> Elliptic Curve Diffie Hellman<br>Key-sharing algorithm used for asymmetric encryption<br><br><strong>ECDSA:</strong> Elliptic Curve Digital Signing Algorithm<br>Digital signing algorithm using elliptic curves (makes sense right?)<br><br><strong>Edwards Curve:</strong> <br>A special type of elliptic curve (most are Montgomery Curves). Faster for certain operations.<br><br><strong>EdDSA:</strong> Edwards Digital Signing Algorithm<br>Digital signing algorithm using an Edwards curve. Runs in constant time.<br><br><strong>Ed25519:</strong> Edwards Curve 25519<br>The most commonly used Edwards Curve<br><br><strong>Curve25519:</strong><br>The non-edwards companion to Ed25519<br><br><strong>secp256k1:</strong><br>The curve used by Bitcoin &amp; Ethereum<br><br><strong>NIST Curves:</strong><br>Curves created and standardized by the National Institute of Standards and Technology </p><h3 id=\"what-is-asymmetric-cryptography\">What is asymmetric cryptography?<br></h3><p><strong>Asymmetric cryptography</strong> (or \"public key cryptography\") is a cryptographic system that uses keypairs (a private key and a public key). The public key is shared widely, while the private key must be kept <br>completely secret. <br><br>There are two main use cases for public key cryptography: asymmetric encryption and digital signatures.<br><br><strong>Asymmetric encryption</strong> is a method by which Alice can send a message to Bob without leaking any information about her private key to Bob and nothing about the key or the message to the outside world. <br><br><strong>Digital signatures</strong> are a means of verifying that a message came from the holder of a certain private key and that the information has not been tampered with in flight.</p><h3 id=\"how-on-earth-does-that-work\">How on earth does that work?<br></h3><p>All public key cryptography relies on the existence of <strong>one-way functions</strong>: mathematical functions that are very easy to calculate in one direction but nearly impossible to \"undo\", or calculate in the other direction.<br><br>RSA has been the predominant cryptosystem since its introduction in 1977. It relies on <strong>prime factorization</strong> of very large numbers.<br><br>Prime factorization is the process of breaking a number down into the product of prime numbers. This is easy with small numbers: for instance, the prime factors of 70 are 2 * 5 * 7. Now do that with a 2048-bit integer, and it ends up being pretty complicated.</p><h3 id=\"sweet-good-thing-someone-figured-that-out-now-we-can-all-kick-back-and-relax-knowing-all-of-our-information-is-secure-\">Sweet good thing someone figured that out. Now we can all kick back and relax knowing all of our information is secure!<br></h3><p>Well, computers are a lot faster nowadays than in 1977. Unfortunately that means that they're also getting faster at factoring large prime numbers. While a 256 bit key might've cut it at one point, now that key can be broken in ⌚👀, 103 seconds. <br><br>Computers and prime numbers are now in an arms race, with the current key size recommendation being 2048 bits. As keys get larger, operations obviously become slower. Meanwhile, the threat of quantum computing looms on the horizon. The now infamous <a href=\"https://en.wikipedia.org/wiki/Shor%27s_algorithm\">Shor's algorithm</a> threatens to solve prime factorization in polynomial time. Which would render RSA as good as done.</p><h3 id=\"is-there-no-hope-for-privacy-\">Is there no hope for privacy?!<br></h3><p>There's a new one-way function on the block: <strong>Elliptic Curve Cryptography</strong>. Now with 100% less prime factorization! </p><h3 id=\"what-s-an-elliptic-curve\">What's an elliptic curve?<br></h3><p>Elliptic curves are cool looking curves that look like this: </p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2020/01/ecc.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>And are graphed with equations that looks like this: </p><!--kg-card-begin: markdown--><p><code>y^2 = x^3 + ax + b</code></p>\n<!--kg-card-end: markdown--><p>Except decimals are a bit unruly so we only take the integers, and then take a modulus of the function (basically wrap the graph around the edges like an old game of snake), so the graph actually ends up looking something like this (note there's still a horizontal line of symmetry):</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2020/01/sageplot_06.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><h3 id=\"alright-but-what-do-these-have-to-do-with-cryptography\">Alright, but what do these have to do with cryptography?</h3><!--kg-card-begin: markdown--><p>The basic procedure of ECC is this:</p>\n<ul>\n<li>Choose a curve and a point <code>P</code> on the curve (everyone uses the same point)</li>\n<li>Choose an arbitrary very large number <code>N</code> (this is your private key).</li>\n<li>Using point addition, add <code>P</code> to itself <code>N</code> times</li>\n<li>The x-coordinate of <code>N*P</code> is your public-key</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"can-you-ground-this-in-reality-a-bit\">Can you ground this in reality a bit?<br></h3><p>Sure! Let's draw an analogy to adjusting a clock. Here are the same steps listed out but with a clock instead of an elliptic curve:</p><!--kg-card-begin: markdown--><ul>\n<li>Grab a clock sitting at exactly midnight and choose an arbitrary number of seconds <code>P</code></li>\n<li>Choose a very large number <code>N</code></li>\n<li>Move the clock forward <code>P</code> seconds <code>N</code> times (pretend you have really fast hands 😜)</li>\n<li>Give the clock to a friend and tell them how big each step was (<code>P</code>) then see if they can figure out how many times you moved it (<code>N</code>) to arrive at the current location</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"and-how-well-does-this-whole-thing-work\">And how well does this whole thing work?<br></h3><p>It turns out this is a much more robust one-way function than prime factorization. In fact, we can achieve the same security as a 3072-bit RSA key with a 256-bit ECC key. Not bad!</p><h3 id=\"what-if-someone-guesses-the-same-number-n-that-i-chose\">What if someone guesses the same number <em>N</em> that I chose?<br></h3><p>There's a mind-blowingly large range of numbers to choose from. Each key is 256 bits so you have <code>2^256 = 10^77</code> options. To give you a scale of how big this is, there are: </p><!--kg-card-begin: markdown--><ul>\n<li><code>~10^18</code> grains of sand on earth</li>\n<li><code>~10^22</code> stars in the observable universe</li>\n<li><code>~10^78</code> atoms in the observable universe</li>\n</ul>\n<!--kg-card-end: markdown--><p>So guessing someone's private key would be approximately equivalent to guessing a random atom in the <em>universe.</em></p><h3 id=\"doesn-t-it-take-a-long-time-to-calculate-my-public-key\">Doesn't it take a long time to calculate my public key?<br></h3><p>Nope, point addition is associative. Meaning:<br><code>P + P + P + P = (P + P) + (P + P) = 2P + 2P</code><br><br>So when calculating a <code>N*P</code> for a very large <code>N</code>, you only need to calculate <code>P + 2P + 4P + 8P...</code>  <br><br>At most, you must calculate 256 terms. Trivial for a computer. But to guess the public key for a given private key, you would need to check every number in between (that big number we talked about earlier).</p><h3 id=\"how-do-these-keys-translate-into-cryptographic-functions\">How do these keys translate into cryptographic functions?<br></h3><p><strong>ECDH</strong> is a key sharing algorithm, most commonly used to send encrypted messages. ECDH works by multiplying your private key by another's public key to get a shared secret, then using that shared secret to perform symmetric encryption.</p><!--kg-card-begin: markdown--><p>To illustrate why this works:</p>\n<ul>\n<li>Alice and Bob agree on a curve with starting point <code>P</code></li>\n<li>Alice has a private key <code>a</code> and public key <code>A = a * P</code></li>\n<li>Bob has a private key <code>b</code> and public key <code>B = b * P</code></li>\n<li><code>a * B = a * b * P = b * A</code></li>\n<li>So <code>a * b * P</code> ends up being the shared secret</li>\n</ul>\n<!--kg-card-end: markdown--><p><strong>ECDSA </strong>is a signature algorithm, used to prove authenticity of some information. The algorithm is a bit trickier than ECDH. <br><em>Warning: lots of equations, feel free to skip to the takeways below.</em></p><!--kg-card-begin: markdown--><ul>\n<li>Alice and bob agree on a curve with starting point <code>P</code></li>\n<li>Alice has a private key <code>a</code> and public key <code>A = a * P</code></li>\n<li>Alice chooses a random <code>k</code> and point <code>K = k * P</code></li>\n<li>Alice takes <code>r</code> which is just the x-value of <code>K</code></li>\n<li>Alice hashes her message to produce hash <code>H</code></li>\n<li>Alice calculates a value <code>s = inv(k)*(H+ra)</code></li>\n<li>Alice sends her message to Bob along with the signature <code>(r, s)</code></li>\n<li>Bob calculates <code>H</code> from the message</li>\n<li>Bob ensures that <code>r = H*inv(s)*P + r*inv(s)*A</code></li>\n<li>If it does, the signature is valid!</li>\n</ul>\n<p>If you skipped those equations or they don't quite click, the key <strong>takeaways</strong> are:</p>\n<ul>\n<li>Alice sends a random value <code>r</code> and a calculated value <code>s</code> that could only be calculated with a combination of the private key, the message hash, and the random value, but gives away no information about her private key.</li>\n<li>Bob can verify <code>r</code> and <code>s</code> by using just the message hash and Alice's public key</li>\n<li>You <em>need</em> a good source of randomness to use ECDSA. If you're randomness function is broken, repeated signatures can disclose your private key</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"real-quick-you-mentioned-symmetric-encryption-how-does-that-work\">Real quick, you mentioned symmetric encryption. How does that work?</h3><p>Symmetric encryption uses just one key to encrypt and decrypt a message. Encrypted messages just look like random jumbles of letters and numbers that give no information about the underlying message unless you have the key to \"unjumble\" it. Most algorithms use a <strong>block cipher. </strong>This involves choosing a block size (say 64 bits), and encrypting the message in blocks of that size.</p><p>We mentioned symmetric encryption when talking about ECDH. When people say \"asymmetrically encrypted\", they actually mean \"symmetrically encrypted with a secret that is shared asymmetrically\".</p><p>A few examples of algorithms are <a href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">AES</a>, <a href=\"https://en.wikipedia.org/wiki/Salsa20\">Salsa20</a>, or <a href=\"https://keybase.io/triplesec\">Triplesec</a> (which is actually just a combo of the first two for <em>extra security</em>).</p><h3 id=\"okay-i-generally-understand-how-this-works-but-how-do-people-decide-on-a-curve-and-a-point-p\">Okay, I generally understand how this works, but how do people decide on a curve and a point P?<br></h3><p>A bunch of different ways, sometimes they're chosen for a specific reason, sometimes they're algorithmically determined. Different curves have different properties. Checkout <a href=\"https://safecurves.cr.yp.to/\">Safe Curves</a> for an analysis of different curves.</p><h3 id=\"can-faulty-curves-give-backdoors\">Can \"faulty\" curves give backdoors?<br></h3><p>Yes! Faulty curves can give shortcuts to determining a private key from a given public key. <br><br><em>Many suspect that NIST curves have NSA backdoors in them.</em> <a href=\"https://www.ams.org/notices/201402/rnoti-p190.pdf\">This is because a published NIST randomization algorithm (that the NSA tightly collaborated on) was found to have a backdoor.</a> We encourage you not to use any curves published by the NIST!</p><h3 id=\"what-s-this-edwards-curve-i-keep-hearing-about\">What's this \"Edwards Curve\" I keep hearing about?<br></h3><p>Most Elliptic curves are <a href=\"https://en.wikipedia.org/wiki/Montgomery_curve\"><strong>Montgomery Curves</strong></a>. Edwards Curves were described by mathematician Harold Edwards and popularized by cryptographer Daniel Bernstein. They have a different structure that allows for a faster signature algorithm. This signature algorithm, when performed on an Edwards curve, is called <strong>EdDSA</strong>. This algorithm runs in constant time, meaning it's faster and leaks less information</p><h3 id=\"can-edwards-curves-do-key-sharing\">Can Edwards Curves do key sharing?<br></h3><p>Edwards curves are specifically used for signatures. There is not a related Diffie-Hellman key sharing algorithm.</p><h3 id=\"so-if-i-want-to-use-both-ecdh-eddsa-i-need-two-key-pairs\">So if I want to use both ECDH &amp; EdDSA, I need two key pairs?<br></h3><p>Not exactly. Let's take the most common Edwards curve <strong>Ed25519</strong>. This curve is related to Montgomery curve <strong>Curve25519</strong>. In fact Ed25519 is a <strong><a href=\"https://en.wikipedia.org/wiki/Twists_of_curves\">twist</a></strong> of Curve25519. A \"twist\" basically means that the curves are mappable to one another. What this means is that you can use the same private key to generate a public key on both curves and then transform those public keys between one another without any knowledge of the private key. Specifically, with these equations.</p><!--kg-card-begin: markdown--><pre><code>(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)\n(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))\n</code></pre>\n<p>where <code>(u, v)</code> is the Curve25519 point and <code>(x, y)</code> is the Ed25519 point</p>\n<!--kg-card-end: markdown--><p>You can read a more in-depth post about that <a href=\"https://blog.filippo.io/using-ed25519-keys-for-encryption/\">Here</a>.</p><h3 id=\"what-cryptography-algorithms-do-protocols-like-bitcoin-ethereum-and-ipfs-use\">What cryptography algorithms do protocols like Bitcoin, Ethereum, and IPFS use?<br></h3><p>Bitcoin uses <strong>secp256k1</strong> for <a href=\"https://bitcointalk.org/index.php?topic=2699.msg37328#msg37328\">completely arbitrary reasons</a><br>Etherem uses <strong>secp256k1</strong> for <a href=\"https://forum.ethereum.org/discussion/comment/53/#Comment_53\">interop with Bitcoin</a><br>IPFS uses <strong>Ed25519</strong> and <strong>RSA</strong>.</p><h3 id=\"okay-so-what-do-you-recommend\">Okay so what do you recommend?</h3><!--kg-card-begin: markdown--><p>We're using Ed25519 &amp; Curve25519. We chose these because:</p>\n<ul>\n<li>They are well-recognized as <a href=\"https://safecurves.cr.yp.to/\">safe curves</a></li>\n<li>They are one of the more commonly used curves, so we have easier interop</li>\n<li>They allow us to use EdDSA for signatures</li>\n<li>We're fairly certain that they don't have any backdoors in them</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"this-is-sweet-why-doesn-t-everyone-have-a-private-key\">This is sweet! Why doesn't everyone have a private key??<br></h3><p>We ask ourselves the same question everyday. The main reason is: it's a pain. Keys look scary (<code>6A576D5A7134743777217A25432A462D4A614...</code>). And if you lose a key, you're forever screwed. There's no \"recovery by email\" available. </p><h3 id=\"what-are-people-doing-about-this\">What are people doing about this?<br></h3><!--kg-card-begin: markdown--><p>We need to fix the UX of public keys. Remove the scary hexadecimal strings and provide more painless recovery.</p>\n<p>A few options are</p>\n<ul>\n<li>Replication: Share the same key across multiple devices. If you drop your phone in a lake, you can recover your key with your laptop</li>\n<li>Shamir Secret Sharing: This involves splitting a key up into separate &quot;shares&quot;. Each share reveals nothing about the key, but by combining the shares back together, you can recover the private key. This leads to interesting solutions like <a href=\"https://www.coindesk.com/pay-your-friends-to-protect-your-keys-one-startups-new-take-on-crypto-custody\">social recovery</a> or <a href=\"https://medium.com/@amanladia1/zerowallet-a-zkp-based-wallet-authentication-mechanism-9871dcca0a01\">zero-knowledge key recovery</a> which we implemented as a <a href=\"https://github.com/fission-suite/zerowallet-poc\">Proof of Concept</a>.</li>\n<li>Secure Hardware Enclaves: Many phones and computers that are coming out these days have Secure Hardware Enclaves. These use both hardware and software to provide <em>very</em> strong security gurantees</li>\n<li>Hardware Secure Modules (HSMs): These are similar to Secure Hardware Enclaves, but larger and hold more information. Physical modules exist, and you can also rent space from cloud providers such as AWS. Less security-minded users might be interested in backing up their keys with a &quot;trusted custodian&quot; (this still ends up being quite a bit safer than the internet's current security model).</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"how-are-you-using-private-keys\">How are you using private keys?<br></h3><p>Here at Fission, we wanted to get private keys into the hands of our users as quickly as possible. We just rolled out our new authentication scheme which uses private keys to power our command line tool: <a href=\"https://github.com/fission-suite/cli\">Fission Live</a>. Give it a go and let us know what you think! We have other big projects coming down the pipeline soon that will use this public key infrastructure to power some really neat features: a global encrypted filesystem, cryptographically verifiable claims, and more!</p>","url":"https://blog.fission.codes/everything-you-wanted-to-know-about-elliptic-curve-cryptography/","canonical_url":null,"uuid":"c045a827-06e6-4b75-895e-782a8b2ddfce","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e274d05fbc2c9001eeb9759","reading_time":null}},{"node":{"id":"Ghost__Post__5dfc1defaa0f04001e9572d6","title":"IPFS on Hackage","slug":"ipfs-on-hackage","featured":false,"feature_image":"https://s3.fission.codes/2019/12/ipfs-haskell-long.png","excerpt":"This library offers a high level API for interacting with IPFS nodes. Most of the functionality was refactored out of our Web API, which provides a convenient HTTP interface for accessing the IPFS network.","custom_excerpt":"This library offers a high level API for interacting with IPFS nodes. Most of the functionality was refactored out of our Web API, which provides a convenient HTTP interface for accessing the IPFS network.","created_at_pretty":"20 December, 2019","published_at_pretty":"20 December, 2019","updated_at_pretty":"20 December, 2019","created_at":"2019-12-19T17:03:43.000-08:00","published_at":"2019-12-20T13:27:05.000-08:00","updated_at":"2019-12-20T14:29:19.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"Haskell","slug":"haskell","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Package","slug":"package","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We just published version 1.0.0  of our IPFS package on Hackage\n[https://hackage.haskell.org/package/ipfs-1.0.0]  🎉\n\nThis library offers a high level API for interacting with IPFS nodes. Most of\nthe functionality was refactored out of our Web API\n[https://github.com/fission-suite/web-api\\], which provides a convenient HTTP\ninterface for accessing the IPFS network.\n\nThe library can communicate with IPFS nodes in two different ways:\n\n * Locally: This is done by shelling out to an IPFS daemon that is running on\n   the same machine. This would be the equivalent of running an IPFS command in\n   your terminal.\n * Remotely: This is done by communicating with a node's HTTP interface. This\n   could either be a node running on the same machine or on another machine.\n\nThe package doesn't currently implement all the IPFS commands, but the base\nfunctionality is present: add, get, pin, and dag put  (for building IPLD\nstructures). The existing code provides helpful building blocks for adding\nadditional functionality.\n\nCheck out the code on GitHub [https://github.com/fission-suite/ipfs-haskell].\nLet us know what features would be helpful for you and any issues that you might\nrun into along the way!\n\nWhen you're ready to start building, head over to Hackage\n[https://hackage.haskell.org/package/ipfs]  and grab the library.","html":"<p>We just published version <code>1.0.0</code> of our IPFS package on <a href=\"https://hackage.haskell.org/package/ipfs-1.0.0\">Hackage</a> 🎉</p><p>This library offers a high level API for interacting with IPFS nodes. Most of the functionality was refactored out of our <a href=\"https://github.com/fission-suite/web-api\\\">Web API</a>, which provides a convenient HTTP interface for accessing the IPFS network.</p><!--kg-card-begin: markdown--><p>The library can communicate with IPFS nodes in two different ways:</p>\n<ul>\n<li>Locally: This is done by shelling out to an IPFS daemon that is running on the same machine. This would be the equivalent of running an IPFS command in your terminal.</li>\n<li>Remotely: This is done by communicating with a node's HTTP interface. This could either be a node running on the same machine or on another machine.</li>\n</ul>\n<!--kg-card-end: markdown--><p>The package doesn't currently implement all the IPFS commands, but the base functionality is present: <code>add</code>, <code>get</code>, <code>pin</code>, and <code>dag put</code> (for building IPLD structures). The existing code provides helpful building blocks for adding additional functionality.</p><p>Check out <a href=\"https://github.com/fission-suite/ipfs-haskell\">the code on GitHub</a>. Let us know what features would be helpful for you and any issues that you might run into along the way!</p><p>When you're ready to start building, head over to <a href=\"https://hackage.haskell.org/package/ipfs\">Hackage</a> and grab the library. </p>","url":"https://blog.fission.codes/ipfs-on-hackage/","canonical_url":null,"uuid":"ac6688b6-d67c-4a15-b12e-96445f6e03ff","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dfc1defaa0f04001e9572d6","reading_time":null}},{"node":{"id":"Ghost__Post__5d76bcdec6f24b001eb931e9","title":"First release of IPFS Portable User Settings App","slug":"ipfs-user-settings-app","featured":false,"feature_image":"https://s3.fission.codes/2019/09/josh-clemence-vORp9xB52pQ-unsplash.jpg","excerpt":"New Fission team member Daniel shares the IPFS Portable User Settings app he built, as well as the related IPFS tech that we built to support it.","custom_excerpt":"New Fission team member Daniel shares the IPFS Portable User Settings app he built, as well as the related IPFS tech that we built to support it.","created_at_pretty":"09 September, 2019","published_at_pretty":"10 September, 2019","updated_at_pretty":"28 September, 2019","created_at":"2019-09-09T13:58:06.000-07:00","published_at":"2019-09-10T10:18:17.000-07:00","updated_at":"2019-09-27T18:15:09.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"Web3","slug":"web3","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"app","slug":"app-tag","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"My name is Daniel, and I'm the newest member of the Fission team. I'm based near\nSpringfield, Missouri, smack dab in the center of the Ozarks (recently made\nfamous by the Netflix show [https://www.imdb.com/title/tt5071412/], which is\nkinda like my life but with money laundering instead of unit tests). When I'm\nnot working on building tools for the decentralized web, you can catch me\nreading cool books (currently reading\n[https://www.amazon.com/Ubik-Philip-K-Dick-ebook/dp/B005LVR6ZA]), listening to\nmusic (currently listening\n[https://open.spotify.com/album/5jgnoe0auRKrLvvj4qO5VX?si=aA_8ILIYQVKwdVaRjvAexg]\n), or rock climbing (my weekend plans\n[https://www.mountainproject.com/area/105903004/horseshoe-canyon-ranch]). \n\nHere at Fission, we've been hard at working cooking up cool new experiments with\nIPFS. IPFS's content-based addressing which gives us a flat, universal namespace\nto store files and other data prompts us to think differently about how we build\nand deploy software. This leads us to build prototypes and experiments, which\nhelp us:\n\n• Ideate projects that either we or another team can expand upon\n• Test and calibrate the tools we build for real world hands-on usage\n• Prompt the creation of new libraries/technologies\n\nOur most recent application came from a simple question that we asked: if my\npreferences are generally the same across apps, why do I need to fill out that\nsame information in every app?\n\nIntroducing IPFS Portable User Settings\n[https://github.com/fission-suite/ipfs-user-settings/]  — a completely client\nside application that allows you to update your preferences over IPFS and take\nthem with you wherever you go.\n\nPlay around with the live demo\n[https://fission-suite.github.io/ipfs-user-settings/]\nBackground\nWhile the emerging decentralized web and the web of yesteryear differ in many\nways, one way to think about it is as a difference in user model. The web2.0\nuser data model is company (or platform)-centric. This involves locking your\ndata in monolithic company-owned databases, with the end result being that your\nidentity is fragmented and duplicated across a variety of corporate silos. Web3\nbrings with it a new way of conceptualizing data: a user-centric data model. In\nthis model, a user owns their data and that data can only be read/edited by them\nand trusted people and apps. Apps take on a different function: they exist as\n\"windows\" that a user grants permissions to view or make edits to certain\nattributes of their data.\n\nOften, the benefits of web3 technology are put in reactionary terms. That is,\nit's reacting to the overreaches/missteps of the current corporate stewards of\nthe internet: censorship, sloppy or malicious use of user data, temporality\n(will I be able to see my photos on Facebook in 25 years? my archived emails on\nGmail?), and so on. \n\nOne thing that we aim to do at Fission is not only address the failings of web2,\nbut also create positive reasons to make the jump to web3.\n\nDecentralized apps should be fun and easy for developers to create, and exciting\nfor users to adopt because they offer features not possible in the old web. This\nwas our motivation when developing our Portable User Settings. We wanted to give\nthe intuition behind some of what's possible with web3 and a technical demo that\na more robust version could be based on.\n\nWe also wanted to make this app completely p2p. No HTTP gateways required here!\nIf your browser is IPFS-enabled and you're running a local daemon, the app\nconnects to that daemon. If not, it gracefully sets up an in-browser instance of\n js-ipfs [https://github.com/ipfs/js-ipfs].\n\nThere are lots of directions this could go. Maybe we want to enable universal\ndark mode so that all the websites you browse respect your global dark mode\nsetting? Leave a comment on what portable user setting you'd like to see in the\nworld.\n\nTechnical Results\nThis project yielded not only a pretty neat demo, but also some useful technical\noffshoots:\n\nget-ipfs [https://github.com/fission-suite/get-ipfs]\nOne of the biggest issues that developers can face when trying to make use of\nthe decentralized web is the high barrier to entry. We wrapped our IPFS fallback\nfunctionality into it's own package: get-ipfs\n[https://github.com/fission-suite/get-ipfs]. This is your new one-stop shop for\nloading an IPFS instance into a webpage. It's as simple as const ipfs = await\ngetIpfs()  and you can make direct P2P use of the decentralized web in your\nwebapp. Give it a go and let us know how it works for you!\n\nFission JavaScript Client\nThis app was also our first time using the Fission JavaScript client\n[https://github.com/fission-suite/typescript-client]  in the wild. While\nadding/getting is done P2P, requests to pin must be sent over HTTP. The library,\nhowever, has all the functionality you need to make IPFS-enabled apps over HTTP.\nCheck out the library [https://github.com/fission-suite/typescript-client]  and\nsee what cool uses you can come up with!\n\nHosted IPFS Node\nWhile we were already hosting an IPFS node, our hosted node is now much more\nrobust. It's capable of handling secure websocket connects (so it can talk to\nin-browser js-ipfs  nodes!) and stores data in S3. Check out the walkthrough we\nposted for setting up your own IPFS node on AWS\n[https://talk.fission.codes/t/a-loosely-written-guide-to-hosting-an-ipfs-node-on-aws/234]\n!\n\nAgain, checkout the demo here\n[https://fission-suite.github.io/ipfs-user-settings/], or keep reading to find\nout how to build and host your own!\n\nRun/Deploy your own app\nFork the repo\nNote: This is only necessary if you are planning on deploying your own user\nsettings app. If you just want to play around locally, you can simply clone the\nrepository.\n\nClick \"Fork\" in the upper-right corner of the repository.\n\nClone the repo locally\nIn your terminal, clone the ipfs-user-settings  repo:\n\ngit clone https://github.com/$YOUR_USERNAME/ipfs-user-settings.git\ncd ipfs-user-settings\n\nSetup environment\nThe environment variables are optional, but will need to be setup for the best\nuser experience.\n\nFirst, create a .env  file in the root of the repository:\ntouch .env\n\nYour .env  will end up looking something like this:\n\nREACT_APP_DEFAULT_CID = QmUWWqCNSdZmus7mc52um5cpqUi1CaE97AzBTY7iWfBXV9\nREACT_APP_BOOTSTRAP_NODE = /dns4/ipfs.runfission.com/tcp/4003/wss/ipfs/QmVLEz2SxoNiFnuyLpbXsH6SvjPTrHNMU88vCQZyhgBzgw\nREACT_APP_INTERPLANETARY_FISSION_URL = https://runfission.com\nREACT_APP_INTERPLANETARY_FISSION_USERNAME = ADD_USERNAME_HERE\nREACT_APP_INTERPLANETARY_FISSION_PASSWORD = ADD_PASSWORD_HERE\n\n\nLet's walk through what each of those variables will do.\n\nREACT_APP_DEFAULT_CID: the cid that contains the default settings that you want\na new user to see. You can set it to the above value for our recommended\ndefaults (or leave it blank and it will default to that).\n\n**Edited this section to reflect recent changes**\nREACT_APP_BOOTSTRAP_NODE_TCP: the multiaddr of the ipfs node that you would like\nthe user's node to connect to through tcp (for instance with a local daemon\nthrough ipfs companion [https://github.com/ipfs-shipyard/ipfs-companion]). You\ncan set it to the above value to connect to the IPFS node that Fission hosts (or\nleave it blank and it will default to that).\nREACT_APP_BOOTSTRAP_NODE_WSS: the multiaddr of the ipfs node that you would like\nthe user's node to connect to through wss (if the user does not have an\nipfs-enabled browser and falls back to an in-browser js-ipfs daemon). You can\nset it to the above value to connect  to the IPFS node that Fission hosts (or\nleave it blank and it will  default to that). \nNote:  if you use a custom node, it must be interoperable with js-ipfs. This\nmeans that it either needs to connect via WebRTC or Secured Websockets (notice\nthe wss  in the above multiaddr).\n\nREACT_APP_INTERPLANETARY_FISSION_...: the last three variables are your\nprovisioned account information for using the Fission web-api. These are used\nfor pinning content to the Fission IPFS node so that content will stay online\neven after a user goes offline. If you leave them blank, the webapp will not pin\nuser content. At the moment, these can be obtained by joining the Fission\nHeroku\nadd-on alpha [https://elements.heroku.com/addons/interplanetary-fission]. If\nyou've tried out our earlier photo gallery demo\n[https://github.com/fission-suite/ipfs-photo-gallery], you can use the same\ncredentials here, otherwise follow that tutorial\n[https://talk.fission.codes/t/ipfs-photo-gallery-in-alpha-mode/197/10]  to\nprovision a username and password\n\nRun the app locally\nFirst install dependencies:\nnpm install\n\nThen run the app:\nnpm run start\n\nThis will open up a page in your browser at http://localhost:3000!\n\nPlay around a bit! Try changing your settings, saving it, and loading past CIDs.\n\nBuild app\nIn order for your app to build with the correct internal links, you'll need to\nchange the homepage:\nOpen package.json  and change the homepage  to the url where this site will be\nhosted ($YOUR_USERNAME.github.io/ipfs-user-settings).\n\nBuild the app:\nnpm run build\n\n\nDeploy app\nDeploy with your favorite tool: Heroku, GitHub pages, etc. Or if you're reading\nthis a month from now, use the new \"Fission Live\" tool 😉\n\nWe've included a deployment command for GitHub pages.\n\nFirst, make sure that your repository is set as the git remote.\nThis won't work if it's still set to fission-suite.\n\nRun: git remote -v  and ensure that that the url next to remote is \nhttps://github.com/$YOUR_USERNAME/ipfs-user-settings.git\n\nIf you forked the repo earlier, this should be fine. If you do need to change\nyour remote, just run\ngit remote set origin https://github.com/$YOUR_USERNAME/ipfs-user-settings.git\n\nDeploy the app:\nnpm run deploy\n\nNow open your browser to $YOUR_USERNAME.github.io/ipfs-user-settings  to see\nyour site up and running!\n\nLet us know how it goes! We're always eager to hear any feedback so come join\nthe conversation on our forum [https://talk.fission.codes/], Discord\n[https://discord.gg/daDMAjE], or GitHub [https://github.com/fission-suite/].","html":"<p><em>My name is Daniel, and I'm the newest member of the Fission team. I'm based near Springfield, Missouri, smack dab in the center of the Ozarks (recently made famous by </em><a href=\"https://www.imdb.com/title/tt5071412/\"><em>the Netflix show</em></a><em>, which is kinda like my life but with money laundering instead of unit tests). When I'm not working on building tools for the decentralized web, you can catch me reading cool books (</em><a href=\"https://www.amazon.com/Ubik-Philip-K-Dick-ebook/dp/B005LVR6ZA\"><em>currently reading</em></a><em>), listening to music (</em><a href=\"https://open.spotify.com/album/5jgnoe0auRKrLvvj4qO5VX?si=aA_8ILIYQVKwdVaRjvAexg\"><em>currently listening</em></a><em>), or rock climbing (</em><a href=\"https://www.mountainproject.com/area/105903004/horseshoe-canyon-ranch\"><em>my weekend plans</em></a><em>). </em><br><br>Here at Fission, we've been hard at working cooking up cool new experiments with IPFS. IPFS's content-based addressing which gives us a flat, universal namespace to store files and other data prompts us to think differently about how we build and deploy software. This leads us to build prototypes and experiments, which help us:<br><br>• Ideate projects that either we or another team can expand upon<br>• Test and calibrate the tools we build for real world hands-on usage<br>• Prompt the creation of new libraries/technologies<br><br>Our most recent application came from a simple question that we asked: if my preferences are generally the same across apps, why do I need to fill out that same information in every app?<br><br>Introducing <a href=\"https://github.com/fission-suite/ipfs-user-settings/\">IPFS Portable User Settings</a> — a completely client side application that allows you to update your preferences over IPFS and take them with you wherever you go.</p><h3 id=\"play-around-with-the-live-demo\">Play around with the <a href=\"https://fission-suite.github.io/ipfs-user-settings/\">live demo</a></h3><!--kg-card-begin: gallery--><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://s3.fission.codes/2019/09/user-settings-screenshot.png\" width=\"1269\" height=\"725\"></div></div></div></figure><!--kg-card-end: gallery--><h2 id=\"background\">Background</h2><p>While the emerging decentralized web and the web of yesteryear differ in many ways, one way to think about it is as a difference in user model. The web2.0 user data model is company (or platform)-centric. This involves locking your data in monolithic company-owned databases, with the end result being that your identity is fragmented and duplicated across a variety of corporate silos. Web3 brings with it a new way of conceptualizing data: a user-centric data model. In this model, a user owns their data and that data can only be read/edited by them and trusted people and apps. Apps take on a different function: they exist as \"windows\" that a user grants permissions to view or make edits to certain attributes of their data.<br><br>Often, the benefits of web3 technology are put in reactionary terms. That is, it's reacting to the overreaches/missteps of the current corporate stewards of the internet: censorship, sloppy or malicious use of user data, temporality (will I be able to see my photos on Facebook in 25 years? my archived emails on Gmail?), and so on. <br><br>One thing that we aim to do at Fission is not only address the failings of web2, but also create positive reasons to make the jump to web3.</p><p>Decentralized apps should be fun and easy for developers to create, and exciting for users to adopt because they offer features not possible in the old web. This was our motivation when developing our Portable User Settings. We wanted to give the intuition behind some of what's possible with web3 and a technical demo that a more robust version could be based on.<br><br>We also wanted to make this app completely p2p. No HTTP gateways required here! If your browser is IPFS-enabled and you're running a local daemon, the app connects to that daemon. If not, it gracefully sets up an in-browser instance of <a href=\"https://github.com/ipfs/js-ipfs\"><code>js-ipfs</code></a>.</p><p>There are lots of directions this could go. Maybe we want to enable universal dark mode so that all the websites you browse respect your global dark mode setting? Leave a comment on what portable user setting you'd like to see in the world.</p><h2 id=\"technical-results\">Technical Results</h2><p>This project yielded not only a pretty neat demo, but also some useful technical offshoots:<br><br><strong><a href=\"https://github.com/fission-suite/get-ipfs\">get-ipfs</a></strong><br>One of the biggest issues that developers can face when trying to make use of the decentralized web is the high barrier to entry. We wrapped our IPFS fallback functionality into it's own package: <a href=\"https://github.com/fission-suite/get-ipfs\">get-ipfs</a>. This is your new one-stop shop for loading an IPFS instance into a webpage. It's as simple as <code>const ipfs = await getIpfs()</code> and you can make direct P2P use of the decentralized web in your webapp. Give it a go and let us know how it works for you!<br><br><strong>Fission JavaScript Client</strong><br>This app was also our first time using the <a href=\"https://github.com/fission-suite/typescript-client\">Fission JavaScript client</a> in the wild. While adding/getting is done P2P, requests to pin must be sent over HTTP. The library, however, has all the functionality you need to make IPFS-enabled apps over HTTP. Check out the <a href=\"https://github.com/fission-suite/typescript-client\">library</a> and see what cool uses you can come up with!<br><br><strong>Hosted IPFS Node</strong><br>While we were already hosting an IPFS node, our hosted node is now much more robust. It's capable of handling secure websocket connects (so it can talk to in-browser <code>js-ipfs</code> nodes!) and stores data in S3. Check out the walkthrough we posted for <a href=\"https://talk.fission.codes/t/a-loosely-written-guide-to-hosting-an-ipfs-node-on-aws/234\">setting up your own IPFS node on AWS</a>!<br><br>Again, checkout the demo <a href=\"https://fission-suite.github.io/ipfs-user-settings/\">here</a>, or keep reading to find out how to build and host your own!</p><h2 id=\"run-deploy-your-own-app\">Run/Deploy your own app</h2><h3 id=\"fork-the-repo\">Fork the repo</h3><p><em>Note: This is only necessary if you are planning on deploying your own user settings app. If you just want to play around locally, you can simply clone the repository.</em><br><br>Click \"Fork\" in the upper-right corner of the repository.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/09/fork-repo.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><h3 id=\"clone-the-repo-locally\">Clone the repo locally</h3><p>In your terminal, clone the <code>ipfs-user-settings</code> repo:</p><!--kg-card-begin: code--><pre><code>git clone https://github.com/$YOUR_USERNAME/ipfs-user-settings.git\ncd ipfs-user-settings</code></pre><!--kg-card-end: code--><h3 id=\"setup-environment\">Setup environment</h3><p>The environment variables are optional, but will need to be setup for the best user experience.</p><p>First, create a <code>.env</code> file in the root of the repository:<br><code>touch .env</code></p><p>Your <code>.env</code> will end up looking something like this:</p><!--kg-card-begin: code--><pre><code>REACT_APP_DEFAULT_CID = QmUWWqCNSdZmus7mc52um5cpqUi1CaE97AzBTY7iWfBXV9\nREACT_APP_BOOTSTRAP_NODE = /dns4/ipfs.runfission.com/tcp/4003/wss/ipfs/QmVLEz2SxoNiFnuyLpbXsH6SvjPTrHNMU88vCQZyhgBzgw\nREACT_APP_INTERPLANETARY_FISSION_URL = https://runfission.com\nREACT_APP_INTERPLANETARY_FISSION_USERNAME = ADD_USERNAME_HERE\nREACT_APP_INTERPLANETARY_FISSION_PASSWORD = ADD_PASSWORD_HERE\n</code></pre><!--kg-card-end: code--><p>Let's walk through what each of those variables will do.</p><p><code>REACT_APP_DEFAULT_CID</code>: the cid that contains the default settings that you want a new user to see. You can set it to the above value for our recommended defaults (or leave it blank and it will default to that).</p><p><em>**<em>Edited this section to reflect recent changes</em>**</em><br><code>REACT_APP_BOOTSTRAP_NODE_TCP</code>: the multiaddr of the ipfs node that you would like the user's node to connect to through tcp (for instance with a local daemon through <a href=\"https://github.com/ipfs-shipyard/ipfs-companion\">ipfs companion</a>). You can set it to the above value to connect to the IPFS node that Fission hosts (or leave it blank and it will default to that).<br><code>REACT_APP_BOOTSTRAP_NODE_WSS</code>: the multiaddr of the ipfs node that you would like the user's node to connect to through wss (if the user does not have an ipfs-enabled browser and falls back to an in-browser js-ipfs daemon). You can set it to the above value to connect  to the IPFS node that Fission hosts (or leave it blank and it will  default to that). <br><strong>Note:</strong> if you use a custom node, it must be interoperable with <code>js-ipfs</code>. This means that it either needs to connect via WebRTC or Secured Websockets (notice the <code>wss</code> in the above multiaddr).</p><p><code>REACT_APP_INTERPLANETARY_FISSION_...</code>: the last three variables are your provisioned account information for using the Fission web-api. These are used for pinning content to the Fission IPFS node so that content will stay online even after a user goes offline. If you leave them blank, the webapp will not pin user content. At the moment, these can be obtained by joining the <a href=\"https://elements.heroku.com/addons/interplanetary-fission\">Fission Heroku add-on alpha</a>. If you've tried out our earlier <a href=\"https://github.com/fission-suite/ipfs-photo-gallery\">photo gallery demo</a>, you can use the same credentials here, otherwise follow <a href=\"https://talk.fission.codes/t/ipfs-photo-gallery-in-alpha-mode/197/10\">that tutorial</a> to provision a username and password</p><h3 id=\"run-the-app-locally\">Run the app locally</h3><p>First install dependencies:<br><code>npm install</code></p><p>Then run the app:<br><code>npm run start</code></p><p>This will open up a page in your browser at <code>http://localhost:3000</code>!</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/09/run-local-terminal.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>Play around a bit! Try changing your settings, saving it, and loading past CIDs.</p><h3 id=\"build-app\">Build app</h3><p>In order for your app to build with the correct internal links, you'll need to change the homepage:<br>Open <code>package.json</code> and change the <code>homepage</code> to the url where this site will be hosted (<code>$YOUR_USERNAME.github.io/ipfs-user-settings</code>).</p><p>Build the app:<br><code>npm run build</code></p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/09/build-terminal.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><h3 id=\"deploy-app\"><br>Deploy app</h3><p>Deploy with your favorite tool: Heroku, GitHub pages, etc. Or if you're reading this a month from now, use the new \"Fission Live\" tool 😉<br><br>We've included a deployment command for GitHub pages.</p><p>First, make sure that your repository is set as the git remote.<br><strong>This won't work if it's still set to <code>fission-suite</code>.</strong></p><p>Run: <code>git remote -v</code> and ensure that that the url next to remote is <code>https://github.com/$YOUR_USERNAME/ipfs-user-settings.git</code></p><p>If you forked the repo earlier, this should be fine. If you do need to change your remote, just run<br><code>git remote set origin https://github.com/$YOUR_USERNAME/ipfs-user-settings.git</code></p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/09/check-remote.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>Deploy the app:<br><code>npm run deploy</code></p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/09/deploy.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>Now open your browser to <code>$YOUR_USERNAME.github.io/ipfs-user-settings</code> to see your site up and running!<br><br>Let us know how it goes! We're always eager to hear any feedback so come join the conversation on <a href=\"https://talk.fission.codes/\">our forum</a>, <a href=\"https://discord.gg/daDMAjE\">Discord</a>, or <a href=\"https://github.com/fission-suite/\">GitHub</a>.</p>","url":"https://blog.fission.codes/ipfs-user-settings-app/","canonical_url":null,"uuid":"3fad4646-11d0-47e7-b60c-75eec278c562","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d76bcdec6f24b001eb931e9","reading_time":null}}]}},"pageContext":{"slug":"daniel","pageNumber":0,"humanPageNumber":1,"skip":0,"limit":12,"numberOfPages":1,"previousPagePath":"","nextPagePath":""}},"staticQueryHashes":["1752937443","2358152166","2561578252","2731221146","4145280475"]}