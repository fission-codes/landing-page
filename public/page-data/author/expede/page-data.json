{"componentChunkName":"component---src-templates-author-js","path":"/author/expede/","result":{"data":{"ghostAuthor":{"slug":"expede","name":"Brooklyn Zelenka","bio":"CTO at Fission ‚ô•Œª Programs with functions","cover_image":"https://s3.fission.codes/2019/05/1500x500.jpg","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","location":"Vancouver, Canada","website":null,"twitter":"@expede","facebook":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__600b7b1257e354001ec9ef4f","title":"Brooklyn Zelenka at Speakeasy JS, Jan 22nd, 2021","slug":"brooklyn-zelenka-speakeasyjs-jan2021","featured":true,"feature_image":"https://images.unsplash.com/photo-1519214605650-76a613ee3245?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDUwfHxiYXJ8ZW58MHx8fA&ixlib=rb-1.2.1&q=80&w=1080","excerpt":"Brooklyn Zelenka presents WebNative: How to put a full stack directly in the browser at the Speakeasy JS meetup.","custom_excerpt":"Brooklyn Zelenka presents WebNative: How to put a full stack directly in the browser at the Speakeasy JS meetup.","created_at_pretty":"23 January, 2021","published_at_pretty":"23 January, 2021","updated_at_pretty":"23 January, 2021","created_at":"2021-01-22T17:25:38.000-08:00","published_at":"2021-01-22T17:27:59.000-08:00","updated_at":"2021-01-22T17:40:24.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ‚ô•Œª Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"Speakeasy JS","slug":"speakeasy-js","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"ucan","slug":"ucan","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"WNFS","slug":"wnfs","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Brooklyn Zelenka presented the work we're doing at Fission at Speakeasy JS\n[https://speakeasyjs.com/]  which is \"the meetup for ü•º mad science, üßô‚Äç‚ôÇÔ∏è\nhacking, and üß™ experiments\". \n\nWebNative: How to put a full stack directly in the browser\nSlides are available on Notist ¬ª\n[https://noti.st/expede/lZJZIu/webnative-how-to-put-a-full-stack-directly-in-the-browser]\nYes we have stickers\n[https://shop.fission.codes/collections/stickers-prints/products/speakeasyjs-jan-2021-js-se-stickers?variant=37714267766952]\n: we made a special edition of JavaScript and Speakeasy JS related stickers.\nCode SPEAKEASYJS  for a limited number of free sticker packs available (just pay\nshipping to wherever you are).\n\nThanks Feross [https://feross.org/]  for organizing!\n\nVideo\nVisit the Fission Vimeo account for all of our videos\n[https://vimeo.com/fission], or subscribe to our YouTube channel\n[https://www.youtube.com/channel/UCkf7isShsKRvQl2J7vz5EaA/featured].","html":"<p>Brooklyn Zelenka presented the work we're doing at Fission at <a href=\"https://speakeasyjs.com/\">Speakeasy JS</a> which is \"the meetup for ü•º mad science, üßô‚Äç‚ôÇÔ∏è hacking, and üß™ experiments\". </p><h2 id=\"webnative-how-to-put-a-full-stack-directly-in-the-browser\">WebNative: How to put a full stack directly in the browser</h2><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2021/01/webnative-full-stack-1.jpg\" class=\"kg-image\"><figcaption>Slides are <a href=\"https://noti.st/expede/lZJZIu/webnative-how-to-put-a-full-stack-directly-in-the-browser\">available on Notist ¬ª</a></figcaption></figure><!--kg-card-end: image--><p>Yes we have <a href=\"https://shop.fission.codes/collections/stickers-prints/products/speakeasyjs-jan-2021-js-se-stickers?variant=37714267766952\">stickers</a>: we made a special edition of JavaScript and Speakeasy JS related stickers. Code <code>SPEAKEASYJS</code> for a limited number of free sticker packs available (just pay shipping to wherever you are).</p><p>Thanks <a href=\"https://feross.org/\">Feross</a> for organizing!</p><h2 id=\"video\">Video</h2><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/TBKQ_TvrK8o?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><!--kg-card-end: embed--><p>Visit the <a href=\"https://vimeo.com/fission\">Fission Vimeo account for all of our videos</a>, or <a href=\"https://www.youtube.com/channel/UCkf7isShsKRvQl2J7vz5EaA/featured\">subscribe to our YouTube channel</a>.</p>","url":"https://blog.fission.codes/brooklyn-zelenka-speakeasyjs-jan2021/","canonical_url":null,"uuid":"527fe227-0088-4ae9-8c9c-14a12425c7e2","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"600b7b1257e354001ec9ef4f","reading_time":null}},{"node":{"id":"Ghost__Post__5f7d56dc5117dc001edafbdf","title":"Web Native File System Technical Design Overview","slug":"web-native-file-system-presentation","featured":false,"feature_image":"https://images.unsplash.com/photo-1524351543168-8e38787614e9?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"Brooklyn and Daniel from the Fission team present a technical overview of the Web Native File System.","custom_excerpt":"Brooklyn and Daniel from the Fission team present a technical overview of the Web Native File System.","created_at_pretty":"07 October, 2020","published_at_pretty":"14 August, 2020","updated_at_pretty":"19 November, 2020","created_at":"2020-10-06T22:49:16.000-07:00","published_at":"2020-08-13T22:49:00.000-07:00","updated_at":"2020-11-19T11:58:53.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ‚ô•Œª Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null},{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"WNFS","slug":"wnfs","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Fission has designed a spec for what we call the Web Native File System (WNFS).\nIt is implemented on top of IPFS and can be loaded in any browser, including\nmobile.\n\nWe‚Äôve designed the system to store metadata, encrypt private files, and offer a\nnumber of features for end users and developers using the file system to build\nweb apps with a web native file system, where files are owned by users. This\nalso leads to a style of single tenant architecture for web apps, but for this\npresentation we will focus mainly on the file system details.\n\nJoin Brooklyn Zelenka and Daniel Holmgren as they present a technical design\noverview of WNFS. Leave a comment in the forum\n[https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818] \n if you have questions.\n\nSlides\nFull Slide deck available on Notist ¬ª\n[https://noti.st/expede/QAYFyW/webnative-file-system]Screencast\nSorry, your browser doesn't support embedded videos.Video\nResources\n * Slides on Notist [https://noti.st/expede/QAYFyW/webnative-file-system]\n * Fission Whitepaper\n   [https://whitepaper.fission.codes/file-system/file-system-basics]  (continues\n   to be a living document)\n * Implemented in webnative SDK on Github\n   [https://github.com/fission-suite/webnative], with basic info in the README \n * Extended usage and documentation in the Fission Guide\n   [https://guide.fission.codes/webnative-sdk/getting-started-webnative-sdk]","html":"<p>Fission has designed a spec for what we call the Web Native File System (WNFS). It is implemented on top of IPFS and can be loaded in any browser, including mobile.</p><p>We‚Äôve designed the system to store metadata, encrypt private files, and offer a number of features for end users and developers using the file system to build web apps with a web native file system, where files are owned by users. This also leads to a style of single tenant architecture for web apps, but for this presentation we will focus mainly on the file system details.</p><p>Join Brooklyn Zelenka and Daniel Holmgren as they present a technical design overview of WNFS. Leave a <a href=\"https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818\">comment in the forum</a> if you have questions.</p><h2 id=\"slides\">Slides</h2><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/10/common-concepts-virtual-nodes-large-34.png\" class=\"kg-image\"><figcaption><a href=\"https://noti.st/expede/QAYFyW/webnative-file-system\">Full Slide deck available on Notist ¬ª</a></figcaption></figure><!--kg-card-end: image--><h2 id=\"screencast\">Screencast</h2><!--kg-card-begin: html--><video width=\"100%\" height=\"100%\" controls>\n\n    <source src=\"https://ipfs.runfission.com/ipfs/QmaLfohLFTdBu3SU7H3CX6vT8qMZHjUQ8v2mYqcXosBnYY/Screencast_from_08-12-2020_090507_PM.webm\" type=\"video/webm\">\n\n    Sorry, your browser doesn't support embedded videos.\n</video>\n\n<!--kg-card-end: html--><h2 id=\"video\">Video</h2><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/479944561?app_id=122963\" width=\"426\" height=\"240\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Technical Overview of the Web Native File System with Brooklyn Zelenka, Daniel Holmgren - Fission Video Chat Aug 13, 2020\"></iframe></figure><!--kg-card-end: embed--><h2 id=\"resources\">Resources</h2><ul><li><a href=\"https://noti.st/expede/QAYFyW/webnative-file-system\">Slides on Notist</a></li><li><a href=\"https://whitepaper.fission.codes/file-system/file-system-basics\">Fission Whitepaper</a> (continues to be a living document)</li><li>Implemented in <a href=\"https://github.com/fission-suite/webnative\">webnative SDK on Github</a>, with basic info in the README </li><li>Extended usage and documentation in the <a href=\"https://guide.fission.codes/webnative-sdk/getting-started-webnative-sdk\">Fission Guide</a></li></ul>","url":"https://blog.fission.codes/web-native-file-system-presentation/","canonical_url":null,"uuid":"6f6ff611-83a0-4e6f-a8ef-8290044743d3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5f7d56dc5117dc001edafbdf","reading_time":null}},{"node":{"id":"Ghost__Post__5eb19b7a82ce80001ee86716","title":"UCAN: Authorizing Users Without a Back End","slug":"auth-without-backend","featured":true,"feature_image":"https://s3.fission.codes/2020/05/zdenek-machacek-EtxsgEcHnZg-unsplash.jpg","excerpt":"User Controlled Authorization Networks (UCANs) are a way of doing authorization (\"what you can do\") where users are fully in control.","custom_excerpt":"User Controlled Authorization Networks (UCANs) are a way of doing authorization (\"what you can do\") where users are fully in control.","created_at_pretty":"05 May, 2020","published_at_pretty":"07 May, 2020","updated_at_pretty":"26 May, 2020","created_at":"2020-05-05T09:59:38.000-07:00","published_at":"2020-05-07T12:23:57.000-07:00","updated_at":"2020-05-26T15:19:05.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ‚ô•Œª Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ‚ô•Œª Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null},"primary_tag":{"name":"Technology Highlight","slug":"technology-highlight","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Technology Highlight","slug":"technology-highlight","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"ucan","slug":"ucan","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"auth","slug":"auth","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"authorization","slug":"authorization","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"jwt","slug":"jwt","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Fission is building a system which \"makes the right thing the easy thing.\" It\nlets you write apps for the browser without having to write or deploy a back\nend. We're making use of fairly recent browser features and W3C standards to\nmake this all possible. Read on for a technical summary, or join us in the\ndeveloper forum [https://talk.fission.codes]  to get into more detail.\n\nOne of the most common tasks for apps is authorizing users to perform some\naction, like storing new data to storage, updating records, or fetching a file. \n\nTraditional app architecture has many users share one database (\"multi-tenant\"),\nwith all user data fully interleaved with each other. Authorization here is\nprimarily focused on keeping users from editing each other's records on this\nshared infrastructure. The server's rules give fairly coarse-grained control.\nDue to the inevitable exceptions to these rules, the logic becomes increasingly\ncomplex over time.\n\nEven in a microservice architecture, typically all requests are funneled through\na central authorization service. Over time this causes several challenges,\nincluding complex logic, cost of maintenance, tricky edge cases, and difficulty\nmanaging traffic spikes. In short: it doesn't scale well.\n\nEven incumbents like  Google are moving away from the traditional auth server\nmodel [https://research.google/pubs/pub41892/]  to overcome the above\nchallenges. Fission has different constraints from Google and Amazon, but can\nadapt a lot of these ideas for our purposes. Essentially they're moving from a\ncentral auth server setup to a distributed model where more power is delegated\nto services.\n\nWhat if we learn from Google's approach (plus older approaches like SDSI/SPKI\n[https://tools.ietf.org/html/rfc2693]) but took it to its logic conclusion?\n\nIntroducing UCANs\n> User Controlled Authorization Networks (UCANs) are a way of doing authorization\nwhere users are fully in control. OAuth is designed for a centralized world,\nUCAN is the distributed user controlled version.\nUCAN SamAt a high level, User Controlled Authorization Networks (UCANs) are a\nway of doing authorization (\"what you can  do\") where users are fully in\ncontrol. There's no all-powerful authorization server, or server of any kind\nrequired. Everything that a users is allowed to do is captured directly in a key\nor token, and can be sent to anyone that knows how to interpret this format.\n\nSince all Fission accounts are equipped with a global ID and cryptographic keys,\nwe were able to design a system that has very few assumptions and thus works in\na huge number of situations.\n\nThis setup has several advantages:\n\n 1. Low effort:¬†developers don't need to write and maintain complex access logic\n 2. Familiar:¬†uses very common JSON Web Tokens (JWTs)\n 3. Invisible: users don't need to know that anything special is happening\n 4. Flexible: access can be granted as coarse or granular as the end users wants\n 5. Scalable: no auth server bottleneck / scales infinitely\n 6. Secure:¬†military-grade encryption\n 7. Collaborative:¬†users and services and delegate a subset of their access to\n    others\n 8. Self-contained: the token contains all the information needed to verify it\n\nUCANs are all that we need to sign into multiple machines, delegate access for\nservice providers to do things while we're offline, securely collaborate on\ndocuments with a team, and more. We get the flexibility of fine- or\ncoarse-grained control, all controlled by the one who cares about the data the\nmost: the user.\n\nWe've implemented this as the authorization system for Fission, and are also\nmaking this available as a building block for developers to solve user\nauthorization and delegation within their own applications.\n\n\n--------------------------------------------------------------------------------\n\nThis system of authorization is broken into two halves: read and write (or\n\"command and query\", depending on your background). Without getting too in the\nweeds, here's a high level description of how this all works:\n\nRead (Query) Access\nRead access comes in three flavours: public, private, and unlisted. Access\nfollows the object-capability model\n[https://en.wikipedia.org/wiki/Object-capability_model?oldformat=true], where\nanyone with the reference (URL or CID) and cryptograhic key can read the data by\nvirtue of having access to these.\n\nPublic üëÄ\nPublic files are just that: files that can be discovered or accessed by anyone\nat an easy-to read path.\n\nHere's a live example: https://boris.fission.name/Photos/boris-with-icecream.jpg\n\nPrivate üîê\nThe user encrypts the data, and shares the key with those that should have\naccess. The contents of a private directory is only readable with a key, but\nonce you have access to that directory, all of the data in that directory\n(including subdirectories and metadata) is accessible.\n\nThe end experience matches the behaviour in other online consumer file storage\nsolutions like Dropbox and Google Drive. A major difference with Fission is that\nthe end user is given complete control over who has access, and access does not\ndepend on Fission's servers being accessible (i.e. you're offline or Fission\ndisappears).\n\nUnlisted üó∫Ô∏è\nSort of a mashup of public and private files! This is useful when you want to\n(e.g.) embed an image in an email without distributing keys, but also don't want\nit easily discoverable.\n\nThe unlisted files themselves are left unencrypted, but finding them is\npractically infeasible without the private index. Think of this index as a\nsecret treasure map for the web ‚Äî the map itself private (only a select few have\nthe map), but anyone with it can find the data at the marked locations.\n\nUnder the hood, the Fission SDK creates a JSON file that lists all of the\nlocations. That JSON file is then encrypted and the key passed to whoever should\nhave access., or the links can be shared directly.\n\nHere's a simple example of what this looks like:\n\n// The \"treasure map\"\n{\n  \"QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ\": {\n      \"cat.jpg\": \"Qmd286K6pohQcTKYqnS1YhWrCiS4gz7Xi34sdwMe9USZ7u\"\n  }\n}\n\n# URL\nhttps://ipfs.runfission.com/ipfs/QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ/cat.jpg\n\nWrite (Command) Access üñäÔ∏è\nThere are some actions that a user needs the help of another user or service to\nperform. For example: sending an email, or updating DNS.\n\nIn a traditional OAuth based system, the \"account\" lives entirely on the server,\nand the user is granted access with a token. In Fission's design, the account is\na key pair, and a UCAN is equivalent to an OAuth token. OAuth is designed for a\ncentralized client/server world. UCANs are the distributed user controlled\nequivalent.\n\nUCANs are simply JWT [jwt.io]s that contain special keys. Much of this will look\nfamiliar if you've done web auth in the past decade or so. Here's an example:\n\n{\n  \"alg\": \"Ed25519\",\n  \"typ\": \"JWT\"\n  \"uav\": \"0.1.0\"\n}\n{\n  \"aud\": \"did:key:zStEZpzSMtTt9k2vszgvCwF4fLQQSyA15W5AQ4z3AR6Bx4eFJ5crJFbuGxKmbma4\",\n  \"iss\": \"did:key:z5C4fuP2DDJChhMBCwAkpYUMuJZdNWWH5NeYjUyY8btYfzDh3aHwT5picHr9Ttjq\",\n  \"nbf\": 1588713622,\n  \"exp\": 1589000000,\n  \"scp\": \"/\"\n  \"ptc\": \"APPEND\",\n  \"prf\": null,\n}\n\nExample UCAN JSON Web TokenBearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsInVhdiI6IjAuMS4wIn0.eyJhdWQiOiJkaW\nQ6a2V5OnpTdEVacHpTTXRUdDlrMnZzemd2Q3dGNGZMUVFTeUExNVc1QVE0ejNBUjZCeDRl\nRko1Y3JKRmJ1R3hLbWJtYTQiLCJpc3MiOiJkaWQ6a2V5Ono1QzRmdVAyRERKQ2hoTUJDd0\nFrcFlVTXVKWmROV1dINU5lWWpVeVk4YnRZZnpEaDNhSHdUNXBpY0hyOVR0anEiLCJuYmYi\nOjE1ODg3MTM2MjIsImV4cCI6MTU4OTAwMDAwMCwic2NwIjoiLyIsInB0YyI6IkFQUEVORC\nIsInByZiI6bnVsbH0.Ay8C5ajYWHxtD8y0msla5IJ8VFffTHgVq448Hlr818JtNaTUzNIw\nFiuutEMECGTy69hV9Xu9bxGxTe0TpC7AzV34p0wSFax075mC3w9JYB8yqck_MEBg_dZ1xl\nJCfDve60AHseKPtbr2emp6hZVfTpQGZzusstimAxyYPrQUWv9wqTFmin0Ls-loAWamleUZ\noE1Tarlp_0h9SeV614RfRTC0e3x_VP9Ra_84JhJHZ7kiLf44TnyPl_9AbzuMdDwCvu-zX\njd_jMlDyYcuwamJ15XqrgykLOm0WTREgr_sNLVciXBXd6EQ-Zh2L7hd38noJm1P_MIr9_\nEDRWAhoRLXPQ\n\nThe same, as a bearer token (for an HTTP Authorization  header)Let's break that\ndown:\n\nHeader üìã\nThis is a standard JWT header, plus a uav  field.\n\n * alg  ‚Äî type of signature\n * typ  ‚Äî¬†state that this is a JWT\n * uav  ‚Äî \"UCAN version\" (so we can track the format of when it was issued)\n\nBody üí™\n * aud  \"Audience\" ‚Äî¬†the ID of who it's intended for (the \"to\" field)\n * iss  \"Issuer\" ‚Äî¬†ID of who sent it (the \"from\" field)\n * nbf  \"Not Before\" ‚Äî¬†Unix timestamp of when it becomes valid (typically when\n   it was created, but not always)\n * exp  \"Expiry\" ‚Äî¬†Unix timestamp of when it stops being valid\n * scp  \"Scope\" ‚Äî¬†The scope of things it's able to change (e.g. a file system\n   path)\n * ptc  \"Potency\" ‚Äî what rights comes with the token (in this case it's append\n   only)\n * prf  \"Proof\" ‚Äî an optional nested token with equal or greater privileges\n\nThese are then all signed with the user's private key. This key must match the\npublic key in the iss  field (user IDs are public keys), directly authenticating\nthe token. As the token is a complete description of access, this token is\nself-validating with no need to look at other data or services.\n\nDelegation ü§ù\nWhat if you want to grant another user or service the ability to perform some\naction on your behalf? As long as they have a valid UCAN, they can wrap it in\nanother with equal or lesser rights and include the original in the prf  field.\n\nSince every UCAN layer is self-signed, we can trace back to the root (no prf \nfield), and know who the delegate is acting as. This chain of tokens is itself\nis the proof that you're perform some action.\n\nFor example, here's a chain:\n\n\"prf\":\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.\n       eyJhdWQiOiJkaWQ6a2V5OnpTdEVacHpTTXRUdDlrMnZz\n       emd2Q3dGNGZMUVFTeUExNVc1QVE0ejNBUjZCeDRlRko1\n       Y3JKRmJ1R3hLbWJtYTQiLCJleHAiOjE1ODgyNjU0MjAs\n       ImlzcyI6ImRpZDprZXk6ejFMQm53RWt0d1lMcnBQaHV3\n       Rm93ZFZ3QUZYNXpwUm85cnJWendpUlJCQmlhQm9DUjdo\n       TnFnc3RXN1ZNM1Q5YXVOYnFUbVFXNHZkSGI2MVJoVE1W\n       Z0NwMUJUeHVhS1UzYW5Xb0VSRlhwdVp2ZkUzOWc4dTdI\n       UzlCZUQxUUpOMWZYNlM4dnZza2FQaHhGa3dMdEdyNFpm\n       ZmtVRTU3V1pwTldNNlU2QnFka3RaeG1LenhDODV6TjRG\n       QzlXczVMSHVHZnhhQ3VCTGlVZkE3cUVZVlN6MVF1MXJa\n       RHBENk55ZlVOckhKMUVyWmR1SnVuOTc2bmJGSHJtRG5V\n       NDdSY1NNRkVTYk5LRGkxNDY3dFJmdWJzTXJEemViZENG\n       S1EybTFBWXlzdG8yaTZXbWNudWNqdDN0bndUcWU3Qm84\n       TDFnOGg4VUdBOTQ2REYzV2VHYlBVR3F6bnNVZExxNlhM\n       Q21KekprSm1yTnllWmtzd2R5UFgyVnU2SjlFNEoxMlNi\n       M2g5ZHM3YXRCeWFtZnRpdEVac2Y2aFBKa0xVWEdUaFlw\n       Q25tUkFBclJSZlBZMkg2Y0tEYzdBY25GUHlOSEdrYWI1\n       WkZvNHF2Z0JaeXRiSzFLNW9EM0hmUTZFMnliTGh5QzJi\n       OGk1d282REx0bTl1Zml4U0pOTlRIN1Vpa2s4OENtZXJ0\n       S1I3czEyQ0sxV0xFTTNadTVZQlpOcGhuamo3Y3A4UVRv\n       ZEFlaFJQVjlORzFDTEVBTUpWTjc5RHZZZTZTZmlhZkpv\n       YmN2ZkQ4bnBmUzZqY2VqY3lvdVFiRXBLREc3UUFuS1M0\n       OFA0QXZnQnFEdmZOVWU1NGpNa2s2cjZDb1g0TGNZR0h1\n       a1pERW5lYTlrd2tFb1hrVVlTNGoxQWZiS2g0NEZ6U3VY\n       YlFxWm5qalZwVGh4Q05tbU5uMUU0cUhtc0ZrdkdvRjNG\n       TjU1Q1Brb0dmREN2eVFKZ3Ftc0ZtcGVUSlN5OXd6djRN\n       dmJxcHVBVHhyN2V5eHNHZUNXUWtjRHd1YjMyaW5HcFIz\n       cmVUZnpSSkVDQ0ZaYXJuWGRjQzVQaWRha2IxV3U4TCIs\n       Im5iZiI6MCwicHRjIjoiQVBQRU5EIiwicHJmIjpudWxs\n       LCJzY3AiOiIvIn0.leyE9w2TF28espPq6mOWziQuJny2\n       GHH_wajV6S9q4gF9SLP-i9JaX_XbkHlE1GhpQ36gSs6F\n       v4_AXSuJzDkUhnAA-oPsI5bSHl28XbobzqdmXtQ2liK-\n       Gum7kUtF1CPXlIamV0NIUlCKLlaUgFod5ZQvvA19kMHU\n       ugDGm8O3G98TSm3qLlG-eoFNVXr0NSpvLeui3kQbdBsP\n       GMykaTsUn1fNLI3oKkK6JvUIq4po6gIidTdOJDlS7y_W\n       4bdMXUQcTprtpd2QmTqwTzws9tu4GBdx7q1vz35LiG39\n       ohhRs2NKB4rxbZK2O9kX1G2xLMSETE_YT9GR04XWMnFo\n       eIodsg\"\n\nNested proofYou'll notice that the nested proof is encoded as a bearer token.\nThis is because it needs to include its signature to prove that it's valid, and\na JWT signature is on the content encoded this way.\n\nThis token is thus valid as long as:\n\n * All token signatures are correct\n * The time range, potency, and scope of prf  are greater-or-equal to the\n   enclosing token\n * The outer token's iss  field matches the prf's aud  field (chain \"to\" and\n   \"from\" correctly)\n * The timestamps are valid at the present time\n\nHashing Ô∏è üèéÔ∏è\nThese chains can get large, so you can optionally hash the outermost one before\nsending to a server. This acts as a \"content address\", meaning that if the\nservice hasn't seen it before, it can separately request that token, but if it\nalready has it in cache and doesn't need to get it over the network. Since\nhashes are much smaller than their content, this can save a lot of bandwidth on\nrepeated requests.\n\n\"prf\": \"QmU5WJTTp9vtMN1PBJpTV9xWXbTFBcWx3qjPGuXJXtujyd\"\n\nSame as the example above, but with the proof compressed to a content address\nConclusion\nUCANs are a straightforward way of doing authorization that leverage the public\nkey infrastructure already baked into Fission. This is essentially\nauthorization-at-the-edge with familiar JWTs. Since the token is self-contained,\nit's infinitely scalable. It's also very flexible: the user can grant root\naccess to everything, or grant a tab write access to a single object for one\nminute.\n\nThis article covers everything that you need to use a UCAN. For those interested\nin the space at a deeper level, there's a lot more background and technical\ndesign thinking that we didn't cover here. Keep an eye on our developer forum\n[talk.fission.codes]  for an upcoming article detailing the deeper internals!","html":"<p>Fission is building a system which \"makes the right thing the easy thing.\" It lets you write apps for the browser without having to write or deploy a back end. We're making use of fairly recent browser features and W3C standards to make this all possible. Read on for a technical summary, or <a href=\"https://talk.fission.codes\">join us in the developer forum</a> to get into more detail.</p><p>One of the most common tasks for apps is authorizing users to perform some action, like storing new data to storage, updating records, or fetching a file. </p><p>Traditional app architecture has many users share one database (\"multi-tenant\"), with all user data fully interleaved with each other. Authorization here is primarily focused on keeping users from editing each other's records on this shared infrastructure. The server's rules give fairly coarse-grained control. Due to the inevitable exceptions to these rules, the logic becomes increasingly complex over time.</p><p>Even in a microservice architecture, typically all requests are funneled through a central authorization service. Over time this causes several challenges, including complex logic, cost of maintenance, tricky edge cases, and difficulty managing traffic spikes. In short: it doesn't scale well.</p><p>Even incumbents like<a href=\"https://research.google/pubs/pub41892/\"> Google are moving away from the traditional auth server model</a> to overcome the above challenges. Fission has different constraints from Google and Amazon, but can adapt a lot of these ideas for our purposes. Essentially they're moving from a central auth server setup to a distributed model where more power is delegated to services.</p><p>What if we learn from Google's approach (plus older approaches like <a href=\"https://tools.ietf.org/html/rfc2693\">SDSI/SPKI</a>) but took it to its logic conclusion?</p><h2 id=\"introducing-ucans\">Introducing UCANs</h2><blockquote>User Controlled Authorization Networks (UCANs) are a way of doing authorization where users are fully in control. OAuth is designed for a centralized world, UCAN is the distributed user controlled version.</blockquote><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/05/UCAN_SAM-1.png\" class=\"kg-image\"><figcaption>UCAN Sam</figcaption></figure><!--kg-card-end: image--><p>At a high level, User Controlled Authorization Networks (UCANs) are a way of doing authorization (\"what <em>you can</em> do\") where users are fully in control. There's no all-powerful authorization server, or server of any kind required. Everything that a users is allowed to do is captured directly in a key or token, and can be sent to anyone that knows how to interpret this format.</p><p>Since all Fission accounts are equipped with a global ID and cryptographic keys, we were able to design a system that has very few assumptions and thus works in a huge number of situations.</p><p>This setup has several advantages:</p><ol><li>Low effort:¬†developers don't need to write and maintain complex access logic</li><li>Familiar:¬†uses very common JSON Web Tokens (JWTs)</li><li>Invisible: users don't need to know that anything special is happening</li><li>Flexible: access can be granted as coarse or granular as the end users wants</li><li>Scalable: no auth server bottleneck / scales infinitely</li><li>Secure:¬†military-grade encryption</li><li>Collaborative:¬†users and services and delegate a subset of their access to others</li><li>Self-contained: the token contains all the information needed to verify it</li></ol><p>UCANs are all that we need to sign into multiple machines, delegate access for service providers to do things while we're offline, securely collaborate on documents with a team, and more. We get the flexibility of fine- or coarse-grained control, all controlled by the one who cares about the data the most: the user.</p><p>We've implemented this as the authorization system for Fission, and are also making this available as a building block for developers to solve user authorization and delegation within their own applications.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>This system of authorization is broken into two halves: read and write (or \"command and query\", depending on your background). Without getting too in the weeds, here's a high level description of how this all works:</p><h2 id=\"read-query-access\">Read (Query) Access</h2><p>Read access comes in three flavours: public, private, and unlisted. Access follows the <a href=\"https://en.wikipedia.org/wiki/Object-capability_model?oldformat=true\">object-capability model</a>, where anyone with the reference (URL or CID) and cryptograhic key can read the data by virtue of having access to these.</p><h3 id=\"public-\">Public üëÄ</h3><p>Public files are just that: files that can be discovered or accessed by anyone at an easy-to read path.</p><p>Here's a live example: <a href=\"https://boris.fission.name/Photos/boris-with-icecream.jpg\">https://boris.fission.name/Photos/boris-with-icecream.jpg</a></p><h3 id=\"private-\">Private üîê</h3><p>The user encrypts the data, and shares the key with those that should have access. The contents of a private directory is only readable with a key, but once you have access to that directory, all of the data in that directory (including subdirectories and metadata) is accessible.</p><p>The end experience matches the behaviour in other online consumer file storage solutions like Dropbox and Google Drive. A major difference with Fission is that the end user is given complete control over who has access, and access does not depend on Fission's servers being accessible (i.e. you're offline or Fission disappears).</p><h3 id=\"unlisted-\">Unlisted üó∫Ô∏è</h3><p>Sort of a mashup of public and private files! This is useful when you want to (e.g.) embed an image in an email without distributing keys, but also don't want it easily discoverable.</p><p>The unlisted files themselves are left unencrypted, but finding them is practically infeasible without the private index. Think of this index as a secret treasure map for the web ‚Äî the map itself private (only a select few have the map), but anyone with it can find the data at the marked locations.</p><p>Under the hood, the Fission SDK creates a JSON file that lists all of the locations. That JSON file is then encrypted and the key passed to whoever should have access., or the links can be shared directly.</p><p>Here's a simple example of what this looks like:</p><!--kg-card-begin: code--><pre><code class=\"language-javascript\">// The \"treasure map\"\n{\n  \"QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ\": {\n      \"cat.jpg\": \"Qmd286K6pohQcTKYqnS1YhWrCiS4gz7Xi34sdwMe9USZ7u\"\n  }\n}</code></pre><!--kg-card-end: code--><!--kg-card-begin: code--><pre><code class=\"language-URL\"># URL\nhttps://ipfs.runfission.com/ipfs/QmW2WQi7j6c7UgJTarActp7tDNikE4B2qXtFCfLPdsgaTQ/cat.jpg</code></pre><!--kg-card-end: code--><h2 id=\"write-command-access-\">Write (Command) Access üñäÔ∏è</h2><p>There are some actions that a user needs the help of another user or service to perform. For example: sending an email, or updating DNS.</p><p>In a traditional OAuth based system, the \"account\" lives entirely on the server, and the user is granted access with a token<em><em>. </em></em>In Fission's design, the account is a key pair, and a UCAN is equivalent to an OAuth token. OAuth is designed for a centralized client/server world. UCANs are the distributed user controlled equivalent.</p><p>UCANs are simply <a href=\"jwt.io\">JWT</a>s that contain special keys. Much of this will look familiar if you've done web auth in the past decade or so. Here's an example:</p><!--kg-card-begin: code--><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-json\">{\n  \"alg\": \"Ed25519\",\n  \"typ\": \"JWT\"\n  \"uav\": \"0.1.0\"\n}\n{\n  \"aud\": \"did:key:zStEZpzSMtTt9k2vszgvCwF4fLQQSyA15W5AQ4z3AR6Bx4eFJ5crJFbuGxKmbma4\",\n  \"iss\": \"did:key:z5C4fuP2DDJChhMBCwAkpYUMuJZdNWWH5NeYjUyY8btYfzDh3aHwT5picHr9Ttjq\",\n  \"nbf\": 1588713622,\n  \"exp\": 1589000000,\n  \"scp\": \"/\"\n  \"ptc\": \"APPEND\",\n  \"prf\": null,\n}</code></pre><figcaption>Example UCAN JSON Web Token</figcaption></figure><!--kg-card-end: code--><!--kg-card-begin: code--><figure class=\"kg-card kg-code-card\"><pre><code>Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsInVhdiI6IjAuMS4wIn0.eyJhdWQiOiJkaW\nQ6a2V5OnpTdEVacHpTTXRUdDlrMnZzemd2Q3dGNGZMUVFTeUExNVc1QVE0ejNBUjZCeDRl\nRko1Y3JKRmJ1R3hLbWJtYTQiLCJpc3MiOiJkaWQ6a2V5Ono1QzRmdVAyRERKQ2hoTUJDd0\nFrcFlVTXVKWmROV1dINU5lWWpVeVk4YnRZZnpEaDNhSHdUNXBpY0hyOVR0anEiLCJuYmYi\nOjE1ODg3MTM2MjIsImV4cCI6MTU4OTAwMDAwMCwic2NwIjoiLyIsInB0YyI6IkFQUEVORC\nIsInByZiI6bnVsbH0.Ay8C5ajYWHxtD8y0msla5IJ8VFffTHgVq448Hlr818JtNaTUzNIw\nFiuutEMECGTy69hV9Xu9bxGxTe0TpC7AzV34p0wSFax075mC3w9JYB8yqck_MEBg_dZ1xl\nJCfDve60AHseKPtbr2emp6hZVfTpQGZzusstimAxyYPrQUWv9wqTFmin0Ls-loAWamleUZ\noE1Tarlp_0h9SeV614RfRTC0e3x_VP9Ra_84JhJHZ7kiLf44TnyPl_9AbzuMdDwCvu-zX\njd_jMlDyYcuwamJ15XqrgykLOm0WTREgr_sNLVciXBXd6EQ-Zh2L7hd38noJm1P_MIr9_\nEDRWAhoRLXPQ</code></pre><figcaption>The same, as a bearer token (for an HTTP <code>Authorization</code> header)</figcaption></figure><!--kg-card-end: code--><p>Let's break that down:</p><h2 id=\"header-\">Header üìã</h2><p>This is a standard JWT header, plus a <code>uav</code> field.</p><ul><li><code>alg</code> ‚Äî type of signature</li><li><code>typ</code> ‚Äî¬†state that this is a JWT</li><li><code>uav</code> ‚Äî \"UCAN version\" (so we can track the format of when it was issued)</li></ul><h2 id=\"body-\">Body üí™</h2><ul><li><code>aud</code> \"Audience\" ‚Äî¬†the ID of who it's intended for (the \"to\" field)</li><li><code>iss</code> \"Issuer\" ‚Äî¬†ID of who sent it (the \"from\" field)</li><li><code>nbf</code> \"Not Before\" ‚Äî¬†Unix timestamp of when it becomes valid (typically when it was created, but not always)</li><li><code>exp</code> \"Expiry\" ‚Äî¬†Unix timestamp of when it stops being valid</li><li><code>scp</code> \"Scope\" ‚Äî¬†The scope of things it's able to change (e.g. a file system path)</li><li><code>ptc</code> \"Potency\" ‚Äî what rights comes with the token (in this case it's append only)</li><li><code>prf</code> \"Proof\" ‚Äî an optional nested token with equal or greater privileges</li></ul><p>These are then all signed with the user's private key. This key must match the public key in the <code>iss</code> field (user IDs are public keys), directly authenticating the token. As the token is a complete description of access, this token is self-validating with no need to look at other data or services.</p><h3 id=\"delegation-\">Delegation ü§ù</h3><p>What if you want to grant another user or service the ability to perform some action on your behalf? As long as they have a valid UCAN, they can wrap it in another with equal or lesser rights and include the original in the <code>prf</code> field.</p><p>Since every UCAN layer is self-signed, we can trace back to the root (no <code>prf</code> field), and know who the delegate is acting as. This chain of tokens is itself is the proof that you're perform some action.</p><p>For example, here's a chain:</p><!--kg-card-begin: code--><figure class=\"kg-card kg-code-card\"><pre><code class=\"language-plaintext\">\"prf\":\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.\n       eyJhdWQiOiJkaWQ6a2V5OnpTdEVacHpTTXRUdDlrMnZz\n       emd2Q3dGNGZMUVFTeUExNVc1QVE0ejNBUjZCeDRlRko1\n       Y3JKRmJ1R3hLbWJtYTQiLCJleHAiOjE1ODgyNjU0MjAs\n       ImlzcyI6ImRpZDprZXk6ejFMQm53RWt0d1lMcnBQaHV3\n       Rm93ZFZ3QUZYNXpwUm85cnJWendpUlJCQmlhQm9DUjdo\n       TnFnc3RXN1ZNM1Q5YXVOYnFUbVFXNHZkSGI2MVJoVE1W\n       Z0NwMUJUeHVhS1UzYW5Xb0VSRlhwdVp2ZkUzOWc4dTdI\n       UzlCZUQxUUpOMWZYNlM4dnZza2FQaHhGa3dMdEdyNFpm\n       ZmtVRTU3V1pwTldNNlU2QnFka3RaeG1LenhDODV6TjRG\n       QzlXczVMSHVHZnhhQ3VCTGlVZkE3cUVZVlN6MVF1MXJa\n       RHBENk55ZlVOckhKMUVyWmR1SnVuOTc2bmJGSHJtRG5V\n       NDdSY1NNRkVTYk5LRGkxNDY3dFJmdWJzTXJEemViZENG\n       S1EybTFBWXlzdG8yaTZXbWNudWNqdDN0bndUcWU3Qm84\n       TDFnOGg4VUdBOTQ2REYzV2VHYlBVR3F6bnNVZExxNlhM\n       Q21KekprSm1yTnllWmtzd2R5UFgyVnU2SjlFNEoxMlNi\n       M2g5ZHM3YXRCeWFtZnRpdEVac2Y2aFBKa0xVWEdUaFlw\n       Q25tUkFBclJSZlBZMkg2Y0tEYzdBY25GUHlOSEdrYWI1\n       WkZvNHF2Z0JaeXRiSzFLNW9EM0hmUTZFMnliTGh5QzJi\n       OGk1d282REx0bTl1Zml4U0pOTlRIN1Vpa2s4OENtZXJ0\n       S1I3czEyQ0sxV0xFTTNadTVZQlpOcGhuamo3Y3A4UVRv\n       ZEFlaFJQVjlORzFDTEVBTUpWTjc5RHZZZTZTZmlhZkpv\n       YmN2ZkQ4bnBmUzZqY2VqY3lvdVFiRXBLREc3UUFuS1M0\n       OFA0QXZnQnFEdmZOVWU1NGpNa2s2cjZDb1g0TGNZR0h1\n       a1pERW5lYTlrd2tFb1hrVVlTNGoxQWZiS2g0NEZ6U3VY\n       YlFxWm5qalZwVGh4Q05tbU5uMUU0cUhtc0ZrdkdvRjNG\n       TjU1Q1Brb0dmREN2eVFKZ3Ftc0ZtcGVUSlN5OXd6djRN\n       dmJxcHVBVHhyN2V5eHNHZUNXUWtjRHd1YjMyaW5HcFIz\n       cmVUZnpSSkVDQ0ZaYXJuWGRjQzVQaWRha2IxV3U4TCIs\n       Im5iZiI6MCwicHRjIjoiQVBQRU5EIiwicHJmIjpudWxs\n       LCJzY3AiOiIvIn0.leyE9w2TF28espPq6mOWziQuJny2\n       GHH_wajV6S9q4gF9SLP-i9JaX_XbkHlE1GhpQ36gSs6F\n       v4_AXSuJzDkUhnAA-oPsI5bSHl28XbobzqdmXtQ2liK-\n       Gum7kUtF1CPXlIamV0NIUlCKLlaUgFod5ZQvvA19kMHU\n       ugDGm8O3G98TSm3qLlG-eoFNVXr0NSpvLeui3kQbdBsP\n       GMykaTsUn1fNLI3oKkK6JvUIq4po6gIidTdOJDlS7y_W\n       4bdMXUQcTprtpd2QmTqwTzws9tu4GBdx7q1vz35LiG39\n       ohhRs2NKB4rxbZK2O9kX1G2xLMSETE_YT9GR04XWMnFo\n       eIodsg\"</code></pre><figcaption>Nested proof</figcaption></figure><!--kg-card-end: code--><p>You'll notice that the nested proof is encoded as a bearer token. This is because it needs to include its signature to prove that it's valid, and a JWT signature is on the content encoded this way.</p><p>This token is thus valid as long as:</p><ul><li>All token signatures are correct</li><li>The time range, potency, and scope of <code>prf</code> are greater-or-equal to the enclosing token</li><li>The outer token's <code>iss</code> field matches the <code>prf</code>'s <code>aud</code> field (chain \"to\" and \"from\" correctly)</li><li>The timestamps are valid at the present time</li></ul><h3 id=\"hashing-\">Hashing Ô∏è üèéÔ∏è</h3><p>These chains can get large, so you can optionally hash the outermost one before sending to a server. This acts as a \"content address\", meaning that if the service hasn't seen it before, it can separately request that token, but if it already has it in cache and doesn't need to get it over the network. Since hashes are much smaller than their content, this can save a lot of bandwidth on repeated requests.</p><!--kg-card-begin: code--><figure class=\"kg-card kg-code-card\"><pre><code>\"prf\": \"QmU5WJTTp9vtMN1PBJpTV9xWXbTFBcWx3qjPGuXJXtujyd\"</code></pre><figcaption>Same as the example above, but with the proof compressed to a content address</figcaption></figure><!--kg-card-end: code--><h1 id=\"conclusion\">Conclusion</h1><p>UCANs are a straightforward way of doing authorization that leverage the public key infrastructure already baked into Fission. This is essentially authorization-at-the-edge with familiar JWTs. Since the token is self-contained, it's infinitely scalable. It's also very flexible: the user can grant root access to everything, or grant a tab write access to a single object for one minute.</p><p>This article covers everything that you need to use a UCAN. For those interested in the space at a deeper level, there's a lot more background and technical design thinking that we didn't cover here. Keep an eye on <a href=\"talk.fission.codes\">our developer forum</a> for an upcoming article detailing the deeper internals!</p>","url":"https://blog.fission.codes/auth-without-backend/","canonical_url":null,"uuid":"9bd5ed02-502d-4e31-828c-6ad1fa4613b9","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5eb19b7a82ce80001ee86716","reading_time":null}},{"node":{"id":"Ghost__Post__5dcaf1bbf6c4ba001ee5c08f","title":"A Universal Hostless Substrate for a Post-Serverless Future at √òredev 2019","slug":"a-universal-hostless-substrate-for-a-post-serverless-future","featured":true,"feature_image":"https://s3.fission.codes/2019/11/fission-next-wave-of-platforms.jpg","excerpt":"Brooke was at Oredev 2019 in Malmo, Sweden and presented a talk covering the evolution of server architecture that we call \"hostless\". This also serves as a high level technical roadmap for what we're working on here at Fission.","custom_excerpt":"Brooke was at Oredev 2019 in Malmo, Sweden and presented a talk covering the evolution of server architecture that we call \"hostless\". This also serves as a high level technical roadmap for what we're working on here at Fission.","created_at_pretty":"12 November, 2019","published_at_pretty":"12 November, 2019","updated_at_pretty":"23 January, 2020","created_at":"2019-11-12T09:54:03.000-08:00","published_at":"2019-11-12T10:22:12.000-08:00","updated_at":"2020-01-22T17:44:44.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ‚ô•Œª Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"√òREDEV","slug":"oredev","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"hostless","slug":"hostless","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"serverless","slug":"serverless","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"zero-knowledge proof","slug":"zero-knowledge-proof","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"DID","slug":"did","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Brooke was at √òredev 2019 [https://oredev.org/]  in Malm√∂, Sweden and presented\na talk covering the evolution of server architecture that we call \"hostless\".\nThis also serves as a high level technical roadmap for what we're working on\nhere at Fission. We've shipped IPFS support, and will move on to identity using\nzero-knowledge proofs and DIDs, and distributed compute with WASM and smart\ncontracts.\n\nWhile those are a blizzard of next-gen technology concepts, we're integrating\nthem in such a way as to make them usable and turnkey. The outcome is a better\ndeveloper experience (DX).\n\nKey takeaways:\n\n * There has been a 60-year progression of server architecture, and there is one\n   final phase left\n * There have been recent advances in cryptography, distributed systems, and web\n   infrastructure\n * It is possible to store data and run computation anywhere, even on untrusted\n   machines\n * Remove the concept of ‚Äúlocal development‚Äù, ‚Äúproduction‚Äù, and ‚Äúdeployment‚Äù\n   entirely\n\nThe last 60 years has seen the rise and fall of several models of computing:\nmainframes, private server, shared hosting, containers, and serverless (to name\na few). We have one final phase left: ‚Äúhostless‚Äù or universal apps. By\nleveraging technologies like secure multiparty compute, the content-addressable\nweb, blockchain, and the rise of WASM, we are seeing the beginnings of a future\nliberated from specialized providers, acting on a distributed substrate of store\nand compute.\n\nWith all this in place, users fully control their own data (and it never touches\nyour servers), deployment is as simple as setting a flag on your local\nenvironment, and developers maintain zero infrastructure.\n\nCome learn about what is being built today for the next wave of computing, how\nwe evolve past the serverless paradigm, and how it can make life simpler for\ndevelopers and end users!\n\nThe slides are available on Notist\n[https://noti.st/expede/I79QlQ/a-universal-hostless-substrate-for-a-post-serverless-future]\n.","html":"<p>Brooke was at <a href=\"https://oredev.org/\">√òredev 2019</a> in Malm√∂, Sweden and presented a talk covering the evolution of server architecture that we call \"hostless\". This also serves as a high level technical roadmap for what we're working on here at Fission. We've shipped IPFS support, and will move on to identity using zero-knowledge proofs and DIDs, and distributed compute with WASM and smart contracts.</p><p>While those are a blizzard of next-gen technology concepts, we're integrating them in such a way as to make them usable and turnkey. The outcome is a better developer experience (DX).</p><p>Key takeaways:</p><ul><li>There has been a 60-year progression of server architecture, and there is one final phase left</li><li>There have been recent advances in cryptography, distributed systems, and web infrastructure</li><li>It is possible to store data and run computation <strong>anywhere</strong>, even on untrusted machines</li><li>Remove the concept of ‚Äúlocal development‚Äù, ‚Äúproduction‚Äù, and ‚Äúdeployment‚Äù entirely</li></ul><p>The last 60 years has seen the rise and fall of several models of computing: mainframes, private server, shared hosting, containers, and serverless (to name a few). We have one final phase left: ‚Äúhostless‚Äù or universal apps. By leveraging technologies like secure multiparty compute, the content-addressable web, blockchain, and the rise of WASM, we are seeing the beginnings of a future liberated from specialized providers, acting on a distributed substrate of store and compute.</p><p>With all this in place, users fully control their own data (and it never touches your servers), deployment is as simple as setting a flag on your local environment, and developers maintain zero infrastructure.</p><p>Come learn about what is being built today for the next wave of computing, how we evolve past the serverless paradigm, and how it can make life simpler for developers and end users!</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/372223208?app_id=122963\" width=\"426\" height=\"240\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Brooklyn Zelenka - A Universal &amp;quot;Hostless&amp;quot; Substrate for a Post-Serverless Futur | &amp;Oslash;redev 2019\"></iframe></figure><!--kg-card-end: embed--><p>The slides are <a href=\"https://noti.st/expede/I79QlQ/a-universal-hostless-substrate-for-a-post-serverless-future\">available on Notist</a>.</p>","url":"https://blog.fission.codes/a-universal-hostless-substrate-for-a-post-serverless-future/","canonical_url":null,"uuid":"1c03fb1b-ae5b-4b66-ab39-b87e9c9c29c2","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dcaf1bbf6c4ba001ee5c08f","reading_time":null}},{"node":{"id":"Ghost__Post__5d0d2930fc1401001e491678","title":"Open Collective Interview with Brooke","slug":"open-collective-brooke-interview-witchcraft","featured":false,"feature_image":"https://s3.fission.codes/2019/06/brooke-talking.jpeg","excerpt":"Alanna Irving from the Open Collective team interviewed Brooke on Witchcraft:\nthe magic of math, functional programming, and community\n[https://medium.com/open-collective/witchcraft-the-magic-of-math-functional-programming-and-community-b45bc7213ff8]\n.\n\nDid you know she started in music composition?\n\n> Programming absolutely scratches the same part of my brain as music composition.\nInstead of writing instructions for an instrumentalist, you‚Äôre writing it for a\ncomputer, but the parallels are ver","custom_excerpt":null,"created_at_pretty":"21 June, 2019","published_at_pretty":"21 June, 2019","updated_at_pretty":"21 June, 2019","created_at":"2019-06-21T12:00:00.000-07:00","published_at":"2019-06-21T12:10:47.000-07:00","updated_at":"2019-06-21T12:10:47.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ‚ô•Œª Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Press","slug":"press","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Press","slug":"press","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Open Collective","slug":"open-collective","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Interview","slug":"interview","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Witchcraft","slug":"witchcraft","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"open source","slug":"open-source","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Alanna Irving from the Open Collective team interviewed Brooke on Witchcraft:\nthe magic of math, functional programming, and community\n[https://medium.com/open-collective/witchcraft-the-magic-of-math-functional-programming-and-community-b45bc7213ff8]\n.\n\nDid you know she started in music composition?\n\n> Programming absolutely scratches the same part of my brain as music composition.\nInstead of writing instructions for an instrumentalist, you‚Äôre writing it for a\ncomputer, but the parallels are very clear. All but one person in my composition\ncohort (who became a professor of music) are now programmers, because it was a\ncrash course in that way of thinking.\nIt's a great overview of Brooke's background, her love of functional programming\nand math, and the Witchcraft library for Elixir\n[https://github.com/witchcrafters/witchcraft].","html":"<p>Alanna Irving from the Open Collective team <a href=\"https://medium.com/open-collective/witchcraft-the-magic-of-math-functional-programming-and-community-b45bc7213ff8\">interviewed Brooke on Witchcraft: the magic of math, functional programming, and community</a>.</p><p>Did you know she started in music composition?</p><blockquote>Programming absolutely scratches the same part of my brain as music composition. Instead of writing instructions for an instrumentalist, you‚Äôre writing it for a computer, but the parallels are very clear. All but one person in my composition cohort (who became a professor of music) are now programmers, because it was a crash course in that way of thinking.</blockquote><p>It's a great overview of Brooke's background, her love of functional programming and math, and the <a href=\"https://github.com/witchcrafters/witchcraft\">Witchcraft library for Elixir</a>. </p>","url":"https://blog.fission.codes/open-collective-brooke-interview-witchcraft/","canonical_url":null,"uuid":"aafe21b8-c7cf-45d3-a45d-f6c7e2f39466","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d0d2930fc1401001e491678","reading_time":null}},{"node":{"id":"Ghost__Post__5d0d2680fc1401001e491645","title":"Brooke presenting at √òREDEV 2019 in Malm√∂, Sweden","slug":"brooke-presenting-at-oredev-2019-in-malmo-sweden","featured":false,"feature_image":"https://s3.fission.codes/2019/06/Screenshot-2019-06-21-11.50.56.png","excerpt":"We're pleased to announce that Brooke [/author/expede/]  will be presenting at\nthe √òREDEV Developer Conference [https://oredev.org/]  in Malm√∂, Sweden,\nNovember 6 - 8th, 2019.\n\nHer talks in the Polyglot & Fringe sections will cover her work with Elixir and\nHaskell, as well as decentralized web work with IPFS and beyond.\n\nEarly bird tickets are available now ¬ª [https://oredev.org/tickets/]\n\nWe keep track of interesting developer events and those we are organizing and\nspeaking at in our Events Cal","custom_excerpt":null,"created_at_pretty":"21 June, 2019","published_at_pretty":"21 June, 2019","updated_at_pretty":"21 June, 2019","created_at":"2019-06-21T11:48:32.000-07:00","published_at":"2019-06-21T11:59:42.000-07:00","updated_at":"2019-06-21T11:59:42.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ‚ô•Œª Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Events","slug":"event","description":"Events in the decentralized web, p2p, & Ethereum community.","feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Events","slug":"event","description":"Events in the decentralized web, p2p, & Ethereum community.","feature_image":null,"meta_description":null,"meta_title":null},{"name":"Sweden","slug":"sweden","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Malm√∂","slug":"malmo","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"√òREDEV","slug":"oredev","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"speaking","slug":"speaking","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We're pleased to announce that Brooke [/author/expede/]  will be presenting at\nthe √òREDEV Developer Conference [https://oredev.org/]  in Malm√∂, Sweden,\nNovember 6 - 8th, 2019.\n\nHer talks in the Polyglot & Fringe sections will cover her work with Elixir and\nHaskell, as well as decentralized web work with IPFS and beyond.\n\nEarly bird tickets are available now ¬ª [https://oredev.org/tickets/]\n\nWe keep track of interesting developer events and those we are organizing and\nspeaking at in our Events Calendar\n[https://talk.fission.codes/t/events-calendar/108].","html":"<p>We're pleased to announce that <a href=\"/author/expede/\">Brooke</a> will be presenting at the <a href=\"https://oredev.org/\">√òREDEV Developer Conference</a> in Malm√∂, Sweden, November 6 - 8th, 2019.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/06/brooke-oredev.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>Her talks in the Polyglot &amp; Fringe sections will cover her work with Elixir and Haskell, as well as decentralized web work with IPFS and beyond.</p><p><a href=\"https://oredev.org/tickets/\">Early bird tickets are available now ¬ª</a></p><p>We keep track of interesting developer events and those we are organizing and speaking at in our <a href=\"https://talk.fission.codes/t/events-calendar/108\">Events Calendar</a>.</p>","url":"https://blog.fission.codes/brooke-presenting-at-oredev-2019-in-malmo-sweden/","canonical_url":null,"uuid":"40527eb9-aecc-465e-aae3-5ac57260140c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d0d2680fc1401001e491645","reading_time":null}},{"node":{"id":"Ghost__Post__5cf0b7d365698d001ede6c39","title":"Presentations at the Seattle Ethereum Meetup","slug":"presentations-at-the-seattle-ethereum-meetup","featured":false,"feature_image":"https://s3.fission.codes/2019/06/B24C82B0-2211-4338-AFFA-AC530E0809B6.jpeg","excerpt":"Boris & Brooke‚Äôs presentations at the Seattle Ethereum Meetup.","custom_excerpt":"Boris & Brooke‚Äôs presentations at the Seattle Ethereum Meetup.","created_at_pretty":"31 May, 2019","published_at_pretty":"06 June, 2019","updated_at_pretty":"06 June, 2019","created_at":"2019-05-30T22:12:51.000-07:00","published_at":"2019-06-05T19:05:11.000-07:00","updated_at":"2019-06-05T19:05:11.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ‚ô•Œª Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"Seattle","slug":"seattle","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Events","slug":"event","description":"Events in the decentralized web, p2p, & Ethereum community.","feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"Ethereum","slug":"ethereum","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"On Tuesday, May 28th, the Seattle Ethereum Meetup invited us to present\n[https://blog.fission.codes/fission-seattle-ethereum-meetup-may-2019/]. The\nvenue was the very cool Ada's Technical Books, in their Lab bar\n[https://thelab.adasbooks.com/the-lab-at-adas-data/]. \n\nThanks to Megan, Joshua and everyone that helped out with the meetup, and to\nAda's and Gaudium Capital [https://gaudiumcapital.com]  for sponsoring. The\nSeattle community is super welcoming and had great energy.\n\nAs well as talks, the evening featured burner wallets, and Megan did a great\nwrite up of the event and onboarding people using these wallets\n[https://medium.com/@megan_knab/ethereums-newest-40-users-and-thoughts-on-the-next-10-000-a-quick-burner-wallet-case-study-2adb94212214]\n.\n\nFirst up was Kurt Barry from MakerDAO with a stablecoin primer, focusing on DAI,\nand then Boris and Brooke presented. We're experimenting with using Notist for\nsharing our slide decks [https://noti.st/events/u3f9y1], and we've got brief\noverviews below.\n\nOpen Source & Growing Ethereum\nBoris presented on some of the history and basis of open source, and went on to\ndescribe the Ethereum Stack, Istanbul roadmap, and how to get involved.\n\nIPFS 101 & Introducing FISSION\nBrooke gave an overview of how IPFS works, and described what we're building at\nFISSION.\n\nIf you're interested in being an alpha tester of FISSION's IPFS services, sign\nup on our Product Hunt page at tools.fission.codes [https://tools.fission.codes]\n, or follow all our stuff by subscribing.","html":"<p>On Tuesday, May 28th, the <a href=\"https://blog.fission.codes/fission-seattle-ethereum-meetup-may-2019/\">Seattle Ethereum Meetup invited us to present</a>. The venue was the very cool <a href=\"https://thelab.adasbooks.com/the-lab-at-adas-data/\">Ada's Technical Books, in their Lab bar</a>. </p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/06/0E25061C-3984-4778-A872-690899EB5AEA.jpeg\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>Thanks to Megan, Joshua and everyone that helped out with the meetup, and to Ada's and <a href=\"https://gaudiumcapital.com\">Gaudium Capital</a> for sponsoring. The Seattle community is super welcoming and had great energy.</p><p>As well as talks, the evening featured burner wallets, and <a href=\"https://medium.com/@megan_knab/ethereums-newest-40-users-and-thoughts-on-the-next-10-000-a-quick-burner-wallet-case-study-2adb94212214\">Megan did a great write up of the event and onboarding people using these wallets</a>.</p><p>First up was Kurt Barry from MakerDAO with a stablecoin primer, focusing on DAI, and then Boris and Brooke presented. We're experimenting with using <a href=\"https://noti.st/events/u3f9y1\">Notist for sharing our slide decks</a>, and we've got brief overviews below.</p><h2 id=\"open-source-growing-ethereum\">Open Source &amp; Growing Ethereum</h2><p>Boris presented on some of the history and basis of open source, and went on to describe the Ethereum Stack, Istanbul roadmap, and how to get involved.</p><!--kg-card-begin: gallery--><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://s3.fission.codes/2019/06/A4A2CDF9-F467-4BD1-9C70-E2C8540C8F64.jpeg\" width=\"2244\" height=\"1327\"></div><div class=\"kg-gallery-image\"><img src=\"https://s3.fission.codes/2019/06/B4133F35-52A6-49EF-834F-A568A0CE7923.jpeg\" width=\"2346\" height=\"1317\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://s3.fission.codes/2019/06/AC8DA537-050B-43E0-81AB-866D4A6B0370.jpeg\" width=\"2329\" height=\"1295\"></div><div class=\"kg-gallery-image\"><img src=\"https://s3.fission.codes/2019/06/16F9F7F1-A7BA-461F-9AB9-D8BDCA15EF5A.jpeg\" width=\"2343\" height=\"1297\"></div></div></div></figure><!--kg-card-end: gallery--><h2 id=\"ipfs-101-introducing-fission\">IPFS 101 &amp; Introducing FISSION</h2><p>Brooke gave an overview of how IPFS works, and described what we're building at FISSION.</p><!--kg-card-begin: gallery--><figure class=\"kg-card kg-gallery-card kg-width-wide\"><div class=\"kg-gallery-container\"><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://s3.fission.codes/2019/06/F42D1A91-D8CB-4DB0-B3AF-E9622DB06C7C.jpeg\" width=\"2326\" height=\"1288\"></div><div class=\"kg-gallery-image\"><img src=\"https://s3.fission.codes/2019/06/9917293C-47D9-40E3-A75A-3B69A19F72BA.jpeg\" width=\"2326\" height=\"1289\"></div></div><div class=\"kg-gallery-row\"><div class=\"kg-gallery-image\"><img src=\"https://s3.fission.codes/2019/06/ED60812A-76B3-4E63-A5B9-917472758A92.jpeg\" width=\"2323\" height=\"1295\"></div><div class=\"kg-gallery-image\"><img src=\"https://s3.fission.codes/2019/06/B0EEBBEA-95FC-4ECF-9974-76103F5B2045.jpeg\" width=\"2305\" height=\"1297\"></div></div></div></figure><!--kg-card-end: gallery--><p>If you're interested in being an alpha tester of FISSION's IPFS services, sign up on our Product Hunt page at <a href=\"https://tools.fission.codes\">tools.fission.codes</a>, or follow all our stuff by <a href=\"#subscribe\">subscribing</a>.</p>","url":"https://blog.fission.codes/presentations-at-the-seattle-ethereum-meetup/","canonical_url":null,"uuid":"6ff6025a-8849-404d-80c5-eae3046c6d44","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5cf0b7d365698d001ede6c39","reading_time":null}},{"node":{"id":"Ghost__Post__5cd632bda0118e001e19f759","title":"We're FISSION","slug":"we-re-fission","featured":false,"feature_image":"https://s3.fission.codes/2019/05/9D1C4642-3337-4719-854E-450E7B841B6D.jpeg","excerpt":"We‚Äôre going to be using the FISSION brand for all of the public-facing work we\ndo. FISSION components, from standards to code, are designed to work together\nand build on each other.\n\nWe‚Äôve had a ton of great conversations with people building open source and\ndecentralized web code around the world. There is so much left to build and\nimprove, from low-level virtual machines [https://fission.codes/evm-evolution/],\nto making sure that end users can use their native language\n[https://fission.codes/f","custom_excerpt":null,"created_at_pretty":"07 May, 2019","published_at_pretty":"01 February, 2019","updated_at_pretty":"14 May, 2019","created_at":"2019-05-07T09:49:00.000-07:00","published_at":"2019-02-01T09:48:00.000-08:00","updated_at":"2019-05-13T17:18:32.000-07:00","meta_title":null,"meta_description":"FISSION components, from standards to code, are designed to work together and build on each other. We're using the brand for all of the public-facing work we do.","og_description":"Introducing the new FISSION brand: the components we build, from standards to code, are designed to work together and build on each other.","og_image":null,"og_title":null,"twitter_description":"Introducing the new FISSION brand: the components we build, from standards to code, are designed to work together and build on each other.","twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ‚ô•Œª Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"FISSION","slug":"fission","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"FISSION","slug":"fission","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We‚Äôre going to be using the FISSION brand for all of the public-facing work we\ndo. FISSION components, from standards to code, are designed to work together\nand build on each other.\n\nWe‚Äôve had a ton of great conversations with people building open source and\ndecentralized web code around the world. There is so much left to build and\nimprove, from low-level virtual machines [https://fission.codes/evm-evolution/],\nto making sure that end users can use their native language\n[https://fission.codes/fission-translate/].\n\nWe do a ton of community work [https://fission.codes/community/]  that we really\nenjoy and will continue to try and add value to all of the ecosystems we‚Äôre part\nof.\n\nFor FISSION, we‚Äôre building out connected components: smart contracts, command\nline tools, IPFS, and many other Web3 elements need to just work. FISSION will\nbe opinionated, and provide answers to the questions that developers have every\nday about which pieces of a modern decentralized web stack work together.\n\nCheck out our brand page [https://fission.codes/about/brand]  for all of our\nFISSION elements, and let us know if you want stickers\n[https://twitter.com/expede/status/1085678195012071424]!","html":"<p>We‚Äôre going to be using the FISSION brand for all of the public-facing work we do. FISSION components, from standards to code, are designed to work together and build on each other.</p><p>We‚Äôve had a ton of great conversations with people building open source and decentralized web code around the world. There is so much left to build and improve, from <a href=\"https://fission.codes/evm-evolution/\">low-level virtual machines</a>, to <a href=\"https://fission.codes/fission-translate/\">making sure that end users can use their native language</a>.</p><p>We do a ton of <a href=\"https://fission.codes/community/\">community work</a> that we really enjoy and will continue to try and add value to all of the ecosystems we‚Äôre part of.</p><p>For FISSION, we‚Äôre building out connected components: smart contracts, command line tools, IPFS, and many other Web3 elements need to just work. FISSION will be opinionated, and provide answers to the questions that developers have every day about which pieces of a modern decentralized web stack work together.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/05/265F56C3-5888-41AF-B49C-51F9DBEBA044.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>Check out our <a href=\"https://fission.codes/about/brand\">brand page</a> for all of our FISSION elements, and <a href=\"https://twitter.com/expede/status/1085678195012071424\">let us know if you want stickers</a>!</p>","url":"https://blog.fission.codes/we-re-fission/","canonical_url":null,"uuid":"92e22a92-7361-42c4-8691-a9de80866e30","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5cd1b6fca82dbc00c0c7ef43","reading_time":null}}]}},"pageContext":{"slug":"expede","pageNumber":0,"humanPageNumber":1,"skip":0,"limit":12,"numberOfPages":1,"previousPagePath":"","nextPagePath":""}},"staticQueryHashes":["1752937443","2358152166","2561578252","2731221146","4145280475"]}