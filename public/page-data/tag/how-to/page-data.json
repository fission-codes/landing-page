{"componentChunkName":"component---src-templates-tag-js","path":"/tag/how-to/","result":{"data":{"ghostTag":{"slug":"how-to","name":"How To","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__60210daa2dc76c001e5a3301","title":"Headless Ghost and Fission","slug":"headless-ghost-blog-fission","featured":false,"feature_image":"https://images.unsplash.com/photo-1545062990-4a95e8e4b96d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxMTc3M3wwfDF8c2VhcmNofDF8fGdob3N0fGVufDB8fHw&ixlib=rb-1.2.1&q=80&w=1080","localImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1080'%20height='720'%20viewBox='0%200%201080%20720'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20360v360h1081V0H0v360m550-179v3c0%201-2%202-6%201l-1%202-2%204-3%203-3%204c-1%202-1%202%201%202l2-1h1c0%202-6%207-8%207s-1-1%201-4l1-2c-1%200-2-1-1-2l-1-3c-3-1-4%201-2%203v3c-5%200-8%203-8%207l-1%204c-1%200-2-1-2-3%200-1%200-2%201-1l1-1-1-2c-1%201-5-2-5-3l1-2%201-1c0-2%202-2%203-1%201%203%205%203%206%201%200-3-2-5-4-3-1%202-1%202-1%200s-1-2-3-2l-4-2-5-1-12-2c-1-2-13%201-12%203l-3%201h-11l-5-1c-3%200-4%201-3%202%200%201%200%202-3%202-2%200-3%201-3%203l-4%203c-3%200-4%201-5%203l-3%202-2%201%201%201c3%200%203%202%200%202l-1%203c0%202-1%202-2%202l-2%202-3%203-3%202c-1%202%200%203%202%202l2-1-1%202c-3%201-8%208-7%2010l-1%203v1l2%203c0%202%201%203%202%203l2%201h4c2-1%203-1%203%201l-3%201c-3%200-3%200-3%202l-1%204-2%203-1%201-2%205c-2%206-16%2018-24%2022l-5%204-5%201c-1%201-3%201-3%203l-4%203c-3%201-3%2013%200%2013l1%202v6c-1%2012%200%2025%202%2026%201%202%202%202%202%201l2-3c2-1%202-2%201-5v-4l-1-6c-2-8-1-34%201-30%201%203%203%202%203%200-1-2%200-3%204-4l6-3%2012-9%2013-10%206-5%2013-8c3-3%207-4%2013-4l7-2c4-3%2017-3%2018-1s-1%203-2%202l-6-1%202%201%202%201c0%203%205%203%206%202l2-2%2011%206s1%202%203%202l5%203%205%201%202%202c2%202%203%203%206%202%203%200%204%200%203%201s-1%201%202%201l4%201%202%201%206%202%205%201h2l-3%201c-3%201-6%203-14%2010-3%203-6%204-9%205l-6%201-4-2c-4-1-5%200-5%207%200%205%204%2021%206%2022l1%202c0%202%203%201%205-2l2-2c0%203%202%202%203-1l2-3%202-1%202-1c1%200%202-1%202-4l2-8c1-3%201-3%202-1l2%202c2%201%203%207%201%207l-2%202-2%201v1l-1%201c-1%200-4%204-7%2011-5%209-7%2012-8%209h-2c-1%201-1%202%201%203s1%202-2%201c-2%200-2%200%200%201s2%201-4%207c-3%202-5%202-4%200%200-2-4-6-4-5l-7%205-7%205-1%201-4%202-7%204a2870%202870%200%2000-38%2011l-18-1-21-1c-5-2-6-2-6%203l-2%204-1%202h1c1-1%208-1%2023%201%2011%201%2012%201%2019-1%209-3%2017-3%2016%202s3%204%204-2c1-4%206-6%2015-6l7-1h1l2%203v3l-1%202c1%202-3%205-6%205s-4%201-4%203l-2%203-1%204c0%203%200%203-1%202h-4l4%204c5%204%206%205%205%208l-4-2c-3-4-11-6-11-3l-1%201h-1l-2%201c-2%200-2%202%200%203l4%202-2%202-4%202c-2%201-2%201%200%203%203%202%205%206%206%2013%202%207%201%209-2%205-4-6-5-2-2%206%202%206%205%206%204%201l1-3c1%200%202%205%201%207l-2%2010c-1%208%200%208%202%2011%203%204%204%204%204%201s3-9%205-10c1%200%203-2%204-5%203-6%204-5%201%201-1%204-2%205-1%206l3%203c2%204%205%204%207%201%202-4%204-5%207-4%204%200%204%202%201%202l-3%202-1%203-3%205-2%204-1%201-1%202c-2%201-2%208-1%208l2-1c0-2%205-1%206%201s3%201%203-1l2-3%201-1c-3-2-6-12-3-10l1-2%201-2%201%201c0%201%208-3%209-5h1c1%202-3%2011-5%2013l-2%203-1%201-1%201-1%203-1%202h2c2-2%202-2%203-1%201%202%2011%203%2011%201l1-1%203-1%201-10v-10l1-1%201-4-1-3c-2-1-7%205-7%206l-1%201c-3%201-3-1-1-5%203-5%205-7%209-5%203%202%204%206%203%207-2%201%200%202%202%201l2%201%202%201%204-6c4-8%208-10%2013-5l4%203c2%200%201-2-2-3l-2-3-1-3c-3-2-3-3%201-3%202%201%203%200%201-1l1-1c3-1%203%200%203%202%200%201%200%202%201%201v6l1%207c2%201%202%201%203-1%202-4%205-8%205-6%200%201%200%202%201%201v-4c2-1%206%201%206%202%201%202%200%205-1%205-2-1-7%201-7%203-2%205-3%205-5%203h-4l1%201v2c-1%201-1%202%201%203%202%200%202%201%201%202-1%204-3%207-4%206l-1%202%201%201v2c-1%202%201%204%203%204l3%201%205%201%204%201%203-7c2-6%202-7%200-8l-3-2-3-1h-1c-1-1%200-1%201-1%202%200%205-3%203-4-2-3-2-8-1-8l2%202%202%201v-3l1-1c1%201%201%200%201-1l1%201h2l-1-3-1-2-1-1c-1%200-4-5-3-8l1-1%201%201%201-3v-5l1-4c-1-3%201-6%202-4l1%201v-3l6-6%203-2h-4l-6%201-4%203c-2%201-4%203-4%205-1%201-1%201-1-2%201-3%201-4-1-4-4%200-8%202-8%205l-1%202-1-1h-2c-1%200-1%201%201%202l1%201h-2l-1%202v7l-1%201-1%204v-14l-1-1c2-2%202-7%201-7l-1%201c1%201%200%201%200%200l-2%201-1%201c-1-1-2%200-3%201l-1%203v-3c0-3-4-5-6-4l-2%201c-1-1%202-3%205-3l3-1c1-2%2013-6%2018-7%204-1%203-3-1-3l-12%204c-10%204-14%204-20%201-8-4-11-13-8-23l2-11%203-11c2-4%202-6%201-7v-2l1-3c-1-1%200-3%202-4%204-2%2013-19%2015-26%200-4%207-10%2011-10%204-1%205-3%201-4-2%200-2%200%200-1s3-3%201-3%200-9%204-14c2-3%202-4%202-8-1-5-1-5%201-7%203-1%206-7%205-10l1-1%205-3%205-3%203-4%203-3%203-1c2-3%202-3%200-5-1-2-1-2%202-3l3-3c0-2%200-2%201-1l2%201c1%200%202%201%201%203l1%203c2%200%202-2%202-6%200-1%200-2%201-1%203%201%203-2%201-4l-1-2c2%200%203-2%201-4l-1-5-1-4-1-2c0-2-1-3-4-4-1-1-2-1-1-2h2c2%202%204%200%203-3%200-7-1-7-3-8-2%200-3-1-3-2h-1c0%204-2%202-2-2s0-4-2-3l-2%201%201-2c2-1%202-1-6-3h-4c0%202-3-2-3-5l-1-3h-14m-43%2054c-1%202-7%203-13%201-3-1-8%200-9%202h6l7%201%206%202c5%201%2010%203%2012%205%201%202%204%201%204-2%201-5-2-8-7-8l-5-2c-1-1-1-1-1%201m15%208c-2%203-1%205%205%208l7%203%202%201%201-1v-9c2-2-1-1-3%201-3%202-4%203-4%201l-2-1-3%201-1%201v-3c0-3%200-4-2-2m172%2062l-3%203v2l-1%202-1%202-1%202%201%201c2-2%203%204%203%2019l1%2016c3%202%203%201%203-5-1-4-1-8%201-13l2-11%201-7c2-3%200-5-3-6-2%200-3-2-1-2l1-3c0-2-1-2-3%200m-10%2016l-1%204v7l1%2010c0%204%201%205%203%204v-11c-2-3-2-4%200-5%203-3%201-11-2-11l-1%202m-127%200l1%204%202%204%203%205%202%204c0%202%205%2010%206%2010%202%200%201-6-1-8l-6-10c-5-10-6-11-7-9m23%2041l1%205%201%203%202%205c1%201%202%204%200%203l-1%202c3%206%204%2012%203%2016l-1%206c-1%202-2%206-4%207-4%204-4%206-1%203%208-5%2011-26%206-38a57%2057%200%2001-2-7l-1-4c-1-5-3-5-3-1m32%201l-1%201%201%202c0%204%202%206%205%204l2-1-1%202v4c1%201%202%200%203-1l4-1%204-1c2-2%202-4%200-4-1%200-2-1-1-2%200-3-9-5-16-3m-209%2020h-3c-3%200-6%202-6%204s-2%203-3%203c-2%200-2%201-2%203s0%203-2%204c-5%202-3%206%204%206l4%203%203%202%204%202c4%203%2015%202%2017-1l2-4%202-2%201-2%201-2c3-3-4-10-8-9l-3-1-3-2-2-2-2-1-2-1-1-1-1%201m194%2040v2l-1%201-1-1c0-2-2%200-3%204l-1%203%201%206v4l1%206v3l-2-3-2-1-2%201v2l1%201%201%202c2%205%205%205%2011-1l5-4-2-5c-2-4-3-7-2-9%201-6-3-14-4-11m-22%201l-3%205-2%203-1%201-1%202v5l1%204%201%206%201%202%201%203c0%202%201%203%202%203l1-4%202-7c2-2%203-5%202-5l1-2%201-1-1-2-1-7v-5h-1c0-2-1-2-3-1m6%2026l-3%206-3%208c-2%203-2%2024%200%2023l1%201c0%203%205%200%207-3l2-5%201-5%201-6-1-6c-4-6-4-12-1-11%202%200%202%200%201-1-2-2-2-2-5-1m-52%209c-2%203-4%205-5%204l-2%201-2%202c-3%200-1%202%202%201%203%200%203%201-2%206l-4%208v4h10c11%200%2012-1%2011-9s-2-19-1-20l-2-2-5%205m-61%2016c-4%205-5%207-5%209l2%206-1%203-1%201%201%202c1%200%204-4%204-6s1-2%203-2%203-1%203-3l1-5v-2c-2-1-2-7-1-9v-1l-6%207m-9-2l-3%206-3%205c-2%203-3%207-1%207%204%200%208-4%208-7%201-4%203-8%204-7%201%200%202-2%201-5s-3-3-6%201m69%2020h-4c-4%200-5%201-4%206l-1%203v1l2%202-1%201v1h1l1%202c0%203%203%2010%204%2010l1-3c0-3%200-3%202-3%203%200%204-1%203-5l-1-3h-1l1-2c3-1%202-10-1-11l-2%201m18%200v6c-2%201-3%202-1%202%202-1%202%200%202%201l1%206%201%202c-1%202%201%206%202%205l2-9v-10c1-3%200-4-4-4l-3%201m-68%201l1%202v1l1%205c2%205%203%209%201%206v3c0%206%201%207%202%206l2%201c0%203%202%200%202-4%201-3%200-4-1-4-2%200-2%200-1-1v-1l2-2v-5c2%200%200-3-2-3s-5-2-5-4l-1-1-1%201m-55%205l2%2010%201%2013%203%2010%201%204%201%202%202%203v-14l-3-25c0-5-1-7-4-7s-3%200-3%204m84%202c0%202%200%202-1%201-2-1-4%201-4%204v2c-1%201-1%201%201%201v1l-1%202-2%201-3%201h-1l-1%201%201%202%203%202c2%202%206%201%209-2l2-1%202-2c1-1%201-1%201%201v2l1-2%201-1%201-1c2-1%202-1%202%203-1%204-1%205%201%205s2%200%201-2v-5c0-2-1-3-2-3l-1-1%201-1v-1c-1-2-2-1-2%202%200%202-2%203-2%201l-2-1v1l-1%201c-2%200%200-5%202-7%202-1%200-6-1-6v2l-1%202-1-1-1-2c-2-1-2%200-2%201m-29%2018c0%203-4%206-6%205l-2%201h2l1%201-1%201-2%201c1%203%200%204-1%203l-1-2-1-4-1-1c0-3%200-4-1-2l-2%202c-1-1-1%200-1%201l-2%205c-2%203-2%204-1%209s3%204%203-2l1-7c1-1%201-1%201%201s2%204%203%202h2v2l1%2021-1%202c-1%202%201%2010%202%2011s0%201-2%201c-3-1-4%201-2%205%201%202%201%2010-1%209v3c0%202%200%202-1%201h-1l-1%202c0%202%200%202%201%201l3%204v4l1%202%202-2c1-1%201-1%201%201l1%202%203%202%202%201%205%204c3%203%205%204%208%204l10-1h6l7-2%206-3%201-1c0%202%200%202%202%201l4-2h3c-1%202%202%203%204%202s2-1%200-1c-4-1-3-2%201-3%204%200%207-2%205-3-1-1%200-1%202-1%205%200%207-1%2010-3%204-3%206-8%204-11v-3l2-4%202-3%201-1%201-7c1%201%202-2%203-8h1v10l3-5%202-6%201-3c2-2%202-2%202%200l1%201%201%202-1%202%201%202c1%203%202%203%201%207s-2%204-2%202c-1-2-1-2-1%200l-1%204v1l-1%204-1%204v1l1%202%201%201%202%202c2%202%203%206%202%206l-1-1c-1-3-3-2-3%201%200%204%201%205%204%205h2c1%202%203%202%209%200h6l2%201-1-2c-1-1-1-1%201-1l2-1%202-1%201%202c0%203%204%203%207%200l4-2v-1c0-2-1-2-2-1-2%201-2%201-2-1%201-2%200-3-1-1h-2c-1-1-1-1-1%201%200%203-2%203-2-1l-3-3c-2%200-4-2-2-3h1l1%202c2%200%201-2-1-4s-2-3-2-5v-4l2-3%201-1c1%200%202-1%201-2l1-1c1%201%204-1%204-3l1-1%202-2%201-1%202%201c2%200%202-4%200-4l-1-3c1-1%200-2-1-2-2-2-5-1-5%200l-1-2c-1-2-2-4-1-6%201-5%201-6-2-7-4-2-3-2-5%206l-3%209-1%203c0%201-2%202-7%201l-1-3c-1-3-3-3-3-1l-1%205-1-3v-4l1-2c0-1%200-2%201-1l1-2-2-3c-2%200-2%200-1%202l-1%201h-2c-1%201-1%200-1-1l1-2c2%200%203-2%202-5v-3l-3%202-2%201-1-2c-1%200-2%203-1%208%200%204%200%205-1%204-1-2-3%200-3%203l-2%201h-5l-2%201c0%202-3%205-4%204l1-3v-2c-2-2-3-7-2-10%201-2-1-4-5-4-2%200-2%200-1%201s1%201-1%201-3%201-3%202v1l-1%202c-2%201-2%202-1%203v4c0%202%200%202-1%200-1-1-1-1-1%201h-2l-1-1c0%201-1%201-2-1-1-1-2-3-1-4l-3-1c-1%200-2%200-1-1%202-1%201-3-2-3s-4%200-5-3c-2-4-1-4%202%200l4%202-1-1c-1-2-1-2%201-2h3l2-2c1-3%205-7%207-7%203%200%203%202%202%205-1%202-1%202%201%202l4-1a326%20326%200%200010-2c4-1%2012-7%209-7l-8%204-2-1h-2l-2%201c-2%200-2%200-1-1l2-1-4-3-4-1c-3-1-3-1-5%201-3%203-11%205-12%203l-2-1c-3%200-4%200-2-1v-3c0-2-5-1-8%202l-2%202h2c1-1%202-1%201%201l1%204v1l-1%201-2%208v3l1%201-1%201h-1l-3%201c-4%200-6-1-5-2l-2-2-2-1h2l2-2-7-3h-1l1-1v-3c-1-2-1-2-2%200-1%201-1%201-1-1l-1-4%201-2%201%201c0%202%203%205%207%207h3v-1c1%200%208-6%207-7l-2%201-6%201c-4%201-4%201-3-2%200-2-1-3-2-3l-1-1v-2l-1-1v-2c-2-1-2-1-3%201%200%202-1%203-2%203l-1%201-2%201c-1%200-2-1-1-2l-1-1h-3c-1-1-1-1-1%201l2%203c2%201%202%202%201%202v3c-2%202-4%200-4-3%200-1%200-2-1-1l-1%201v-1c1-2%201-5-1-7l-1-1m23%2056l-2%203c-1%202-2%202-3%200h-5c-2-1-6%200-4%201l4%201%204%201%203%202c2%200%202%200%201-1v-2c2-1%202%200%202%201l1%202v-1c0-1%200-2%202-1l3-1%206-2c3-1%204-2%202-2l-3-1-7-1c-3%200-5%200-4%201'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/1ac0070c802948ba48a1a95340eebfe7/29ba9/photo-1545062990-4a95e8e4b96d.jpg","srcSet":"/static/1ac0070c802948ba48a1a95340eebfe7/272de/photo-1545062990-4a95e8e4b96d.jpg 270w,\n/static/1ac0070c802948ba48a1a95340eebfe7/a5ccf/photo-1545062990-4a95e8e4b96d.jpg 540w,\n/static/1ac0070c802948ba48a1a95340eebfe7/29ba9/photo-1545062990-4a95e8e4b96d.jpg 1080w","sizes":"(min-width: 1080px) 1080px, 100vw"},"sources":[{"srcSet":"/static/1ac0070c802948ba48a1a95340eebfe7/f9186/photo-1545062990-4a95e8e4b96d.webp 270w,\n/static/1ac0070c802948ba48a1a95340eebfe7/25c40/photo-1545062990-4a95e8e4b96d.webp 540w,\n/static/1ac0070c802948ba48a1a95340eebfe7/984df/photo-1545062990-4a95e8e4b96d.webp 1080w","type":"image/webp","sizes":"(min-width: 1080px) 1080px, 100vw"}]},"width":1080,"height":720}}},"excerpt":"Learn about the Headless experiments at Fission, and walk through the tutorial to build a Next.js blog powered by Headless Ghost and Fission.","custom_excerpt":"Learn about the Headless experiments at Fission, and walk through the tutorial to build a Next.js blog powered by Headless Ghost and Fission.","created_at_pretty":"08 February, 2021","published_at_pretty":"08 February, 2021","updated_at_pretty":"08 February, 2021","created_at":"2021-02-08T02:08:41.000-08:00","published_at":"2021-02-08T08:59:29.000-08:00","updated_at":"2021-02-08T08:59:29.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Helder S Ribeiro","slug":"agentofuser","bio":"Deleting the chasm between using and programming computers.","profile_image":"https://s3.fission.codes/2021/02/2020-1024px.jpg","twitter":"@agentofuser","facebook":null,"website":"https://agentofuser.com"}],"primary_author":{"name":"Helder S Ribeiro","slug":"agentofuser","bio":"Deleting the chasm between using and programming computers.","profile_image":"https://s3.fission.codes/2021/02/2020-1024px.jpg","twitter":"@agentofuser","facebook":null,"website":"https://agentofuser.com"},"primary_tag":{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Ghost","slug":"ghost-tag","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Headless Ghost","slug":"headless-ghost","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"ReactJS","slug":"reactjs","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Next.js","slug":"next-js","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"starter","slug":"starter","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Headless CMS","slug":"headless-cms","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We're exploring a number of \"Headless\" combinations at Fission. The first one is\nwith the Ghost Content Management System (CMS). We use Ghost to run this blog\nand want to start using it to integrate with and power our home page, so it's a\ngreat place for us to start.\n\nThe basic pattern of \"Headless\" is that your authors and editors login to a\nserver based system with all the authoring and editing tools they are used to,\nbut then the \"head\" – the usual template system and user facing website – isn't\nused. Instead, a modern front end framework is custom designed and built to take\nthe published content of the CMS and host it. This fits great with the Fission\napp publishing platform.\n\nAfter we've got the basics of a headless publishing workflow setup with Fission,\nwe'll move on to using our Webnative framework to add personalization at the\nedge, but that will come in later posts.\n\nAside from Ghost, we're also looking at Headless WordPress\n[https://talk.fission.codes/t/headless-wordpress/1448]  and Headless Drupal\n[https://talk.fission.codes/t/headless-drupal/1513]. Let us know in the forum if\nyou've got other Headless projects that you'd like to combine with Fission!\n\nBuild a Next.js Blog powered by Headless Ghost and Fission\nFollow the tutorial below to get started with your own Headless Ghost, or visit\nit on Github for the README version\n[https://github.com/fission-suite/nextjs-blog-starter-typescript-ghost].\n\nYou want to have a modern static website/app built with React, deployed to a CDN\n(even a distributed [https://ipfs.io/]  one), and loading super fast for\nvisitors and search engines.\n\nYou want to avoid the headaches and costs of managing and securing servers for\ntraditional content management systems (CMSs) like Ghost and WordPress.\n\nThat's what static site generators (like Next.js, Gatsby, and others\n[https://staticgen.com/]) are for, right?\n\nBut,  you don't  want to have to retrain  every writer and content creator on\nyour team to use Markdown  and Git. Ghost and WordPress are familiar, pretty,\nand usable. They have been iterated over years to be approachable by almost\nanyone.\n\nWhat do you do? That's right you cut the CMS' head off 🔪\n\nMore politely, you decouple  the interface used for authoring  content from the\nsystems used for rendering  and distributing  it.\n\nWith CMS and website decoupled, you can protect the CMS inside an intranet\nwithout exposing it to outside danger, or even use it as a desktop word\nprocessor running only on your machine, as I'll show you in this tutorial.\n\nTo make things easier we've made a template Next.js website that connects to\nGhost and pulls content from it. Follow along and try it out. Feedback welcome\n:)\n\n\n--------------------------------------------------------------------------------\n\n * ✨  Getting Started * 👻  Setting Up Ghost * Public or Local Ghost?\n       * Setting Up Local Ghost\n       * Exposing the Ghost Content API\n      \n      \n    * 💻  Running Next.js Locally\n    * 🌐  Deploying to Fission * 🔰  Fission CLI Install and Sign Up\n       * 🌱  Register New Fission App\n       * 🚀   Aand... Launch!\n       * 🤖  (Semi-)Automatic Deployment with the\n         GitHub\n         Action\n      \n      \n   \n   \n * 🙏  Show your support\n\n\n--------------------------------------------------------------------------------\n\nThis starter template is based on the official blog-starter-typescript\n[https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript] \n from Next.js [https://nextjs.org].\n\nWe changed it only enough to make it possible to fetch and publish blog posts\nfrom the Ghost CMS, while keeping the ability to write Markdown files in the git\nrepo. It's a purely additive change.\n\nThere's also a GitHub Action to build and publish the static website to Fission.\nIt works automatically on pushes to the git repo, and can be triggered manually\nafter updating the content on Ghost. (The default Ghost webhook isn't\ncustomizable to trigger a GitHub Action, but that can be added as a plugin.)\n\nThe Markdown blog posts are stored in /_posts  as files with frontmatter\nsupport. Adding a new Markdown file in there will create a new blog post.\n\nThe Ghost blog posts are fetched using Ghost's Content API library.\n\n✨  Getting Started\nLet's start by making this starter yours:\n\n * Click Use this template  at the starter page on GitHub\n   [https://github.com/fission-suite/nextjs-blog-starter-typescript-ghost]\n   \n   That will make a copy of the starter into a new repo under your account with\n   a fresh git history. You can pick a different name for it too; in that case\n   replace nextjs-blog-starter-typescript-ghost  with your chosen name below.\n   \n   \n * Clone the repo (replace with your own URL):\n   \n   git clone git@github.com:fission-suite/nextjs-blog-starter-typescript-ghost.git\n   \n   \n   \n * cd into the repo:\n   \n   cd nextjs-blog-starter-typescript-ghost\n   \n   \n   \n * Install dependencies\n   \n   yarn\n   \n   \n   \n\nAll command-line instructions and directory paths from now on assume the current\ndirectory is the root of the cloned repo.\n\n👻  Setting Up Ghost\nPublic or Local Ghost?\nRunning a local Ghost instance is good for testing. But also, if you have no\nneed for a Ghost instance running all the time out on the internet (for example,\nif you are the only author) you can do this for your production website, using\nGhost locally for its nice interface if you prefer that to editing Markdown\nfiles. No servers to secure, no bills to pay.\n\nSetting Up Local Ghost\nIf you have a Ghost instance running already somewhere, move on to the next\nstep. If you don't, you can set one up on your own machine with Docker.\n\nTo create a local Ghost instance with Docker, run the following at the root of\nyour repo:\n\nyarn ghost-local-create\n\n\nGhost data will be stored at ./ghost, which is in .gitignore  by default. In a \nprivate  repo you can choose to commit that too and have your Ghost content\nversioned and available whenever you need it.\n\nThere are other scripts like ghost-local-start, ghost-local-stop, and \nghost-local-remove  which you might find handy to manage the Docker container.\n\nAfter Docker downloads and sets up Ghost, it will be accessible on your browser\nat http://localhost:3001.\n\nNext you need to create an admin account on your newly-created Ghost. To do\nthat, visit the admin interface at http://localhost:3001/ghost  and follow the\nwizard.\n\nExposing the Ghost Content API\nI'll use http://localhost:3001  for the examples, but you can replace that with\nyour Ghost URL if you have an instance already running somewhere else.\n\n * Go to the admin interface at http://localhost:3001/ghost\n * On the left-hand sidebar, click on \"Integrations\"\n * On the Integrations screen, click on +Add custom integration\n   [http://localhost:3001/ghost/#/settings/integrations/new/]\n * Give it a name, like nextjs, and click \"Create\" then \"Save\"\n\nNow the important part:\n\n * On the same screen, you'll find two fields we need: Content API Key  and API\n   URL\n * Copy those into a new .env.local  file, like this:\n\n# .env.local\n# replace values with your own\nGHOST_API_URL=http://localhost:3001\nGHOST_API_KEY=2a9356e4a5214c883ba886e58e\n\n\n⚠️ This file is ignored by git by default. Don't  commit env.local  to git\nunless you know what you're doing.\n\nAlright! Ghost part's done.\n\n💻  Running Next.js Locally\nNext.js is the missing static website head  to our headless Ghost. Let's stitch\nthem together! This should be enough:\n\nyarn dev\n\n\nYour blog should be up and running at http://localhost:3000! (If anything\nunexpected happens, please post an issue\n[https://github.com/fission-suite/nextjs-blog-starter-typescript-ghost/issues/new]\n.)\n\nNow you can change the Next.js website code and the content on Ghost, and\niterate quickly on them in the browser.\n\nNote: live-reload works for Next.js code and Markdown files; to see changes to\nGhost content you need to refresh the page.\n\n🌐  Deploying to Fission\nWhen you're ready to publish, the first step is exporting your website to a set\nof static files:\n\nyarn build\n\n\nThat should create a directory at ./out  with all your ready-to-publish files.\n\nNext we use the Fission CLI to send that out onto the internets.\n\n🔰  Fission CLI Install and Sign Up\nTo install the Fission command-line interface using brew, run:\n\nbrew tap fission-suite/fission\nbrew install fission-cli\n\n\nFor more ways of installing the Fission CLI, please check the documentation\n[https://guide.fission.codes/developers/installation].\n\nIf you don't have a Fission account, you can create one without leaving the\ncommand-line by running:\n\nfission setup\n\n\n🌱  Register New Fission App\nYou can pick a subdomain or let Fission choose a random one for you.\n\nTo host the Next.js website at a random subdomain on .fission.app, run:\n\nfission app register\n\n\nTo choose your own subdomain, use the --name  option like this:\n\nfission app register --name my-beautiful-subdomain\n\n\nThat will create a fission.yaml  file. This one is safe to commit to git, and\nyou should  do that if you want to use the GitHub Action to build and deploy the\nwebsite for you. Make sure there is a line saying build: ./out  in it. That's\nthe directory where Next.js puts the exported website files.\n\n🚀   Aand... Launch!\nOne last step:\n\nfission app publish\n\n\nAnd you're done! Your website should be up at a random URL returned to you by\nthe Fission CLI or at my-beautiful-subdomain.fission.app  if you used the --name \n option. Yay!\n\n🤖  (Semi-)Automatic Deployment with the GitHub Action\nIf you don't want to run the build locally and deploy to Fission every time you\nmake a change to the Next.js code or Markdown files (who does?), this starter\ncomes with a GitHub Action that automates that for you.\n\nTo get it working you need to set up 3 secrets for your repo. To do that, go to\nthe \"Settings\" > \"Secrets\"  screen on your GitHub repo, then create a \"New\nrepository secret\"  for each of these:\n\n * GHOST_API_URL\n * GHOST_API_KEY\n * FISSION_KEY\n\nThe values for the GHOST_API_  fields are the same ones you used for the \n.env.local  file above.\n\nThe FISSION_KEY  was created and stored locally for you by the Fission CLI when\nyou set it up. Here's how you get it:\n\ncat ~/.config/fission/key/machine_id.ed25519 | base64\n\n\nWith all 3 secrets set up, you can trigger the deploy  action manually by\nclicking on \"Run workflow\" > \"Run workflow\", or see it in action after your next\n git push.\n\n\n--------------------------------------------------------------------------------\n\nNote:\n\n⚠️  To fetch the content from Ghost, the GitHub Action must be able to access\nthe URL  entered in the GHOST_API_URL  secret.\n\nIf you are running a local Ghost instance on your machine, http://localhost:3001 \n won't be visible to the outside.\n\nA simple way of exposing your local Ghost instance to a publicly-accessible URL\nis by using one of the open source alternatives to ngrok\n[https://github.com/anderspitman/awesome-tunneling]  or ngrok\n[https://ngrok.com/]  itself.\n\nWith ngrok you do something like this:\n\nngrok http 3001\n\n\n⚠️  This is great for testing, but not secure. Look into using https  if you're\ngoing to rely on this and don't want your Ghost API key and data to leak.\n\n\n--------------------------------------------------------------------------------\n\n> Why \"(semi-)\" automatic then? 🤔\n\n\nGlad you asked. The GitHub Action can detect when you push to the GitHub repo\nbecause there's a built-in \"on push\" event  that can be used to trigger  it.\n\nBut when you create a new post on Ghost or update an existing one, GitHub needs\na way of finding out about it so it can run the deploy action. There's no git\npush  event happening, so the trigger is usually a webhook\n[https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event] \n (i.e. a POST request you send to a GitHub API URL.)\n\n🙂  Luckily, Ghost comes with the built-in ability to send webhooks when content\nchanges happen.\n\n🙃Unluckily, though, Ghost doesn't let you customize the payload that goes in\nthe webhook requests it sends, and GitHub requires  a certain field to be\npresent telling it which ref  (usually a branch) you are referring to.\n\nBottom line: after changing things on Ghost, you need to trigger a build\nmanually.\n\nYou can do that via the GitHub interface (\"Actions\" > \"Continuous Deployment\" >\n\"Run workflow\" > \"Run workflow\"), or by running the handy script  we added to\nthis starter:\n\nGITHUB_USER=your-username GITHUB_REPO=your-repo GITHUB_AUTH_TOKEN=your-auth-token trigger-github-deploy-action.sh\n\n\nHere's how you can get an auth token\n[https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token]\n.\n\nThis situation is definitely not ideal, and can be solved with Ghost plugins,\nbut we wanted to stick to the basic install.\n\n🙏  Show your support\nPlease give a  ⭐️\n[https://github.com/fission-suite/nextjs-blog-starter-typescript-ghost]  if you\nliked this project! We appreciate it :)","html":"<p>We're exploring a number of \"Headless\" combinations at Fission. The first one is with the Ghost Content Management System (CMS). We use Ghost to run this blog and want to start using it to integrate with and power our home page, so it's a great place for us to start.</p><p>The basic pattern of \"Headless\" is that your authors and editors login to a server based system with all the authoring and editing tools they are used to, but then the \"head\" – the usual template system and user facing website – isn't used. Instead, a modern front end framework is custom designed and built to take the published content of the CMS and host it. This fits great with the Fission app publishing platform.</p><p>After we've got the basics of a headless publishing workflow setup with Fission, we'll move on to using our Webnative framework to add personalization at the edge, but that will come in later posts.</p><p>Aside from Ghost, we're also looking at <a href=\"https://talk.fission.codes/t/headless-wordpress/1448\">Headless WordPress</a> and <a href=\"https://talk.fission.codes/t/headless-drupal/1513\">Headless Drupal</a>. Let us know in the forum if you've got other Headless projects that you'd like to combine with Fission!</p><h2 id=\"build-a-next-js-blog-powered-by-headless-ghost-and-fission\">Build a Next.js Blog powered by Headless Ghost and Fission</h2><p>Follow the tutorial below to get started with your own Headless Ghost, or <a href=\"https://github.com/fission-suite/nextjs-blog-starter-typescript-ghost\">visit it on Github for the README version</a>.</p><!--kg-card-begin: markdown--><p>You want to have a modern static website/app built with React, deployed to a CDN (even a <a href=\"https://ipfs.io/\">distributed</a> one), and loading super fast for visitors and search engines.</p>\n<p>You want to avoid the headaches and costs of managing and securing servers for traditional content management systems (CMSs) like Ghost and WordPress.</p>\n<p>That's what static site generators (like Next.js, Gatsby, and <a href=\"https://staticgen.com/\">others</a>) are for, right?</p>\n<p><em>But,</em> you <em>don't</em> want to have to <strong>retrain</strong> every writer and content creator on your team to use <em>Markdown</em> and <em>Git</em>. Ghost and WordPress are familiar, pretty, and usable. They have been iterated over years to be approachable by almost anyone.</p>\n<p>What do you do? That's right you cut the CMS' head off 🔪</p>\n<p>More politely, you <em>decouple</em> the interface used for <em>authoring</em> content from the systems used for <em>rendering</em> and <em>distributing</em> it.</p>\n<p>With CMS and website decoupled, you can protect the CMS inside an intranet without exposing it to outside danger, or even use it as a desktop word processor running only on your machine, as I'll show you in this tutorial.</p>\n<p>To make things easier we've made a template Next.js website that connects to Ghost and pulls content from it. Follow along and try it out. Feedback welcome :)</p>\n<hr>\n<ul>\n<li><a href=\"#gettingstarted\">✨  Getting Started</a>\n<ul>\n<li><a href=\"#settingupghost\">👻  Setting Up Ghost</a>\n<ul>\n<li><a href=\"#publicorlocalghost\">Public or Local Ghost?</a></li>\n<li><a href=\"#settinguplocalghost\">Setting Up Local Ghost</a></li>\n<li><a href=\"#exposingtheghostcontentapi\">Exposing the Ghost Content API</a></li>\n</ul>\n</li>\n<li><a href=\"#runningnextjslocally\">💻  Running Next.js Locally</a></li>\n<li><a href=\"#deployingtofission\">🌐  Deploying to Fission</a>\n<ul>\n<li><a href=\"#fissioncliinstallandsignup\">🔰  Fission CLI Install and Sign Up</a></li>\n<li><a href=\"#registernewfissionapp\">🌱  Register New Fission App</a></li>\n<li><a href=\"#aandlaunch\">🚀   Aand... Launch!</a></li>\n<li><a href=\"#semiautomaticdeploymentwiththegithubaction\">🤖  (Semi-)Automatic Deployment with the GitHub Action</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#showyoursupport\">🙏  Show your support</a></li>\n</ul>\n<hr>\n<p>This starter template is based on the official <a href=\"https://github.com/vercel/next.js/tree/canary/examples/blog-starter-typescript\">blog-starter-typescript</a> from <a href=\"https://nextjs.org\">Next.js</a>.</p>\n<p>We changed it only enough to make it possible to fetch and publish blog posts from the Ghost CMS, while keeping the ability to write Markdown files in the git repo. It's a purely additive change.</p>\n<p>There's also a GitHub Action to build and publish the static website to Fission. It works automatically on pushes to the git repo, and can be triggered manually after updating the content on Ghost. (The default Ghost webhook isn't customizable to trigger a GitHub Action, but that can be added as a plugin.)</p>\n<p>The Markdown blog posts are stored in <code>/_posts</code> as files with frontmatter support. Adding a new Markdown file in there will create a new blog post.</p>\n<p>The Ghost blog posts are fetched using Ghost's Content API library.</p>\n<h2 id=\"gettingstarted\">✨  Getting Started</h2>\n<p>Let's start by making this starter yours:</p>\n<ul>\n<li>\n<p>Click <strong>Use this template</strong> at the <a href=\"https://github.com/fission-suite/nextjs-blog-starter-typescript-ghost\">starter page on GitHub</a></p>\n<p>That will make a copy of the starter into a new repo under your account with a fresh git history. You can pick a different name for it too; in that case replace <code>nextjs-blog-starter-typescript-ghost</code> with your chosen name below.</p>\n</li>\n<li>\n<p>Clone the repo (replace with your own URL):</p>\n<pre><code>git clone git@github.com:fission-suite/nextjs-blog-starter-typescript-ghost.git\n</code></pre>\n</li>\n<li>\n<p>cd into the repo:</p>\n<pre><code>cd nextjs-blog-starter-typescript-ghost\n</code></pre>\n</li>\n<li>\n<p>Install dependencies</p>\n<pre><code>yarn\n</code></pre>\n</li>\n</ul>\n<p>All command-line instructions and directory paths from now on assume the current directory is the root of the cloned repo.</p>\n<h3 id=\"settingupghost\">👻  Setting Up Ghost</h3>\n<h4 id=\"publicorlocalghost\">Public or Local Ghost?</h4>\n<p>Running a local Ghost instance is good for testing. But also, if you have no need for a Ghost instance running all the time out on the internet (for example, if you are the only author) you can do this for your production website, using Ghost locally for its nice interface if you prefer that to editing Markdown files. No servers to secure, no bills to pay.</p>\n<h4 id=\"settinguplocalghost\">Setting Up Local Ghost</h4>\n<p>If you have a Ghost instance running already somewhere, move on to the next step. If you don't, you can set one up on your own machine with Docker.</p>\n<p>To create a local Ghost instance with Docker, run the following at the root of your repo:</p>\n<pre><code class=\"language-bash\">yarn ghost-local-create\n</code></pre>\n<p>Ghost data will be stored at <code>./ghost</code>, which is in <code>.gitignore</code> by default. In a <strong>private</strong> repo you can choose to commit that too and have your Ghost content versioned and available whenever you need it.</p>\n<p>There are other scripts like <code>ghost-local-start</code>, <code>ghost-local-stop</code>, and <code>ghost-local-remove</code> which you might find handy to manage the Docker container.</p>\n<p>After Docker downloads and sets up Ghost, it will be accessible on your browser at <a href=\"http://localhost:3001\">http://localhost:3001</a>.</p>\n<p>Next you need to create an admin account on your newly-created Ghost. To do that, visit the admin interface at <a href=\"http://localhost:3001/ghost\">http://localhost:3001/ghost</a> and follow the wizard.</p>\n<h4 id=\"exposingtheghostcontentapi\">Exposing the Ghost Content API</h4>\n<p>I'll use <code>http://localhost:3001</code> for the examples, but you can replace that with your Ghost URL if you have an instance already running somewhere else.</p>\n<ul>\n<li>Go to the admin interface at <a href=\"http://localhost:3001/ghost\">http://localhost:3001/ghost</a></li>\n<li>On the left-hand sidebar, click on &quot;Integrations&quot;</li>\n<li>On the Integrations screen, click on <a href=\"http://localhost:3001/ghost/#/settings/integrations/new/\">+Add custom integration</a></li>\n<li>Give it a name, like <code>nextjs</code>, and click &quot;Create&quot; then &quot;Save&quot;</li>\n</ul>\n<p>Now the important part:</p>\n<ul>\n<li>On the same screen, you'll find two fields we need: <strong>Content API Key</strong> and <strong>API URL</strong></li>\n<li>Copy those into a new <code>.env.local</code> file, like this:</li>\n</ul>\n<pre><code class=\"language-bash\"># .env.local\n# replace values with your own\nGHOST_API_URL=http://localhost:3001\nGHOST_API_KEY=2a9356e4a5214c883ba886e58e\n</code></pre>\n<p>⚠️ <em>This file is ignored by git by default. <strong>Don't</strong> commit <code>env.local</code> to git unless you know what you're doing.</em></p>\n<p>Alright! Ghost part's done.</p>\n<h3 id=\"runningnextjslocally\">💻  Running Next.js Locally</h3>\n<p>Next.js is the missing static website <em>head</em> to our <em>head</em>less Ghost. Let's stitch them together! This should be enough:</p>\n<pre><code class=\"language-bash\">yarn dev\n</code></pre>\n<p>Your blog should be up and running at <a href=\"http://localhost:3000\">http://localhost:3000</a>! <em>(If anything unexpected happens, please post an <a href=\"https://github.com/fission-suite/nextjs-blog-starter-typescript-ghost/issues/new\">issue</a>.)</em></p>\n<p>Now you can change the Next.js website code and the content on Ghost, and iterate quickly on them in the browser.</p>\n<p><em>Note: live-reload works for Next.js code and Markdown files; to see changes to Ghost content you need to refresh the page.</em></p>\n<h3 id=\"deployingtofission\">🌐  Deploying to Fission</h3>\n<p>When you're ready to publish, the first step is exporting your website to a set of static files:</p>\n<pre><code class=\"language-bash\">yarn build\n</code></pre>\n<p>That should create a directory at <code>./out</code> with all your ready-to-publish files.</p>\n<p>Next we use the Fission CLI to send that out onto the internets.</p>\n<h4 id=\"fissioncliinstallandsignup\">🔰  Fission CLI Install and Sign Up</h4>\n<p>To install the Fission command-line interface using brew, run:</p>\n<pre><code class=\"language-bash\">brew tap fission-suite/fission\nbrew install fission-cli\n</code></pre>\n<p>For more ways of installing the Fission CLI, please check the <a href=\"https://guide.fission.codes/developers/installation\">documentation</a>.</p>\n<p>If you don't have a Fission account, you can create one without leaving the command-line by running:</p>\n<pre><code class=\"language-bash\">fission setup\n</code></pre>\n<h4 id=\"registernewfissionapp\">🌱  Register New Fission App</h4>\n<p>You can pick a subdomain or let Fission choose a random one for you.</p>\n<p>To host the Next.js website at a random subdomain on <code>.fission.app</code>, run:</p>\n<pre><code class=\"language-bash\">fission app register\n</code></pre>\n<p>To choose your own subdomain, use the <code>--name</code> option like this:</p>\n<pre><code class=\"language-bash\">fission app register --name my-beautiful-subdomain\n</code></pre>\n<p>That will create a <code>fission.yaml</code> file. <strong>This one is safe to commit to git</strong>, and you <em>should</em> do that if you want to use the GitHub Action to build and deploy the website for you. Make sure there is a line saying <code>build: ./out</code> in it. That's the directory where Next.js puts the exported website files.</p>\n<h4 id=\"aandlaunch\">🚀   Aand... Launch!</h4>\n<p>One last step:</p>\n<pre><code class=\"language-bash\">fission app publish\n</code></pre>\n<p>And you're done! Your website should be up at a random URL returned to you by the Fission CLI or at <code>my-beautiful-subdomain.fission.app</code> if you used the <code>--name</code> option. Yay!</p>\n<h4 id=\"semiautomaticdeploymentwiththegithubaction\">🤖  (Semi-)Automatic Deployment with the GitHub Action</h4>\n<p>If you don't want to run the build locally and deploy to Fission every time you make a change to the Next.js code or Markdown files (who does?), this starter comes with <strong>a GitHub Action that automates that for you</strong>.</p>\n<p>To get it working you need to set up 3 secrets for your repo. To do that, go to the <strong>&quot;Settings&quot; &gt; &quot;Secrets&quot;</strong> screen on your GitHub repo, then create a <strong>&quot;New repository secret&quot;</strong> for each of these:</p>\n<ul>\n<li><code>GHOST_API_URL</code></li>\n<li><code>GHOST_API_KEY</code></li>\n<li><code>FISSION_KEY</code></li>\n</ul>\n<p>The values for the <code>GHOST_API_</code> fields are the same ones you used for the <code>.env.local</code> file above.</p>\n<p>The <code>FISSION_KEY</code> was created and stored locally for you by the Fission CLI when you set it up. Here's how you get it:</p>\n<pre><code>cat ~/.config/fission/key/machine_id.ed25519 | base64\n</code></pre>\n<p>With all 3 secrets set up, you can trigger the <code>deploy</code> action manually by clicking on <strong>&quot;Run workflow&quot; &gt; &quot;Run workflow&quot;</strong>, or see it in action after your next <code>git push</code>.</p>\n<hr>\n<p>Note:</p>\n<p>⚠️  To fetch the content from Ghost, <strong>the GitHub Action must be able to access the URL</strong> entered in the <code>GHOST_API_URL</code> secret.</p>\n<p>If you are running a local Ghost instance on your machine, <code>http://localhost:3001</code> won't be visible to the outside.</p>\n<p>A simple way of exposing your local Ghost instance to a publicly-accessible URL is by using one of the <a href=\"https://github.com/anderspitman/awesome-tunneling\">open source alternatives to ngrok</a> or <a href=\"https://ngrok.com/\">ngrok</a> itself.</p>\n<p>With ngrok you do something like this:</p>\n<pre><code>ngrok http 3001\n</code></pre>\n<p>⚠️  This is great for testing, but <strong>not secure</strong>. Look into using <code>https</code> if you're going to rely on this and don't want your Ghost API key and data to leak.</p>\n<hr>\n<blockquote>\n<p>Why <strong>&quot;(semi-)</strong>&quot; automatic then? 🤔</p>\n</blockquote>\n<p>Glad you asked. The GitHub Action can detect when you push to the GitHub repo because <strong>there's a built-in &quot;on push&quot; event</strong> that can be used to <strong>trigger</strong> it.</p>\n<p>But when you create a new post on Ghost or update an existing one, GitHub needs a way of finding out about it so it can run the deploy action. There's no <code>git push</code> event happening, so the trigger is usually a <a href=\"https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event\"><strong>webhook</strong></a> (i.e. a POST request you send to a GitHub API URL.)</p>\n<p>🙂  Luckily, Ghost comes with the built-in ability to send webhooks when content changes happen.</p>\n<p>🙃  <strong><em>Un</em>luckily</strong>, though, Ghost doesn't let you customize the payload that goes in the webhook requests it sends, and GitHub <strong>requires</strong> a certain field to be present telling it which <code>ref</code> (usually a branch) you are referring to.</p>\n<p>Bottom line: <strong>after changing things <em>on Ghost</em>, you need to trigger a build manually</strong>.</p>\n<p>You can do that via the GitHub interface (&quot;Actions&quot; &gt; &quot;Continuous Deployment&quot; &gt; &quot;Run workflow&quot; &gt; &quot;Run workflow&quot;), or by <strong>running the handy script</strong> we added to this starter:</p>\n<pre><code>GITHUB_USER=your-username GITHUB_REPO=your-repo GITHUB_AUTH_TOKEN=your-auth-token trigger-github-deploy-action.sh\n</code></pre>\n<p>Here's how you can get an <a href=\"https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token\">auth token</a>.</p>\n<p>This situation is definitely not ideal, and can be solved with Ghost plugins, but we wanted to stick to the basic install.</p>\n<h2 id=\"showyoursupport\">🙏  Show your support</h2>\n<p>Please <a href=\"https://github.com/fission-suite/nextjs-blog-starter-typescript-ghost\">give a  ⭐️</a>  if you liked this project! We appreciate it :)</p>\n<!--kg-card-end: markdown--><h3></h3>","url":"https://blog.fission.codes/headless-ghost-blog-fission/","canonical_url":null,"uuid":"7e883b34-c739-4a41-a751-d695e25aa927","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"60210daa2dc76c001e5a3301","reading_time":null}},{"node":{"id":"Ghost__Post__5ea068b333f762001e6c6fae","title":"Experimenting with HLS Video Streaming and IPFS","slug":"experimenting-with-hls-video-streaming-and-ipfs","featured":false,"feature_image":"https://images.unsplash.com/photo-1501141178950-e7fa06e4adf5?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","localImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1080'%20height='720'%20viewBox='0%200%201080%20720'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20246c0%20241%200%20247%202%20249l2%203%201-4%203-8%202-8%204-13c1-2%208-5%209-4l4-4c4-7%208-9%2018-11%209-3%2020-4%2024-2s7%208%206%2013c0%206%203%2012%2010%2016%207%206%207%205%2010-4%203-14%208-20%2020-25%206-2%2012-2%2021-1%206%202%2014%209%2017%2016%204%209%204%2011%204%2022%200%2018-6%2031-20%2038-18%2010-28%206-24-8v-10c2-1-11-8-13-8l-2%202-5%2017-1%202c-2%206-16%2015-26%2016-15%202-19-2-16-14%202-5%203-7%208-7%204-1%209-6%209-10%200-5-5-9-13-9l-11-1c-6-3-14%202-14%207l-1%204-3%208-2%208-2%206c0%205-4%209-8%209l-3%201-4%201c-6%200-6-1-6%2024v22l3-1a2300%202300%200%2001140-16c15-2%2032-7%2033-10l2-2%202-2%203-3c5-2%2025%200%2025%203l2%201c2%202%2019%201%2029-1l21-2c16-1%2016-1%2016-11%200-23%200-26-6-28l-5-4c-5-8-4-7-11-7l-10-1c-3-2-5-1-8%203-12%2018-37%2026-42%2013-1-4%201-10%205-14%203-3%203-3-2-5-19-11-18-42%203-52%205-3%2016-3%2022-1%208%203%2016%2013%2018%2023%200%204%202%206%203%206s7-8%2011-16c7-12%2010-15%2016-16%205-1%206-4%205-25l-1-73%204-299V0H0v246M686%2010l1%2018%201%2076%201%2068h-5l-28-6-13-2-16-3-4-1-8-1-9-3-6-1c-1-1-12-2-13-1-1%202%202%203%207%203s6%200%206%202l1%201%201%203c0%203%201%203%205%203%203%200%205-1%207-3%203-3%205-3%207%200l4%202c4%200%209%205%206%206l-2%205c0%204%202%206%206%206%202%200%203%200%203%202%200%203-2%205-5%203l-18-2-3-3c-2-4-5-5-8-2h-12c-14-3-16-2-16%200s2%204%207%204l9%203%2017%204a914%20914%200%200180%2016l1%2018a1828%201828%200%20002%20125c-1%202-2%202-23%201l-23-1c-1-1-2-11-2-24l-1-24c-1-1-12-3-33-4-22-1-20-4-20%2025l-1%2025-7%201h-7v50l-3%203c-3%202-3%203-3%209l2%2011c2%202%202%205%202%2022%200%2020%201%2023%204%2023l2%203c0%202-2%206-5%206l-3%202-6%202-3%201h-2l-4-2c-3-1-4-1-4-6l1-4h-4l-6-2-5-3c-4-1-5-4-5-11-1-4%200-5%201-5%202-1%201-1-1-1-3%200-4%201-5%203s0%206%201%206l1%201%204%209c3%206%204%209%203%2010v3l-2%203c-4%203-11%201-14-6-3-6-3-6-5%200l-3%204%202%201c2%201%202%201%200%201-1%200-4%201-5%203l-7%202h-4v-16l1-1v-2l1-2v-1c-2%200-2%200%201-1l3-1h-3c-4%200-3-1%201-2%201-1%201-1-1-1h-3l3-1%203-2h-6l3-1c2-1%202-1%200-1-4%200-5-7-2-7%202%200%202%200%201-1-2%200-2-1-2-4v-4h-9l-1%2021c-1%2023%200%2022-5%2025-2%201-6%200-7-2l-1-22v-21l-5-1c-5-1-8%200-11%203l-4%201c-13-4-18%200-18%2017%200%2015%207%2021%2017%2014%202-1%204-1%207%202%206%205-5%2014-16%2014-9%200-16-4-20-13-3-5-4-5-5%200-1%2010-8%2016-23%2019-14%203-18%201-20-9-1-5-2-5-4-1-3%209-12%2015-27%2017-9%201-14%200-18-5-2-3-3-56-1-60%203-5%207-7%2016-8%2022-1%2033%209%2028%2028-1%204-1%204%201%209l3%204c1%200%202-10%202-22-1-18%203-21%2020-20%2018%201%2024%209%2019%2028%200%202%200%204%202%206l2%203%201-4%201-8c0-15%2013-28%2027-27l7%202c2%202%205%201%208-1l17-3%2016-2%204-2c2-1%202-1%200-1l-3-1%2015-1c10%200%2012%201%206%201l-10%201c-1%201%202%201%2011%201%2010-1%2013%200%2013%201l1%201%201%202%201%201%201%203c0%203%200%203%203%203h3v-13h4l4-1%202-1v-1c-1-1%204-6%207-6%202%200%203-2%200-2v-1c7-2-20-3-53%200-8%200-10%200-13-2-5-2-5-4-5-30v-25l3-2c2-2%204-2%2020-2%2025%200%2023%202%2023-25-1-20-1-23-5-25l-59-4c-2%200-4%201-7%204-4%204-4%204-10%204l-6-1h-12c-1%201-2%202-5%201-4%200-6-1-13-8-5-3-12-3-16%202-1%201-3%202-7%202l-6%201h-1c-3%200-5%204-5%207%201%202%200%204-1%206-2%202-2%203-1%203l2%204%204%206%204%204%201%2012%201%2036v25l-5%204c-3%203-5%204-8%204l-22%202-18%201a169%20169%200%2000-29%203l-5%201v103l1%204%2013-1%2027-1c42-3%2038-3%2043%201l3%205c0%202%201%203%202%203%201%201%2090-10%2095-11v-5c0-10%204-12%2021-14l40-4c18-3%2023-2%2023%206%200%207%201%207%209%206l32-4a7890%207890%200%2000156-21h4v-12l5-1c9-1%208-1%208%204l1%205%2023-2v-22c0-5%200-6-2-6-1%200-2%200-2-4v-4h-5c-4%200-4%200-4-3%200-6%207-26%209-27l3%201c2%202%200-176-4-373V0H686v10m182-7a5191%205191%200%2001116%2062l9%202c5%200%207%201%2011%203%208%204%2010%201%207-9-2-7-2-13%201-27%201-7%200-10-7-14-8-5-11-8-12-14V0h-31l-31%201c0%203-4%203-5%201s-3-2-14-2h-12l1%203%201%203c-1%201-6-2-6-4-1-2-2-2-18-2h-16l6%203m165-2l2%204c5%2011%206%2026%202%2030-3%203-3%206-2%2025%201%2023%203%2027%209%2030l4%203%203%202%205%204%205%204%2018%207%201-55V0h-23l-24%201m-93%2064l1%2013%201%205a345%20345%200%20002%2025v12h8v-4c0-3%200-4%202-4l1%204-1%204-2%201%204%201c3%200%204%200%205%204l4%2018%201%2014%201%2019-1%2025-2%2022-5-1-13-2-15-2-15-3-15-3c-20-5-20-4-21-3-2%201-2%202-1%202l1%205c0%203%200%204%203%204%202%200%203%201%203%205l1%205c2%200%204%202%203%203l-3-1c-4-3-10%202-7%205l25%206%2011%202c5%203%209%204%2013%204l15%203%207%202%2011%203%203%201v23l2%2098c1%203-1%204-9%204l-9%201-3%201-3%202-2%201-1%201-1%202v1l1%202c-1%201%200%202%201%203%204%204%205%206%205%2011s0%205%203%206%203%202%203%206v6l2-4%202-4v4c1%206%200%208-3%208l-4%202c-7%206-10%203-9-7l-1-9-1-7-1-4v-6l-1-5c0-7-1-8-9-8l-12%201c-3%201-16%202-49%203l-45%201v39l1%2040c1%202%202%202%205%202%206%200%209-2%209-6s1-5%2014-8c10-3%2011-3%2011%203%200%205%202%206%206%205%206-1%207-3%207-6s3-5%2013-7c6-2%209-1%209%204%200%203%201%204%203%204%203%200%209-3%209-5-1-3%203-5%2012-8%205-2%206-1%208%204%201%206%209%204%2010-2%201-4%203-5%2010-6h6l1%203c3%206%206%206%2011%200%206-7%2011-8%2016-3%203%204%206%204%2011-1s6-6%2011-3c5%204%208%204%2013-1%203-3%203-3%206-2%205%202%209%201%2010-2%202-5-1-13-5-18s-5-7-3-7%204-4%206-10a1372%201372%200%2000-1-175l-2-52-1-45c-1-40%200-37-11-42a268%20268%200%2001-41-21l-7-3-6-2-6-2-11-5-1-1-2-1c-2%200-2%201-2%2013M837%2076c1%2013%201%2016%205%2015l1-13c-1-14%200-14-4-14l-2-1v13m8-9v13c1%2012%203%2016%206%2016l1-14V68l-3-1h-4m16%2019c1%2014%202%2018%206%2015%201-1%201-1%203%201l2%203%202-1c2-2%202-4%202-13%200-12-1-15-6-15l-4-2c-5-3-5-2-5%2012m-227%2082c-2%201%200%204%204%204%203%200%204%203%204%2010l1%207h4l5%201c2%202%2011%203%2017%202%202-1%203-1%205%201%204%203%203%203%206%202%202-1%202-1%205%202%203%202%203%202%205%201%202-4%201-6-1-6-5%200-5-9-1-10%202-1%203-5%200-6l-3%201h-5c0-1-4-2-5%200-2%202-7%201-9-1%200-2-2-3-2-3l-5-2-7-2h-11c-1%201-2%200-3-1h-4m222%2055l1%2012h7v-4l-2-11c0-6%200-7-2-7l-3-1c-1-1-1%201-1%2011m-726%2038l-6%201-8%203-7%204-4%202-2%202-2%203v-3l-2-3-5-3-12-1c-8%200-8%200-11%203l-5%203c-2%200-6%203-6%205l-2%202c-2%200-2%200-1%201v1c-2%200-1%205%201%205l4%201c7%200%2010%202%208%207%200%201-1%202-2%201l-1%202%202%201c1-1%201%200%201%201%200%202-1%203-7%203l-7%201-1%201c-2%200-7%207-9%2012-4%2010-2%2019%204%2026%206%205%205%205%2060%205a287%20287%200%200157%204c2%201%202%201%201%2025%200%2023%200%2025%202%2028l3%204c2%205%2017%206%2025%203l10-4%207-7v-8l-2-34c0-33%200-33-3-36l-2-4-1-4-3-6c0-4%200-4%202-4s3-4%200-5l-1-3c1-1%200-2-2-4s-3-2-3-1c0%202-8%208-8%206l-1-1c-2%200-3-2-2-4v-3c-1-2-5%201-4%203l-1%203-1%209c0%209-1%2010-8%209l-8-1-5-3c-2-2-2-2-2-9%200-10%203-13%2011-12%206%200%208-1%205-6-1-3-8-6-11-5l-4-4c-1-2-3-5-5-5l-8-4c-8-3-14-4-18-3m234%2035c-3%204-3%2020%200%2025%202%203%202%203%204%202%202-2%203-3%203-14%201-12-3-19-7-13m396%2013c1%201%201%201-2%201-4%200-4%200-2%201l3%201h-5l2%201c2%201%201%201-2%201-5%200-6-1-6-3s-1-2-6-2h-6l5%201%205%201h-10l5%201%205%201h-11v19l1%2020%2018%201c23%200%2021-2%2021%2020v19h6l8-1-1-52v-23h-9c-11-1-13-2-6-2l6-1h-6c-5%200-5%200-2-1l4-1h-4l-4-1-5-2c-3%200-4%200-2%201m-312%202l-1%207c0%205%202%207%207%205%204-2%204-3%203-7-2-5-6-8-9-5m289%2015l1%2012h3c3%200%204-1%204-3l-1-3-1%201c0%202-1%203-3%202-2%200-3-3-1-4l1%201c-1%201%200%202%201%202%202%200%202-6%200-7-3%200-2-2%200-2l2%201%201%203%201-4c0-5-1-5-5-4h-1c0-1%201-2%203-2%205%200%204-3-1-4h-4v11m32-6v19h8l-1-10%201-10%201%206%201%206%201-2%202-2%201-1-1-2-1-1c1-3%203-2%203%201%202%206%201%2012-1%2013-1%200-4-3-3-4l-1-1-1%204c0%203%200%203%204%203h4v-10l-1-11-8-1c-8%200-8%200-8%203m291%2012l-8%202c-3%200-4%200-4%203-1%205%200%209%202%209l1%202%203%202%202%202-1%2010c0%2015%200%2016-3%2017-3%202-6%205-7%208-3%207-1%2048%202%2048a1729%201729%200%200128%204h5V330h-8l-12%202m-142%2072c-2%202-1%204%201%205%204%202%205%206%201%2012-5%209-4%2017%200%2017%206%200%208-4%205-7v-10c3-12%202-18-3-18l-4%201m36%201c-1%201%200%207%201%208l2-3c1-4%203%200%203%208%200%206%201%208%202%203%201-3%201-3%202-2l1%204c-2%206%206%208%2013%204l4-2-1-1c-2-2-4-14-4-16v-1c-1-1-1%200-1%203l-1%204c-1%200-3-5-2-7l-1-2c-1-1-1%200-1%201%200%203-2%203-2%200-1-4-4-3-5%201l-1%204-1-4c-1-2-1-3-3-2l-2-1c0-2-3-1-3%201m-72%200h-6c-4%200-7%202-10%208-1%204%200%2016%201%2021%203%209%2012%2011%2013%204%200-2%200-2-3-2-6%200-6-2-6-10%200-9%201-14%205-13l5-1c3-2%204%200%204%2014%200%2010%201%2013%202%2014%204%203%205-2%204-18%200-10%200-11%202-11%204-2%207%207%206%2015v6l-2%202v2c0%202%203-1%203-4%200-2%203-2%205%201%203%204%203%202%201-5v-12l2-8c-1-3-4-4-4-2%200%203-3%202-5%200-1-2-14-3-17-1m-48%202c-3%201-4%204-3%2012v16c1%2011%202%2012%206%2011h4c4-1%206-7%206-13v-15c1-8-5-13-13-11m15%201v19c0%2016%200%2017%202%2018%208%203%2015-7%2012-18v-7c2-4%201-9-2-12s-11-3-12%200m-63%204c-2%202-4%208-4%2013%200%2010%204%2015%209%2012%202-1%202-1%202%203-1%205-3%206-7%205-3%200-3%200-2%205%200%202%204%202%207%201%2010-7%209-39-2-40l-3%201m-31%204c-5%209-2%2024%205%2024l3-1c1-2%202-1%201%201v3c0%202-4%207-6%207-1%200-2%200-1-1l-2-1-1%203c1%204%207%204%2010%200%206-8%206-30%200-37-2-2-7-1-9%202m-22%200l-1%209%201%208h4c6%200%207%202%207%2010-1%205-3%209-6%209-2%200-2%200-1-1s1-1-1-1c-4%200-4%206%200%207%207%201%2012-5%2012-17%200-9-2-13-7-13-4%200-4%200-4-4s0-4%204-4%205-1%205-3%200-2-6-2l-7%202m-6%202l-2%209-3%2021c-3%2015-3%2018%200%2016%201-1%208-41%208-47%200-3-3-2-3%201m-35%200c-7%207-7%2033-1%2040%204%205%209%204%2013-4%203-7%202-30-2-35-3-4-8-4-10-1m-25%201c-5%202-7%2010-4%2016%202%204%202%205%200%207-1%204-1%2013%201%2017%201%204%204%205%208%205%209%200%2014-15%208-24-1-2-1-2%201-5l1-8c-1-9-7-12-15-8m91%201l-1%207c0%207%203%2011%206%205%202-5%201-14-2-14l-3%202m-117%201c-8%208-8%2038%200%2044%205%204%2012%201%2015-8%204-9%201-31-4-36-2-3-9-3-11%200m-28%201c-3%203-2%206%201%208%202%201%202%201%202%2017%200%2014%200%2015-2%2016-3%201-3%207%200%207%202%201%2012%200%2014-1%203-2%202-6%200-7-4-1-4-2-4-21l-1-19c-1-3-8-3-10%200m81%202c-2%203-3%2021-1%2027%201%202%202%204%204%204%203%200%204-7%204-18-1-13-3-18-7-13m-50%205l-2%2012c0%2013%202%2021%207%2017%202-3%203-23%201-28s-5-5-6-1m68-1v29l2%202c3%200%203-32%200-33l-2%202m-43%2017c-2%203-1%208%201%2011l2%202%202-2c5-4%203-14-1-14-2%200-3%201-4%203m406%202l-3%203v16c0%2016%200%2016%203%2019l2%203h-2l-3%201-1%201c-2-1-11%202-12%204l-4%203c-7%203-7%204-6%2014l3%209c2%201%203%2016%201%2016s-2%201-2%204%200%204%202%204l1%204%201%205h1c0-2%202-1%204%201l3%202%201%202-1%202-1%204-1%204-2%201%201%201%201%203-1%203-1%208-1%208c-2%200-2-1-2-7l-1-6-1%2027-1%2026c-1%200-2%209-2%2020l-2%2022c-5%209-5%2011-6%2029v17h37v-8l-1-9c-2%200-4-3-4-6l4-9a4594%204594%200%2000-4-241m-55%205l-13%203a5932%205932%200%2001-87%2017%20249%20249%200%2000-52%209l-12%201a1373%201373%200%2001-61%209%203223%203223%200%2000-111%2019c-31%205-34%206-33%2010a1185%201185%200%20011%2040c0%202%201%202%2039-6a1451%201451%200%200177-16l2-1h1l2-1a15825%2015825%200%2001121-26c20-4%2021-4%2022-2%203%202%202%205-2%205a209%20209%200%2000-46%2010l-19%203a4424%204424%200%2000-197%2045l-1%20145v4h384l-1-108c0-135-1-156-3-158s-10-3-11-2m-624%2016l-1%207c0%205%201%206%204%206%206%200%2010-8%205-12-2-2-6-2-8-1m-226%2032c-7%202-9%209-4%2014%202%204%203%204%206%204%205%200%2011-4%209-6l1-2c6-2-5-12-12-10'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/1c25e840934eaf1c5e39aa8d960fa164/29ba9/photo-1501141178950-e7fa06e4adf5.jpg","srcSet":"/static/1c25e840934eaf1c5e39aa8d960fa164/272de/photo-1501141178950-e7fa06e4adf5.jpg 270w,\n/static/1c25e840934eaf1c5e39aa8d960fa164/a5ccf/photo-1501141178950-e7fa06e4adf5.jpg 540w,\n/static/1c25e840934eaf1c5e39aa8d960fa164/29ba9/photo-1501141178950-e7fa06e4adf5.jpg 1080w","sizes":"(min-width: 1080px) 1080px, 100vw"},"sources":[{"srcSet":"/static/1c25e840934eaf1c5e39aa8d960fa164/f9186/photo-1501141178950-e7fa06e4adf5.webp 270w,\n/static/1c25e840934eaf1c5e39aa8d960fa164/25c40/photo-1501141178950-e7fa06e4adf5.webp 540w,\n/static/1c25e840934eaf1c5e39aa8d960fa164/984df/photo-1501141178950-e7fa06e4adf5.webp 1080w","type":"image/webp","sizes":"(min-width: 1080px) 1080px, 100vw"}]},"width":1080,"height":720}}},"excerpt":"Walk through of encoding video using HTTP Live Streaming (HLS) and publishing to Fission.","custom_excerpt":"Walk through of encoding video using HTTP Live Streaming (HLS) and publishing to Fission.","created_at_pretty":"22 April, 2020","published_at_pretty":"22 April, 2020","updated_at_pretty":"22 April, 2020","created_at":"2020-04-22T08:54:27.000-07:00","published_at":"2020-04-22T10:09:39.000-07:00","updated_at":"2020-04-22T10:09:39.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"HLS","slug":"hls","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We've been running weekly developer lunch & learn sessions\n[https://talk.fission.codes/c/events/dweblunchnlearn/27]  over video. I've been\ndownloading the video from Zoom, doing some basic trimming, and then uploading\nit using Fission, and embedding the IPFS link in our Discourse forum. This works\npretty well – Discourse recognizes the video file extension and embeds a video\nplayer in the post automatically. I had read a bit about HTTP Live Streaming\n(HLS) and wanted to experiment.\n\nOriginally developed by Apple, and now widely supported, HLS doesn't need any\nspecial server-side support. A bit more in this freeCodeCamp article:\n\n> The most important feature of HLS is its ability to adapt the bitrate of the\nvideo to the actual speed of the connection. This optimizes the quality of the\nexperience.\n\nHLS videos are encoded in different renditions at different resolutions and\nbitrates. This is usually referred to as the bitrate ladder. When a connection\ngets slower, the protocol automatically adjusts the requested bitrate to the\nbandwidth available.\n\n– freeCodeCamp: HLS Video Streaming: What it is, and When to Use it\n[https://www.freecodecamp.org/news/what-is-hls-and-when-to-use-it/]\nThere's an example in the JavaScript implementation of IPFS about using HLS\nwith\njs-ipfs\n[https://github.com/ipfs/js-ipfs/tree/master/examples/browser-video-streaming].\nThe README explains:\n\n> The fact that HLS content is just \"a bunch of files\" makes it a good choice for\nIPFS (another protocol that works this way is MPEG-DASH, which could certainly\nbe a good choice as well). Furthermore, the hls.js\n[https://github.com/video-dev/hls.js]  library enables straightforward\nintegration with the HTML5 video element.\n\"Just a bunch of files\" is pretty much how we're thinking about Fission. Fission\nand any standard IPFS gateway serves up files over HTTP and/or natively with\nIPFS, without plugins, in any browser. It's really great to get back to what is\nbasically the 2020 equivalent of upload files to the server.\n\nI took the latest video file of Joel talking about Ceramic Network\n[https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559] \n and ran the ffmpeg  command from the js-ipfs example. On MacOS, brew install\nffmpeg  will get you the program.\n\nffmpeg -i ../YOURVIDEO.mp4 -profile:v baseline -level 3.0 -start_number 0\n-hls_time 5 -hls_list_size 0 -f hls master.m3u8\n\nOn my desktop iMac, the progress showed to be encoding at 4x - 5x speed. The\nvideo is about an hour, so it took about 20 minutes to complete. The output is\n400+ files, which I uploaded with fission up  and then noted down the hash of\nthe folder.\n\nBrowse the files on IPFS using Fission Drive\n[https://drive.fission.codes/#/QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S]\nThen I went back and edited the streaming.js  folder and index.html. The \nstreaming.js  file just needs the hash of the folder that contains the\nHLS-encoded video, which for this video is \nQmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S. Feel free to use this to\nexperiment with! I kept the master.m3u8  file name so didn't need to change\nthat.\n\nOne change I made was to to also include the IPFS script from a CDN in the \nindex.html  file (the js-ipfs example assumes you're running things locally and\nworking with js-ipfs from there). Just add this line:\n\n<script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"></script>\n\nYou can browse all the files directly using Fission Drive\n[https://drive.fission.codes/#/events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network]\n, including the source video that was encoded. Visiting the index page\n[https://events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network/] \nwill load the player and HLS stream the video.\n\nExample HLS Video\nHere's the source and video embedded via Codepen – hit the HTML button to view\nsource. Note the Fission gateway link to the published version of the \nstreaming.js  file, also remotely included:\n\nThe video isn't very high quality to begin with, and adding width/height to the\nvideo element could constrain it to different sizes.\n\nMore about Joel and Ceramic Network on the forum event page »\n[https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559]\n\nConclusion\nThis is a very manual process, and there are lots of dedicated video encoding\nservices. It was a good experiment to see that anything that is a \"bunch of\nfiles\" can just work over the distributed IPFS network, and easily published and\nhosted on Fission.\n\nExperimenting with a large, high quality video and testing across different\ndevices and network speeds (and whether or not nearby peers had a copy of the\nvideo) would need to be done vs. just embedding the original video to see what\nthe user experience is actually like.\n\nThis also leads to some interesting thoughts about distributed encoding. Once an\noriginal video is encoded and added to the network by one person, it never needs\nto be encoded again. From some brief research, ffmpeg is not deterministic,\nwhich lead to this thread on Mastodon\n[https://mastodon.social/@Gargron/11088922]. This means that different people\nencoding a video could get different output files, which means different hashes\nin IPFS.\n\nHowever, the original video file is unique, so adding metadata to the original\nsource video file for discovery of the unique, permanent hash of an HLS-encoded\nversion could work.\n\nWe're currently doing some work on how to do this for images, so that different\nsizes are automatically available and cached in the network.\n\n\n--------------------------------------------------------------------------------\n\nFission is an app & web hosting platform that implements a web native file\nsystem powered by IPFS. Build and run locally, fission up  to host everywhere. \nRead our guide [https://guide.fission.codes]  to get started and sign up right\nfrom the command line.","html":"<p>We've been running <a href=\"https://talk.fission.codes/c/events/dweblunchnlearn/27\">weekly developer lunch &amp; learn sessions</a> over video. I've been downloading the video from Zoom, doing some basic trimming, and then uploading it using Fission, and embedding the IPFS link in our Discourse forum. This works pretty well – Discourse recognizes the video file extension and embeds a video player in the post automatically. I had read a bit about HTTP Live Streaming (HLS) and wanted to experiment.</p><p>Originally developed by Apple, and now widely supported, HLS doesn't need any special server-side support. A bit more in this freeCodeCamp article:</p><blockquote>The most important feature of HLS is its ability to adapt the bitrate of the video to the actual speed of the connection. This optimizes the quality of the experience.<br><br>HLS videos are encoded in different renditions at different resolutions and bitrates. This is usually referred to as the bitrate ladder. When a connection gets slower, the protocol automatically adjusts the requested bitrate to the bandwidth available.<br><br>– <a href=\"https://www.freecodecamp.org/news/what-is-hls-and-when-to-use-it/\">freeCodeCamp: HLS Video Streaming: What it is, and When to Use it</a></blockquote><p>There's an <a href=\"https://github.com/ipfs/js-ipfs/tree/master/examples/browser-video-streaming\">example in the JavaScript implementation of IPFS about using HLS with js-ipfs</a>. The README explains:</p><blockquote>The fact that HLS content is just \"a bunch of files\" makes it a good choice for IPFS (another protocol that works this way is MPEG-DASH, which could certainly be a good choice as well). Furthermore, the <a href=\"https://github.com/video-dev/hls.js\">hls.js</a> library enables straightforward integration with the HTML5 video element.</blockquote><p>\"Just a bunch of files\" is pretty much how we're thinking about Fission. Fission and any standard IPFS gateway serves up files over HTTP and/or natively with IPFS, without plugins, in any browser. It's really great to get back to what is basically the 2020 equivalent of upload files to the server.</p><p>I took the latest video file of <a href=\"https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559\">Joel talking about Ceramic Network</a> and ran the <code>ffmpeg</code> command from the js-ipfs example. On MacOS, <code>brew install ffmpeg</code> will get you the program.</p><p><code>ffmpeg -i ../YOURVIDEO.mp4 -profile:v baseline -level 3.0 -start_number 0 -hls_time 5 -hls_list_size 0 -f hls master.m3u8</code></p><p>On my desktop iMac, the progress showed to be encoding at 4x - 5x speed. The video is about an hour, so it took about 20 minutes to complete. The output is 400+ files, which I uploaded with <code>fission up</code> and then noted down the hash of the folder.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/04/hls-video-files-in-drive-600.png\" class=\"kg-image\"><figcaption>Browse the <a href=\"https://drive.fission.codes/#/QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S\">files on IPFS using Fission Drive</a></figcaption></figure><!--kg-card-end: image--><p>Then I went back and edited the <code>streaming.js</code> folder and <code>index.html</code>. The <code>streaming.js</code> file just needs the hash of the folder that contains the HLS-encoded video, which for this video is <code>QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S</code>. Feel free to use this to experiment with! I kept the <code>master.m3u8</code> file name so didn't need to change that.</p><p>One change I made was to to also include the IPFS script from a CDN in the <code>index.html</code> file (the js-ipfs example assumes you're running things locally and working with js-ipfs from there). Just add this line:</p><p><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"&gt;&lt;/script&gt;</code></p><p>You can <a href=\"https://drive.fission.codes/#/events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network\">browse all the files directly using Fission Drive</a>, including the source video that was encoded. <a href=\"https://events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network/\">Visiting the index page</a> will load the player and HLS stream the video.</p><h2 id=\"example-hls-video\">Example HLS Video</h2><p>Here's the source and video embedded via Codepen – hit the HTML button to view source. Note the Fission gateway link to the published version of the <code>streaming.js</code> file, also remotely included:</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe id=\"cp_embed_GRprJoZ\" src=\"https://codepen.io/borismann/embed/preview/GRprJoZ?height=300&amp;slug-hash=GRprJoZ&amp;default-tabs=html,result&amp;host=https://codepen.io\" title=\"HLS Streaming over IPFS Example\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" class=\"cp_embed_iframe\" style=\"width: 100%; overflow: hidden;\"></iframe></figure><!--kg-card-end: embed--><p>The video isn't very high quality to begin with, and adding width/height to the video element could constrain it to different sizes.</p><p>More about <a href=\"https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559\">Joel and Ceramic Network on the forum event page »</a></p><h2 id=\"conclusion\">Conclusion</h2><p>This is a very manual process, and there are lots of dedicated video encoding services. It was a good experiment to see that anything that is a \"bunch of files\" can just work over the distributed IPFS network, and easily published and hosted on Fission.</p><p>Experimenting with a large, high quality video and testing across different devices and network speeds (and whether or not nearby peers had a copy of the video) would need to be done vs. just embedding the original video to see what the user experience is actually like.</p><p>This also leads to some interesting thoughts about distributed encoding. Once an original video is encoded and added to the network by one person, it never needs to be encoded again. From some brief research, <a href=\"https://mastodon.social/@Gargron/11088922\">ffmpeg is not deterministic, which lead to this thread on Mastodon</a>. This means that different people encoding a video could get different output files, which means different hashes in IPFS.</p><p>However, the original video file is unique, so adding metadata to the original source video file for discovery of the unique, permanent hash of an HLS-encoded version could work.</p><p>We're currently doing some work on how to do this for images, so that different sizes are automatically available and cached in the network.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p><em>Fission is an app &amp; web hosting platform that implements a web native file system powered by IPFS. Build and run locally, <code>fission up</code> to host everywhere. <a href=\"https://guide.fission.codes\">Read our guide</a> to get started and sign up right from the command line.</em></p>","url":"https://blog.fission.codes/experimenting-with-hls-video-streaming-and-ipfs/","canonical_url":null,"uuid":"a59c1236-5ed1-4fda-8b61-e88a76aca80c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ea068b333f762001e6c6fae","reading_time":null}},{"node":{"id":"Ghost__Post__5dc7cad72c7d24001ef7ff16","title":"Exporting your Facebook photos to Fission","slug":"exporting-your-facebook-photos-to-fission","featured":false,"feature_image":"https://images.unsplash.com/photo-1522159698025-071104a1ddbd?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","localImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1080'%20height='720'%20viewBox='0%200%201080%20720'%20preserveAspectRatio='none'%3e%3cpath%20d='M834%206l1%2013%203%2014%201%207v1l-1%203c0%202-1%203-3%201l-2%202-3%203-4%203-3%202c0-2-2-1-4%204l-3%204c0-2-2-3-2-1h-2l-2%201c1%202-1%203-4%203l-3%204c-1%202-1%202-2%200%200-2-1-1-5%203-3%203-6%205-8%205l-5%203h-2c-1-2-3%200-3%203%200%202%200%202-3%201s-3-1-3%201%200%203-1%202c-2%200-2%200-2%202l-3%2010c-6%2012-5%2025%202%2032%204%203%203%207-1%2010a218%20218%200%2000-18%2011l-13%209a319%20319%200%2000-20%2014%20144%20144%200%2000-21%2014l-2%201-1%201a268%20268%200%2000-39%2026l-7%204-1%201-4%203-10%207-9%205-1%201-6%205-7%204a393%20393%200%2001-37%2024c0%202-18%2014-19%2013l-4%202c-4%204-6%202-2-2%203-3%2021-15%2023-15%203%200-1-8-8-14a111%20111%200%2001-8-10%20545%20545%200%2001-32-39%2033605%2033605%200%2000-74-89l2%207v6l-1%2011-1%2024a499%20499%200%2000-6%2045%20138%20138%200%2001-3%2025l-2%208-2%204c0%202-6%2011-9%2013l-3%202-12%204-18%204-16%204a158%20158%200%2000-24%207l-12%202a367%20367%200%2001-32%209l-9%202-3%201-5%201-8%203-9%203-3%201-4%201-8%202-12%203-10%203c-13%202-19%204-21%205l-7%202-4%201-16%204-8%201-8%202-7%201-4%201-4%202c-1%202-6%200-7-2l-2-2-5-5-5-5a43451%2043451%200%2000264%20397l4%205h234l7-5a3502%203502%200%2000117-91l33-26c24-19%2023-17%2021-20a816%20816%200%2000-41-54%2084263%2084263%200%2000-120-152l1-1%202-1h2c2%203%201-5-1-8l-2-5-1-2-1-1c0-2-20-23-24-25l-5-3-4-2h-4l-3-1-5-4-3-4%205-3%208-7a2301%202301%200%2001114-74c1%200%202%202%202%206l1%2011%201%205%201-6c1-8%204-17%205-17l1%203%203%205c2%202%202%203%202%205-1%203%202%206%203%203l8-11v2l2%204%202%202-2%202-2%203v-4c2-7-2-3-8%209-5%209-7%2017-7%2029%200%209%203%2015%2011%2023l6%206%201%2020v41c1%2023%202%2030%205%2032l2%203c0%203%207%2010%2012%2013l4%203%201%201c1-1%203%200%206%201l10%203%2012%201h29l2%201%202%201%204%205%205%208%202%204%201%201c0%203%202%207%204%207l1%202%206%208%203%205%203%203%205%208%203%207%204%205%204%204%202%202%201%203%202%202%203%204%203%203c-2%200%201%204%204%205l2%203%201%204c4%206%205%2010%205%2011l2%203c2%201%207%2012%207%2015l2%204%204%207c0%203%203%208%205%209l1%202%201%205%202%203%202%204%202%204%203%204%202%204%201%201v1l4%206c2%200%203%202%203%205l2%202%202%203%202%202c1%201%202%202%201%203l1%202%203%204c1%203%202%204%204%204l3%203%201%204%204%207%202%202%202%202c0%202%201%202%202%202%202-1%202%200%202%202l1%202c1%200%205%207%204%209l2%201%204%203%203%203%202%203%201%203v2c-1%201%200%201%203%201%204%201%205%202%202%204h-2l2%201%202%202%204%205c4%203%204%204%204%208l1%205v2c-1%202-1%202%201%203%201%200%203%201%203%203l2%202%201%202c0%202%201%202%2024%202h24V184l-5-2c-3-2-6-2-13-2-10%200-14-1-14-3l-5-1-6-1c-2-3-5-3-5-1%200%203%200%203-8-4-4-4-7-7-9-7l-3-1-3-2c-3%200-14-6-15-8%200-2-2-3-3-4l-2-2-2-4-4-5c-1-2-2-4-4-4l-3-2-2-1-1-1c1-1%200-3-1-3-2-2-2-2%200-6l3-3c2%200%201-4-1-5l-3-1-1-1c-3%200-5-4-5-9s-1-7-2-7c-5-3-7-5-6-7l3-2a72%2072%200%200017-9l6-4%208-5%206-3c5-3%2011-5%2020-6l10-1%202%203%203%202c2-1%208%202%2013%207l4%203%203%202%202%202%202%201%204%201c4%200%209%202%209%203l2%201%201%201%202%201%203%202c3%203%203%203%203-9l-1-12-2-3-1-1c-2%200-2%201-2%204%200%205-1%205-4%203-2-2-2-3-1-8v-6l-3%202c-3%201-4%201-3-3%202-7%206-12%2014-18%203-2%203-3%203-8v-5l-7%206a267%20267%200%2000-22%2021v-4c2-6%2017-21%2024-24l5-1V0h-72l-12%208-11%207-3-1-4-1-2%201c-2%201-2%201-1%202l1%203%202%202%201%201c0%202%206%205%2013%205v2l1%202v5h-18c-5-1-9%200-8%202%200%203-6%209-12%2012l-5%203-4%203c-3%201-5%203-5%204l-3%202-2%201-2%205v4c1%202%2014-5%2021-12l7-6%206-4%209-4c2%200%204-2%205-3l9-2%2010-1c3-2%207-2%209-1%202%202%201%204-2%204l-8%203-5%201c-12%202-21%205-21%209%200%202%200%202%203%202l6-2c5%200%2012-4%2012-5%201-3%2010-4%2014-2%203%202-1%205-12%2010l-9%206-3%202-1%201-4%202-4%201-1%201-2%201c-3%203-18%206-32%207l-16%201c-2%201-2%201-1-2%200-4-2-7-4-4l-5%201h-5c-1%202-2%201-2-4%200-7-1-11-4-12-1%200-3%202-3%204v1l-2-2-2-3-1-2c0-2%200-2-2-2-7%203-7%202-10-2l-3-4-1-2-2-3-3-5c0-2-1-4-3-5l-1-3-4-4-4-4-3-5c-4-4-6-6-7-9l-2-2-2-4V0h-6l-6%201h-2c-1-1-1%200-1%205m91-4l-5%203v3c-1%203-1%203%201%202%203%200%203%200%203%202l2%205h2v-2l1-1c2-4%205%200%205%207%200%204%201%204%204-1l4-4%202-4c2-4%203-2%203%203%200%204%200%205%202%205%204%200%207-2%205-5V6c2%200%203%203%203%207%200%203%201%204%203%204h3c2%201%203%200%203-3s0-4%202-4l3-2h3c2%202%202%202%203%201l7-5%205-3-5-1c-6%200-11%202-9%203l1%203v2l-2-2c-2-2-3-2-3-1l-2%202V3l1-2-2%201h-2c-2-3-3-2-5%200l-2%202-2-2c-2-3-26-3-32%200m-73%2090a19366%2019366%200%2000-191%20129l-14%2010-65%2044c-6%204-6%204-8%202-2-1-2-1-6%201l-9%207c-5%203-5%203-4%206%200%203-1%206-3%205-2%200-1%203%201%205%201%201%201%201%203-1l3-2%2020-13v-2c-2-2-3-1%2010-10a1129%201129%200%200174-47%20485%20485%200%200149-31%20400%20400%200%200144-28l15-10a3513%203513%200%200082-56l2-7c2-5%202-5-3-2m-614%2019c-36%2017-39%2018-38%2020%200%202%204%200%2032-13%2028-14%2032-16%2028-18l-22%2011m638%2096l-7%201c-2%200-4%201-7%205-6%207-9%2010-18%2017-6%205-9%207-7%207l4-3a143%20143%200%200134-22c6-2%206-2%205-5%200-2-1-2-4%200m-831%209l1%205%201%205c1%205%208%2015%208%2011h3l1%203%202%203c2%202%203%204%202%205h2c-1%201%201%205%203%206l1%205h2c2%200%202%200%202%202-1%203-1%203%201%202v3c1%200%203%202%204%205l4%205%202%202%201%201c2%200%201-3%200-4l-2-3-1-1-1-1-5-9a260%20260%200%2001-21-33c-2-3-3-4%200-3l-1-2-3-3c-1%201-3-1-5-5-1-3-2-2-1%201m737%205l-3%203-1%201c-1-1-7%205-9%2010-3%205-3%205-1%205l2%202%203%202c2%200%203-1%203-2%200-2%202-3%207-2%202%200%203-1%203-2l2-1c2%201%202-1%204-9%200-5-1-8-2-6h-1c0-2-3-2-7-1m139%205l2%201%203%202c5%205%209%206%2031%208l15%201-19-5a191%20191%200%2000-22-6c-8-2-11-3-10-1M56%20250a527%20527%200%200134%2064l8%2011a152%20152%200%200131%2045l4%206%203%205%204%207%206%207%201%202%203%204a127%20127%200%200116%2024l4%206%201%202c0%202%204%206%205%206l1%201%202%204%202%204a116%20116%200%200011%2017l10%2013%202%203%205%206%201%201%201%203%202%203%202%202%201%201%202%204%204%206%203%204%201%201%201%203%209%2013%204%206%203%205%204%205%201%201%204%206%203%206%201%201a198%20198%200%200019%2029l6%209%208%2012a659%20659%200%200038%2056%20195%20195%200%200110%2015%20420%20420%200%200029%2041%20221%20221%200%2000-24-38l-6-10a216%20216%200%2001-13-19l-6-9-4-6-1-2-1-1-1-1-1-2-5-8a116%20116%200%2000-8-12l-1-1-1-1-3-5-3-4a562%20562%200%2000-36-55%202261%202261%200%2000-38-57%20220%20220%200%2001-33-54c-1%200-1%202%201%204v2a240%20240%200%2001-24-35l-7-10-4-8-3-7-4-7c1-2-1-6-2-6l-2%202-4-3a2888%202888%200%2000-27-44%20641%20641%200%2001-22-36l-2%202-7-10-4-6c-4-6-5-9-2-9%201%200%201-1-1-3l-5-6-4-5c-2-2-2-2-2%200m829%2048l-4%201c-4%200-9%203-9%206l-1%203c-1%201%200%2011%202%2016l4%208c2%205%206%208%2010%207h4l7%201h3c4%201%2021-5%2024-9l4-3%201-1-2-1c-3%200-3-2%200-3%203-2%204-5%202-5l-2-1c-1-2-2-2-5-1-5%200-6-1-4-2%202-2%201-5-1-6l-3-4c0-2%200-2-5-2-4%200-5-1-5-2l-1-1-2-1c0-2-14-2-17%200m-387%2038c-4%203-4%203%200%208l4%203c1-1%202%200%202%201l4-2c2-2%202-2%200-1-2%200-2%200-1-2%202-1%202-2-1-5-4-6-5-6-8-2m22%207c-4%203-4%204-4%206v3l-1-1c0-3-3-2-6%200l-3%203%202%202c2%202%205%202%208%201%202-2%201%201-2%203l-2%201%202%201c2%201%204%200%209-2%206-4%208-5%206-2-3%202-2%203%201%203l9-5c0-1-4-2-6-1-3%201-3%201-2-1l-1-2h-2l-3-1v-4l-1-6c0-2-1-1-4%202m-18%2013l-4%201-6%203c-7%204-9%206-8%208%200%202%201%202%205%200l3-4c-1-1%203-4%204-3%202%201%205%201%208-1%203-1%203-3%201-5l-3%201m-78%2025c-4%203-4%203%201%208l3%203%203-2%204-3-1-1-2-4c-3-5-4-5-8-1m53%208c-9%205-11%207-7%208%205%201%2020-9%2018-12%200-2-2-1-11%204m-39%2010c-3%201-4%203-4%204%201%201%201%201-1%201-1-1-16%2010-15%2011a72%2072%200%200019-10l8-5-3-4-4%203m15%204c-13%208-13%208-10%2011%203%202%203%202%206%200l3-3c-1-1%200-2%204-2l3-1%203-4c3-3%203-6%201-7l-10%206m-19%2012l-9%205c-6%203-8%205-6%205l1%202c0%204%2015-2%2019-7%202-2%202-3%201-5-1-3-2-3-6%200m524%2010h-4l-2%201-4%202c-4%201-4%201-4%206%200%207%205%2010%208%205h2l-1%204c-2%202%200%203%206%202%206%200%2013-4%2013-7s-1-6-3-6l-1-1-2-3-3-1-1-1-2-1h-2m-614%205c-4%204-5%209-3%2010%201%201%206-2%2012-7l2-2-2-3c-4-3-5-3-9%202m67%200l-5%202c-2-1-8%204-8%206s5%203%2011%201c4-1%2011-8%2011-9-1-3-6-3-9%200m-65%2010c-2%202-3%203-3%205l-1%204c-2%200-1%202%201%204%202%201%202%201%205-1h2c0%203%203%203%206%201%203-1%204-3%202-3s-1-3%201-4c2-2%203-3%202-4-1-3-2-4-5-2-2%201-2%201-3-1-2-2-4-1-7%201m43%202l-11%206c-8%204-9%206-3%208%204%201%2010%200%2013-3l6-5c6-3%206-3%203-7-2-3-2-3-8%201m-30%2016c-3%202-4%204-2%204l1%201c-1%201%200%203%201%204l2%202%204-2c5-3%204-3%203-6-2-4-5-5-9-3m517%20173c7%2031-3%2050-42%2081l-6%205-3%203h51l1-3c5-10%206-25%203-37l-1-8%201-13c0-13-1-21-3-27l-1-1m-189%2078c-7%202-18%2011-14%2011l6-3c12-7%2025-7%2037%200l7%203h2l-2-3c-8-8-25-12-36-8'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/da843928f0dc5f1b18238733ea3259c1/29ba9/photo-1522159698025-071104a1ddbd.jpg","srcSet":"/static/da843928f0dc5f1b18238733ea3259c1/272de/photo-1522159698025-071104a1ddbd.jpg 270w,\n/static/da843928f0dc5f1b18238733ea3259c1/a5ccf/photo-1522159698025-071104a1ddbd.jpg 540w,\n/static/da843928f0dc5f1b18238733ea3259c1/29ba9/photo-1522159698025-071104a1ddbd.jpg 1080w","sizes":"(min-width: 1080px) 1080px, 100vw"},"sources":[{"srcSet":"/static/da843928f0dc5f1b18238733ea3259c1/f9186/photo-1522159698025-071104a1ddbd.webp 270w,\n/static/da843928f0dc5f1b18238733ea3259c1/25c40/photo-1522159698025-071104a1ddbd.webp 540w,\n/static/da843928f0dc5f1b18238733ea3259c1/984df/photo-1522159698025-071104a1ddbd.webp 1080w","type":"image/webp","sizes":"(min-width: 1080px) 1080px, 100vw"}]},"width":1080,"height":720}}},"excerpt":"A quick how-to on getting the Facebook export of your photos and videos, and then hosting them on Fission.","custom_excerpt":"A quick how-to on getting the Facebook export of your photos and videos, and then hosting them on Fission.","created_at_pretty":"10 November, 2019","published_at_pretty":"10 November, 2019","updated_at_pretty":"10 November, 2019","created_at":"2019-11-10T00:31:19.000-08:00","published_at":"2019-11-10T01:01:10.000-08:00","updated_at":"2019-11-10T01:01:10.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Facebook","slug":"facebook","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"photos","slug":"photos","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"videos","slug":"videos","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Facebook has a fairly extensive data export system built in. I decided to export\nmy photos and videos and put them up on Fission.\n\nFor now, this is a manual process and involves some command line usage. I'll\nwrite this up as an App Idea in our forum\n[https://talk.fission.codes/c/app-ideas]  and see if we can spend some time\nmaking this \"one-click\".\n\n> Please make that one click for me dude\n\n— Jamie Burke (@jamie247) November 9, 2019\n[https://twitter.com/jamie247/status/1193083841826770944?ref_src=twsrc%5Etfw]\nRead the Facebook help article on Accessing & Downloading Your Information\n[https://www.facebook.com/help/1701730696756992/]  for instructions on how to\nnavigate to the right section of your Facebook account.\n\nOn a desktop browser, it should be under the triangle in the upper right hand\ncorner, then Settings, then Your Facebook Information, then Download Your\nInformation.\n\nI don't upload much to Facebook and only cross-post my Instagram photos (which\nare cross-posted to my personal blog), so I clicked Deselect All  (says Select\nAll  in the screenshot above), and only selected Photos and Videos. I also set\nMedia Quality to \"High\" (although some people still report that these are still\nnot as large as the originals, which may only be accessible through the API).\n\nYou can experiment with including other items. But, be aware that because there\naren't any permissions, you may be sharing information you don't want to if you\npublish the files. Same goes for the photos. I have posted most things on\nFacebook the assumption that they are \"public\".\n\nClick the Create File  button and go make a coffee. Facebook will notify when\nyour download is ready.\n\nJust over 13 years of Facebook.To download, you'll need to click on the Download  button and enter your\nFacebook password. You now have a zip file with browse-able HTML files and your\nphoto and video files.\n\nPutting your files online with Fission\nYou'll need to type a few commands into the command line Terminal on your\nmachine, but everything should just work if you copy-paste.\n\nInstall the IPFS Desktop [https://github.com/ipfs-shipyard/ipfs-desktop#install] \n and run it. You've got a graphical interface to explore your local IPFS server,\nwhich is running in the background.\n\nOn Mac, make sure you've got homebrew installed [https://brew.sh], then open the\nTerminal app and install the Fission tools using these commands:\n\nbrew tap fission-suite/fission\nbrew install fission-cli\n\nYou can find extended installation instructions in our Fission Guide\n[https://guide.fission.codes/installation], and I expect our friends running\nLinux will have no problem.\n\nNow, you're going to register for Fission.\n\nfission register\n\nYour username will be your subdomain, e.g. boris.fission.name. Pick a password\nand enter an email address. We are adding support for custom domain names, stay\ntuned!\n\nNow, you've got a zip file in your Downloads folder from Facebook, called\nsomething like \"facebook-YOURNAME.zip\". Unzip it and you'll have a\n\"facebook-YOURNAME\" folder.\n\nBack to the terminal! This is the last step!\n\nThe fission up  command is going to add all your files to IPFS, through your\nlocal IPFS Desktop. Then, Fission's server will get sent the hash that\nrepresents the folder, we'll use IPFS to keep a copy of all your files, and\nupdate DNS of your subdomain.\n\nThe following command will be correct if you're on a Mac and downloaded to the\nstandard downloads folder. Otherwise, just enter the path to where the unzipped\nFacebook folder is:\n\nfission up ~/Downloads/facebook-YOURNAME/\n\nI only had about 200MB of files, so this happened pretty quickly. Visit\nYOURNAME.fission.name in your browser and you should see something like this:\n\nYour Facebook photos are online and browse-able! You can see mine at \nboris.fission.name/Photos/facebook [https://boris.fission.name/Photos/facebook/] \n (I put mine in a subfolder, because I already host a bunch of public files on\nmy Fission site).\n\nTechnically the files are being served directly from your computer, when you're\nonline and have IPFS Desktop running. The Fission service is also serving those\nfiles, and stays online when you're offline. As a next step, you can explore\ninstalling the IPFS Companion browser extension\n[https://github.com/ipfs-shipyard/ipfs-companion]  which will access IPFS\ncontent natively.\n\nJoin us in our Discord chat forum [https://fission.codes/discord]  if you have\nquestions or just come say \"hi\"!","html":"<p>Facebook has a fairly extensive data export system built in. I decided to export my photos and videos and put them up on Fission.</p><p>For now, this is a manual process and involves some command line usage. I'll write this up as an <a href=\"https://talk.fission.codes/c/app-ideas\">App Idea in our forum</a> and see if we can spend some time making this \"one-click\".</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Please make that one click for me dude</p>&mdash; Jamie Burke (@jamie247) <a href=\"https://twitter.com/jamie247/status/1193083841826770944?ref_src=twsrc%5Etfw\">November 9, 2019</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><!--kg-card-end: embed--><p>Read the Facebook help article on <a href=\"https://www.facebook.com/help/1701730696756992/\">Accessing &amp; Downloading Your Information</a> for instructions on how to navigate to the right section of your Facebook account.</p><p>On a desktop browser, it should be under the triangle in the upper right hand corner, then <em>Settings</em>, then <em>Your Facebook Information</em>, then <em>Download Your Information</em>.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/11/Screenshot-2019-11-09-at-8.29.37-AM-1.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>I don't upload much to Facebook and only cross-post my Instagram photos (which are cross-posted to my personal blog), so I clicked <em>Deselect All</em> (says <em>Select All</em> in the screenshot above), and only selected Photos and Videos. I also set Media Quality to \"High\" (although some people still report that these are still not as large as the originals, which may only be accessible through the API).</p><p>You can experiment with including other items. But, be aware that because there aren't any permissions, you may be sharing information you don't want to if you publish the files. Same goes for the photos. I have posted most things on Facebook the assumption that they are \"public\".</p><p>Click the <em>Create File</em> button and go make a coffee. Facebook will notify when your download is ready.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2019/11/Screenshot-2019-11-09-at-8.38.38-AM-1.png\" class=\"kg-image\"><figcaption>Just over 13 years of Facebook.</figcaption></figure><!--kg-card-end: image--><p>To download, you'll need to click on the <em>Download</em> button and enter your Facebook password. You now have a zip file with browse-able HTML files and your photo and video files.</p><h2 id=\"putting-your-files-online-with-fission\">Putting your files online with Fission</h2><p>You'll need to type a few commands into the command line Terminal on your machine, but everything should just work if you copy-paste.</p><p><a href=\"https://github.com/ipfs-shipyard/ipfs-desktop#install\">Install the IPFS Desktop</a> and run it. You've got a graphical interface to explore your local IPFS server, which is running in the background.</p><p>On Mac, make sure you've got <a href=\"https://brew.sh\">homebrew installed</a>, then open the Terminal app and install the Fission tools using these commands:</p><!--kg-card-begin: code--><pre><code class=\"language-bash\">brew tap fission-suite/fission\nbrew install fission-cli</code></pre><!--kg-card-end: code--><p>You can find extended <a href=\"https://guide.fission.codes/installation\">installation instructions in our Fission Guide</a>, and I expect our friends running Linux will have no problem.</p><p>Now, you're going to register for Fission.</p><!--kg-card-begin: code--><pre><code class=\"language-bash\">fission register</code></pre><!--kg-card-end: code--><p>Your username will be your subdomain, e.g. <code>boris.fission.name</code>. Pick a password and enter an email address. We are adding support for custom domain names, stay tuned!</p><p>Now, you've got a zip file in your Downloads folder from Facebook, called something like \"facebook-YOURNAME.zip\". Unzip it and you'll have a \"facebook-YOURNAME\" folder.</p><p>Back to the terminal! This is the last step!</p><p>The <code>fission up</code> command is going to add all your files to IPFS, through your local IPFS Desktop. Then, Fission's server will get sent the hash that represents the folder, we'll use IPFS to keep a copy of all your files, and update DNS of your subdomain.</p><p>The following command will be correct if you're on a Mac and downloaded to the standard downloads folder. Otherwise, just enter the path to where the unzipped Facebook folder is:</p><!--kg-card-begin: code--><pre><code class=\"language-bash\">fission up ~/Downloads/facebook-YOURNAME/</code></pre><!--kg-card-end: code--><p>I only had about 200MB of files, so this happened pretty quickly. Visit YOURNAME.fission.name in your browser and you should see something like this:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/11/Screenshot-2019-11-09-at-9.33.57-AM-1.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>Your Facebook photos are online and browse-able! You can see mine at <a href=\"https://boris.fission.name/Photos/facebook/\">boris.fission.name/Photos/facebook</a> (I put mine in a subfolder, because I already host a bunch of public files on my Fission site).</p><p>Technically the files are being served directly from your computer, when you're online and have IPFS Desktop running. The Fission service is also serving those files, and stays online when you're offline. As a next step, you can explore installing the <a href=\"https://github.com/ipfs-shipyard/ipfs-companion\">IPFS Companion browser extension</a> which will access IPFS content natively.</p><p>Join us in our <a href=\"https://fission.codes/discord\">Discord chat forum</a> if you have questions or just come say \"hi\"!</p>","url":"https://blog.fission.codes/exporting-your-facebook-photos-to-fission/","canonical_url":null,"uuid":"74f42f87-7308-45b9-8e73-7b42dc192d6e","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dc7cad72c7d24001ef7ff16","reading_time":null}}]}},"pageContext":{"slug":"how-to","pageNumber":0,"humanPageNumber":1,"skip":0,"limit":12,"numberOfPages":1,"previousPagePath":"","nextPagePath":""}},"staticQueryHashes":["1752937443","2358152166","2561578252","2731221146","4145280475"]}