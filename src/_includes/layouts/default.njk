<!DOCTYPE html>
<html lang="{{ site.lang }}" class="no-js">
    <head>
        <meta charset="UTF-8" />
        <title>
            {%- if title -%}
                {{ title }} – {{ site.title }}
            {%- else -%}
                {{ site.title }} – {{ site.description }}
            {%- endif -%}
        </title>
        <meta name="description" content="{% block description %}{{ site.description }}{% endblock %}">
        <meta name="robots" content="index,follow">
        <meta name="generator" content="Eleventy">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
        <link rel="icon" type="image/svg+xml" href="{{ "/images/favicon.svg" | relativePath(page) }}" sizes="any">
        <link rel="icon" href="{{ "/images/favicon.ico" | relativePath(page) }}" sizes="any" />

        {%- block seo -%}
            <!--Twitter Card-->
            <meta name="twitter:site" content="{{ site.twitter }}">
            <meta name="twitter:creator" content="{{ site.twitter }}">
            <meta name="twitter:card" content="summary_large_image">
            <meta name="twitter:url" content="{{ site.url + page.url }}">
            <meta name="twitter:title" content="{{ title + " – " + site.title if title else title }}">
            <meta name="twitter:description" content="{{ site.description }}">
            <meta name="twitter:image" content="{{ site.cover_image }}">

            <!--Schema-->
            <link rel="author" href="{{ site.url }}">
            <link rel="publisher" href="{{ site.url }}">
            <meta itemprop="name" content="{{ title + " – " + site.title if title else title }}">
            <meta itemprop="description" content="{{ site.description }}">
            <meta itemprop="image" content="{{ site.cover_image }}">

            <!-- Facebook OpenGraph -->
            <meta property="og:url" content="{{site.url + page.url}}">
            <meta property="og:type" content="website">
            <meta property="og:title" content="{{ title + " – " + site.title if title else title }}">
            <meta property="og:image" content="{{ site.cover_image }}">
            <meta property="og:description" content="{{ site.description }}">
            <meta property="og:site_name" content="{{ site.title }}">
            <meta property="og:locale" content="{{ site.lang }}">
            <meta property="article:author" content="{{ site.url }}">
        {%- endblock -%}

        <link rel="stylesheet" href="{{ "/stylesheet-new.css" | relativePath(page) }}" />
        <script defer data-domain="fission.codes" src="https://s.fission.codes/js/index.js"></script>

        <script defer src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/components/prism-core.min.js" integrity="sha512-9khQRAUBYEJDCDVP2yw3LRUQvjJ0Pjx0EShmaQjcHa6AXiOv6qHQu9lCAIR8O+/D8FtaCoJ2c0Tf9Xo7hYH01Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
        <script defer src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.28.0/plugins/autoloader/prism-autoloader.min.js" integrity="sha512-fTl/qcO1VgvKtOMApX2PdZzkziyr2stM65GYPLGuYMnuMm1z2JLJG6XVU7C/mR+E7xBUqCivykuhlzfqxXBXbg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

        <script>
            // Open the IndexedDB
            const openDB = () => {
                return new Promise((resolve, reject) => {
                    const request = indexedDB.open('myDatabase', 1);

                    request.onerror = (event) => reject(event.target.error);
                    request.onsuccess = (event) => resolve(event.target.result);

                    request.onupgradeneeded = (event) => {
                        const db = event.target.result;
                        db.createObjectStore('preferences', { keyPath: 'id' });
                    };
                });
            };

            // Save the radio button selection to IndexedDB
            const saveTimeSelection = async (selectedValue) => {
                const db = await openDB();
                const tx = db.transaction('preferences', 'readwrite');
                const store = tx.objectStore('preferences');
                const data = { id: 'timeSelection', value: selectedValue };

                store.put(data);

                return tx.complete;
            };

            // Retrieve the radio button selection from IndexedDB
            const getTimeSelection = async () => {
                const db = await openDB();
                const tx = db.transaction('preferences', 'readonly');
                const store = tx.objectStore('preferences');

                return new Promise((resolve, reject) => {
                    const request = store.get('timeSelection');
                    request.onerror = () => reject(request.error);
                    request.onsuccess = () => resolve(request.result);
                });
            };

            // Save the topic selections to IndexedDB
            const saveTopicSelections = async (selectedValues) => {
                const db = await openDB();
                const tx = db.transaction('preferences', 'readwrite');
                const store = tx.objectStore('preferences');
                const data = { id: 'topicSelections', value: selectedValues };

                store.put(data);

                return tx.complete;
            };

            // Retrieve the topic selections from IndexedDB
            const getTopicSelections = async () => {
                const db = await openDB();
                const tx = db.transaction('preferences', 'readonly');
                const store = tx.objectStore('preferences');

                return new Promise((resolve, reject) => {
                    const request = store.get('topicSelections');
                    request.onerror = () => reject(request.error);
                    request.onsuccess = () => resolve(request.result);
                });
            };

            const updateHighlighting = async () => {
                const storedRadioData = await getTimeSelection();
                const storedTopicData = await getTopicSelections();

                // Clear existing highlighting
                document.querySelectorAll('[data-time-horizon].relevant-to-this-human, [data-topic].relevant-to-this-human').forEach(el => {
                    el.classList.remove('relevant-to-this-human');
                });

                // Apply new highlighting based on preferences
                if (storedRadioData) {
                    document.querySelectorAll(`[data-time-horizon="${storedRadioData.value}"]`).forEach(el => {
                        el.classList.add('relevant-to-this-human');
                    });
                }

                if (storedTopicData) {
                    storedTopicData.value.forEach(topic => {
                        document.querySelectorAll(`[data-topic*="${topic}"]`).forEach(el => {
                            el.classList.add('relevant-to-this-human');
                        });
                    });
                }
            };

            document.addEventListener('DOMContentLoaded', async () => {
                // Newsletter Submission Handler - ToDo: move this to its own script file
                document.querySelector('.newsletter-form').addEventListener('submit', async (event) => {
                    event.preventDefault();
                    try {
                        const formData = new FormData(event.target)

                        const res = await fetch(
                            'https://api.form-data.com/f/aowqx8bp00phzprfdtxzqu',
                            {
                                method: 'POST',
                                body: JSON.stringify({ email: formData.get('email') }),
                                headers: { 'Content-Type': 'application/json' }
                            }
                        )
                        document.querySelector('.newsletter-form-wrapper').innerHTML = '<p class="input input-bordered font-normal pl-[25px] pr-[70px] relative z-10 h-[66px] leading-[66px] text-[20px] rounded-sm bg-neutral-0 text-neutral-500 border-neutral-700 ">Please check your email!</p>'
                    } catch (error) {
                        console.error(error)
                        document.querySelector('.newsletter-form input[type="email"]').classList.add('input-error')
                    }
                });

                // Overlay Menu - ToDo: move this to its own script file
                const overlayMenu = document.querySelector('.overlay-menu');

                // this function is used to open the menu
                const openOverlayMenu = () => {
                    overlayMenu.classList.remove('w-0', 'h-0', 'opacity-0');
                    overlayMenu.classList.add('w-screen', 'h-screen', 'opacity-100');
                }

                // this function is used to close the menu
                const closeOverlayMenu = () => {
                    overlayMenu.classList.remove('w-screen', 'h-screen', 'opacity-100');
                    overlayMenu.classList.add('w-0', 'h-0', 'opacity-0');
                }

                document.querySelector('.open-menu').addEventListener('click', openOverlayMenu)
                document.querySelector('.close-menu').addEventListener('click', closeOverlayMenu)

                // Modify home links if viewing the site via IPFS(doing this here instead of via relativePath to optimize performance metrics)
                if (window.location.origin.includes('https://ipfs.')) {
                    const homeLinks = document.querySelectorAll('.homepage-link')
                    homeLinks.forEach((link) => {
                        link.setAttribute('href', `${window.location.origin}/ipns/fissioncodes.fission.app/`);
                    })
                }

                // Radio button change event listener
                document.querySelectorAll('input[name="timeHorizon"]').forEach(radio => {
                    radio.addEventListener('change', async (event) => {
                        if (event.target.checked) {
                            await saveTimeSelection(event.target.value);
                            console.log('Time horizon option saved successfully.');
                            await updateHighlighting();
                        }
                    });
                });

                // Checkbox change event listener
                document.querySelectorAll('input[name="topic"]').forEach(checkbox => {
                    checkbox.addEventListener('change', async () => {
                        const selectedCheckboxes = Array.from(document.querySelectorAll('input[name="topic"]:checked'));
                        const selectedValues = selectedCheckboxes.map(checkbox => checkbox.value);

                        if (!checkbox.checked) document.querySelector('input[name="all-topics"]').checked = false;

                        await saveTopicSelections(selectedValues);
                        console.log('Topic selections saved successfully.');
                        await updateHighlighting();
                    });
                });

                document.querySelectorAll('input[name="all-topics"]').forEach(checkbox => {
                    checkbox.addEventListener('change', async () => {
                        document.querySelectorAll('input[name="topic"]').forEach(topicCheckbox => {
                            if (!checkbox.checked) return; 
                            topicCheckbox.checked = true;
                            topicCheckbox.dispatchEvent( new Event('change') );
                        });
                    });
                });

                const storedTimeData = await getTimeSelection();
                const storedTopicData = await getTopicSelections();

                if (storedTimeData) {
                    const selectedOption = document.querySelector(`input[name="timeHorizon"][value="${storedTimeData.value}"]`);
                    if (selectedOption) {
                        selectedOption.checked = true;
                    } else {
                        console.error('The stored radio button value does not exist in the DOM.');
                    }
                }

                if (storedTopicData) {
                    storedTopicData.value.forEach(topic => {
                        const selectedCheckbox = document.querySelector(`input[name="topic"][value="${topic}"]`);
                        if (selectedCheckbox) {
                            selectedCheckbox.checked = true;
                        } else {
                            console.error('A stored checkbox value does not exist in the DOM.');
                        }
                    });
                }

                await updateHighlighting();
            });
        </script>
        <script>document.documentElement.classList.remove('no-js');</script>

        {{ site.codeinjection_head | safe if site.codeinjection_head }}
        {{ codeinjection_head | safe if codeinjection_head }}
    </head>
    <body class="bg-neutral-50 text-base-900 dark:bg-neutral-800 dark:text-base-200">
        {% include "partials/icons.njk" %}
        {% include "partials/overlay-menu.njk" %}
        <div class="viewport">

            <div class="viewport-top pt-[72px]">
                {% block header %}
                {% endblock header %}

                <main class="site-main page-wrapper">
                    {% block content %}
                    {% endblock content %}
                </main>
            </div>

            <div class="viewport-bottom">
                {% include "partials/footer.njk" %}
            </div>

            {{ site.codeinjection_foot | safe if site.codeinjection_foot }}
            {{ codeinjection_foot | safe if codeinjection_foot }}
        </div>
    </body>
</html>
