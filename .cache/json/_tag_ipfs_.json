{"data":{"ghostTag":{"slug":"ipfs","name":"IPFS","feature_image":null,"description":"InterPlanetary File System","meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__6049c1d0c695c4001e8c7e86","title":"IPFS Local Offline Collaboration SIG","slug":"ipfs-local-offline-collaboration-sig","featured":false,"feature_image":"https://s3.fission.codes/2021/03/Screen-Shot-2021-03-10-at-11.13.36-PM-1.png","excerpt":"We presented Fission's approach to local first apps on IPFS to the Local Offline Collaboration SIG on March 10th, 2021.","custom_excerpt":"We presented Fission's approach to local first apps on IPFS to the Local Offline Collaboration SIG on March 10th, 2021.","created_at_pretty":"11 March, 2021","published_at_pretty":"10 March, 2021","updated_at_pretty":"11 March, 2021","created_at":"2021-03-10T23:08:00.000-08:00","published_at":"2021-03-10T09:00:00.000-08:00","updated_at":"2021-03-11T11:20:13.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"DWeb","slug":"dweb","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We presented Fission's approach to local first apps on IPFS with the Fission\npublishing platform and webnative SDK.\n\nOur guiding principle for using IPFS is: Everything should work in the browser,\nincluding on mobile, with no extensions required.\n\nThe Special Interest Group (SIG) focused on IPFS and local offline collaboration\nhas its home base on Github [https://github.com/ipfs/local-offline-collab/],\nwhich you can follow for updates and future meetings. \n\nThe slides are available on IPFS of course »\n[https://ipfs.runfission.com/ipfs/bafybeigr4crq5fe5kwump3pp3a2z74udgsgwum2yxb6cfwfntzez7rs4hu/p/2021-03-10%20IPFS%20Local%20Offline%20Collab.pdf]\n\nA great quote from Brooklyn:\n\n> We're trying to make IPFS boring!\nMeaning: it should just work, and be reliable, and provide great capabilities to\ndevelopers and app users alike.\n\nThe two key links from follow up are:\n\n * Leveraging ws://localhost provided by local IPFS node \n   https://github.com/ipfs/in-web-browsers/issues/177\n * Manifest file for IPFS gateway https://github.com/ipfs/go-ipfs/issues/6214\n\nThanks for inviting us to present!\n\n\n--------------------------------------------------------------------------------\n\nSubscribe to be notified of future events Fission is hosting or presenting at »\n[https://lu.ma/fission]","html":"<p>We presented Fission's approach to local first apps on IPFS with the Fission publishing platform and webnative SDK.</p><p>Our guiding principle for using IPFS is: Everything should work in the browser, including on mobile, with no extensions required.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2021/03/Screen-Shot-2021-03-10-at-11.17.42-PM.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>The Special Interest Group (SIG) focused on IPFS and local offline collaboration has its <a href=\"https://github.com/ipfs/local-offline-collab/\">home base on Github</a>, which you can follow for updates and future meetings. </p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe width=\"200\" height=\"113\" src=\"https://www.youtube.com/embed/0zUg20816hU?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe></figure><!--kg-card-end: embed--><p>The slides are <a href=\"https://ipfs.runfission.com/ipfs/bafybeigr4crq5fe5kwump3pp3a2z74udgsgwum2yxb6cfwfntzez7rs4hu/p/2021-03-10%20IPFS%20Local%20Offline%20Collab.pdf\">available on IPFS of course »</a></p><p>A great quote from Brooklyn:</p><blockquote>We're trying to make IPFS boring!</blockquote><p>Meaning: it should just work, and be reliable, and provide great capabilities to developers and app users alike.</p><p>The two key links from follow up are:</p><ul><li>Leveraging ws://localhost provided by local IPFS node <a href=\"https://github.com/ipfs/in-web-browsers/issues/177\">https://github.com/ipfs/in-web-browsers/issues/177</a></li><li>Manifest file for IPFS gateway <a href=\"https://github.com/ipfs/go-ipfs/issues/6214\">https://github.com/ipfs/go-ipfs/issues/6214</a></li></ul><p>Thanks for inviting us to present!</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p><a href=\"https://lu.ma/fission\"><strong>Subscribe to be notified of future events Fission is hosting or presenting at »</strong></a></p>","url":"https://blog.fission.codes/ipfs-local-offline-collaboration-sig/","canonical_url":null,"uuid":"bf9daf16-d543-4ac3-bb2c-89508654c2ce","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"6049c1d0c695c4001e8c7e86","reading_time":null}},{"node":{"id":"Ghost__Post__60390451d064ac001e8042de","title":"Zero-Config Fission-Powered Ghost Blog","slug":"fission-powered-ghost-blog-starter","featured":false,"feature_image":"https://s3.fission.codes/2021/03/dawit-sCKjl0AyO-4-unsplash.jpg","excerpt":"In five minutes, anyone can have a Ghost blog up and running, with media uploads hosted on IPFS thanks to Fission.","custom_excerpt":"In five minutes, anyone can have a Ghost blog up and running, with media uploads hosted on IPFS thanks to Fission.","created_at_pretty":"26 February, 2021","published_at_pretty":"08 March, 2021","updated_at_pretty":"08 March, 2021","created_at":"2021-02-26T06:23:13.000-08:00","published_at":"2021-03-08T09:09:17.000-08:00","updated_at":"2021-03-08T09:09:16.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Helder S Ribeiro","slug":"agentofuser","bio":"Deleting the chasm between using and programming computers.","profile_image":"https://s3.fission.codes/2021/02/2020-1024px.jpg","twitter":"@agentofuser","facebook":null,"website":"https://agentofuser.com"}],"primary_author":{"name":"Helder S Ribeiro","slug":"agentofuser","bio":"Deleting the chasm between using and programming computers.","profile_image":"https://s3.fission.codes/2021/02/2020-1024px.jpg","twitter":"@agentofuser","facebook":null,"website":"https://agentofuser.com"},"primary_tag":{"name":"Headless CMS","slug":"headless-cms","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Headless CMS","slug":"headless-cms","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Headless Ghost","slug":"headless-ghost","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Heroku","slug":"heroku","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Ghost","slug":"ghost-tag","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"In five minutes, anyone can have a Ghost blog up and running, with media uploads\nhosted on IPFS thanks to Fission.\n\n\n\nThinking of starting a Ghost blog but leaning towards \"nah, too much work\"?\n\nHere's how you do it with Fission's Ghost Blog Starter\n[https://github.com/fission-suite/heroku-ipfs-ghost]: click a button, choose a\nURL, watch a couple of spinners do their thing, and voilà: a production-ready\nGhost blog instance is live on Heroku in less than 5 minutes.\n\nBest of all? Image and video uploads—which aren't supported by default on Heroku\ndue to its read-only filesystem—are built-in and work seamlessly. The Fission\nHeroku Add-on [https://elements.heroku.com/addons/interplanetary-fission]  takes\ncare of everything without intervention, creating a new Fission account for your\nblog, handling media uploads, and serving those assets for you on HTTPS and on\nthe peer-to-peer IPFS network.\n\nGoing Headless\nGhost is a great platform for authors, with almost a decade of accumulated\nimprovements in user experience.\n\nOne shortcoming though is that it doesn't scale beyond a single server:\n\n> Ghost doesn’t support load-balanced clustering or multi-server setups of any\ndescription, there should only be one  Ghost instance per site.\n— Ghost documentation\n[https://ghost.org/docs/faq/clustering-sharding-multi-server/]\nCaching pages and serving them via a content delivery network  (CDN) is one way\nto mitigate this. But if content has to be turned into static files and served\nfrom the edge anyway, why not go a step further and decouple Ghost, the\nauthoring interface, from the code that generates those files based on the\ncontent?\n\nThat's the Headless CMS  approach, where a static site generator\n[https://jamstack.org/generators/]  pulls the content from the content\nmanagement system and builds the pages that can be served super-fast at scale at\nthe edge. This opens up the possibility to tap into a rich ecosystem of frontend\ndevelopment tools and components (like React and others) for a much richer\ncontent experience, along with security and performance benefits.\n\nOn a previous post, we described how we're moving our own blog to a Headless\nGhost + Next.js [https://blog.fission.codes/headless-ghost-blog-fission/] \nsetup. This allows us not only to make the best out of what the frontend can do,\nbut also to showcase how Fission enables personalization at the edge, something\nthat used to be possible only with dynamically-rendered server-hosted websites.\n\nBy using our Ghost blog starter\n[https://github.com/fission-suite/heroku-ipfs-ghost], you can try this setup for\nyourself and follow along as we continue to share tools, process, and lessons on\nour own path to a webnative publishing experience.","html":"<p>In five minutes, anyone can have a Ghost blog up and running, with media uploads hosted on IPFS thanks to Fission.</p><!--kg-card-begin: markdown--><p><img src=\"https://demos.fission.app/fission-heroku-ipfs-ghost-2x.gif\" alt=\"demo of fission's ghost starter deploying to heroku\"></p>\n<!--kg-card-end: markdown--><p>Thinking of starting a Ghost blog but leaning towards \"nah, too much work\"?</p><p>Here's how you do it with <a href=\"https://github.com/fission-suite/heroku-ipfs-ghost\">Fission's Ghost Blog Starter</a>: click a button, choose a URL, watch a couple of spinners do their thing, and <em>voilà</em>: a production-ready Ghost blog instance is live on Heroku in less than 5 minutes.</p><p>Best of all? Image and video uploads—which aren't supported by default on Heroku due to its read-only filesystem—are built-in and work seamlessly. The <a href=\"https://elements.heroku.com/addons/interplanetary-fission\">Fission Heroku Add-on</a> takes care of everything without intervention, creating a new Fission account for your blog, handling media uploads, and serving those assets for you on HTTPS and on the peer-to-peer IPFS network.</p><h3 id=\"going-headless\">Going Headless</h3><p>Ghost is a great platform for authors, with almost a decade of accumulated improvements in user experience.</p><p>One shortcoming though is that it doesn't scale beyond a single server:</p><blockquote>Ghost doesn’t support load-balanced clustering or multi-server setups of any description, there should only be <em><strong>one</strong></em> Ghost instance per site.<br>— <a href=\"https://ghost.org/docs/faq/clustering-sharding-multi-server/\">Ghost documentation</a></blockquote><p>Caching pages and serving them via a <em>content delivery network</em> (CDN) is one way to mitigate this. But if content has to be turned into static files and served from the edge anyway, why not go a step further and decouple Ghost, the authoring interface, from the code that generates those files based on the content?</p><p>That's the <strong>Headless CMS</strong> approach, where a <a href=\"https://jamstack.org/generators/\">static site generator</a> pulls the content from the content management system and builds the pages that can be served super-fast at scale at the edge. This opens up the possibility to tap into a rich ecosystem of frontend development tools and components (like React and others) for a much richer content experience, along with security and performance benefits.</p><p>On a previous post, we described how we're moving our own blog to a <a href=\"https://blog.fission.codes/headless-ghost-blog-fission/\">Headless Ghost + Next.js</a> setup. This allows us not only to make the best out of what the frontend can do, but also to showcase how Fission enables personalization at the edge, something that used to be possible only with dynamically-rendered server-hosted websites.</p><p>By using our <a href=\"https://github.com/fission-suite/heroku-ipfs-ghost\">Ghost blog starter</a>, you can try this setup for yourself and follow along as we continue to share tools, process, and lessons on our own path to a webnative publishing experience.</p>","url":"https://blog.fission.codes/fission-powered-ghost-blog-starter/","canonical_url":null,"uuid":"d60a1fa2-0ae9-48f5-aa0e-c3755d66116d","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"60390451d064ac001e8042de","reading_time":null}},{"node":{"id":"Ghost__Post__6033d1a3151ab1001ec3de6c","title":"Fission Demo Day February 2021","slug":"fission-demo-day-february-2021","featured":false,"feature_image":"https://s3.fission.codes/2021/02/Untitled-design--7-.png","excerpt":"We meet on the third-Thursday-of-the-month for \"Demo Days\" where the Fission team talks about new releases & product updates, early demos of in-progress work, planned roadmap items followed by an open Q&A. ","custom_excerpt":"We meet on the third-Thursday-of-the-month for \"Demo Days\" where the Fission team talks about new releases & product updates, early demos of in-progress work, planned roadmap items followed by an open Q&A. ","created_at_pretty":"22 February, 2021","published_at_pretty":"23 February, 2021","updated_at_pretty":"23 February, 2021","created_at":"2021-02-22T07:45:39.000-08:00","published_at":"2021-02-22T17:00:00.000-08:00","updated_at":"2021-02-22T22:26:40.000-08:00","meta_title":"Fission Demo Day February 20201","meta_description":"The Fission team talks about new releases & product updates, early demos of in-progress work, planned roadmap items followed by an open Q&A. ","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Courtney Hall","slug":"courtney","bio":"I'm a content writer and marketer in Charlotte, NC.","profile_image":"https://s3.fission.codes/2021/02/me.jpg","twitter":"@contentcourtney","facebook":null,"website":null},{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"}],"primary_author":{"name":"Courtney Hall","slug":"courtney","bio":"I'm a content writer and marketer in Charlotte, NC.","profile_image":"https://s3.fission.codes/2021/02/me.jpg","twitter":"@contentcourtney","facebook":null,"website":null},"primary_tag":{"name":"Fission Demo Day","slug":"fission-demo-day","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Fission Demo Day","slug":"fission-demo-day","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"app","slug":"app-tag","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"TiddlyWiki","slug":"tiddlywiki","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Security","slug":"security","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Product","slug":"product","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Ghost","slug":"ghost-tag","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Headless Ghost","slug":"headless-ghost","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"Heroku","slug":"heroku","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"open source","slug":"open-source","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We meet on the third-Thursday-of-the-month for \"Demo Days\" where the Fission\nteam talks about new releases & product updates, early demos of in-progress\nwork, planned roadmap items followed by an open Q&A. We also invite the\ncommunity to come and give app demos. This week we invited Jeremy Rustin of the\nTiddlyWiki project to talk about his product and our plans to integrate\nFission’s Webnative SDK with TiddlyWiki. \n\nMeet the Team\nOur distributed team continues to grow with team members spanning from our HQ in\nVancouver across three continents. Our newest addition is Courtney in 🇺🇸 North\nCarolina, United States. \n\nCourtney (@Courtney [https://talk.fission.codes/u/courtney]) joins us as our\nMarketing Lead. This was her first week with Fission and her first demo day.\nLook for more blog posts and email updates from Courtney about what's going on\nwith Fission. \n\nFission and Headless Ghost\nFission teammate Helder (@agentofuser [https://talk.fission.codes/u/agentofuser]\n) shared his work with Headless Ghost and Fission. He showed us how to use the\nGhost CMS as a familiar editing interface for content producers and then pulling\nthe content into a Next.JS website via API. Then, the content is compiled into a\nstatic website using React and deployed to the Fission platform. Check out the\nvideo to hear the details of this process. \n\nFilecoin Backup App\nNext, we heard from Ben (@benjaminbollen\n[https://talk.fission.codes/u/benjaminbollen]) and Brian (@bgins\n[https://talk.fission.codes/u/bgins]) about their work with Filecoin. Filecoin\nis a blockchain specifically used for storing files online without relying on a\nthird-party platform or company. Because Fission is also interested in working\nin browsers very securely, we decided to work with the Filecoin team on this\nproject. Hear from Ben and Brian about their progress in the Fission Demo Day\nvideo. \n\nIPFS Cluster Updates\nDaniel (@dholms [https://talk.fission.codes/u/dholms]) talked to us about his\nupdates to the IPFS Cluster. Fission is built on an Interplanetary File System\n(or IPFS) which is a global peer-to-peer network. Fission builds encryption on\ntop of the IPFS stack, running IPFS servers to make sure that your data stays\nonline and accessible directly from the browser, all with your security in mind.\nDaniel shares with us some recent backend infrastructure work he's doing to\nimprove our system performance. \n\nTiddlywiki and Fission\nJeremy Rustin (@jermolene [https://twitter.com/Jermolene]) is the creator of\nTiddlywiki, a serverless web app that allows users to create a non-linear\nnotebook for recording, organizing and sharing complex information. We're\ncollaborating to build an app that will allow users to use TiddlyWiki on the\nFission platform. You can hear from Jeremy directly in the Demo Day video. We’ve\nalso been working out in the open in the TiddlyWiki group on the Fission forum\n[https://talk.fission.codes/c/apps/tiddlywiki/57]  so hop over there to see\nwhat's going on. \n\nVideo\nJoin us next time\nWe're experimenting with Luma [https://lu.ma/]  for registering for events.\nClick the button below to sign up for the Fission March 2021 Demo Day, or visit\nthe event page [https://lu.ma/fission-march-2021]  »\n\nRegister for Event [https://lu.ma/event/evt-pBdosunE2c0q5Rl]","html":"<p>We meet on the third-Thursday-of-the-month for \"Demo Days\" where the Fission team talks about new releases &amp; product updates, early demos of in-progress work, planned roadmap items followed by an open Q&amp;A. We also invite the community to come and give app demos. This week we invited Jeremy Rustin of the TiddlyWiki project to talk about his product and our plans to integrate Fission’s Webnative SDK with TiddlyWiki. </p><h2 id=\"meet-the-team\">Meet the Team</h2><p>Our distributed team continues to grow with team members spanning from our HQ in Vancouver across three continents. Our newest addition is Courtney in 🇺🇸 North Carolina, United States. </p><p>Courtney (<a href=\"https://talk.fission.codes/u/courtney\">@Courtney</a>) joins us as our Marketing Lead. This was her first week with Fission and her first demo day. Look for more blog posts and email updates from Courtney about what's going on with Fission. </p><h2 id=\"fission-and-headless-ghost\">Fission and Headless Ghost</h2><p>Fission teammate Helder (<a href=\"https://talk.fission.codes/u/agentofuser\">@agentofuser</a>) shared his work with Headless Ghost and Fission. He showed us how to use the Ghost CMS as a familiar editing interface for content producers and then pulling the content into a Next.JS website via API. Then, the content is compiled into a static website using React and deployed to the Fission platform. Check out the video to hear the details of this process. </p><h2 id=\"filecoin-backup-app\">Filecoin Backup App</h2><p>Next, we heard from Ben (<a href=\"https://talk.fission.codes/u/benjaminbollen\">@benjaminbollen</a>) and Brian (<a href=\"https://talk.fission.codes/u/bgins\">@bgins</a>) about their work with Filecoin. Filecoin is a blockchain specifically used for storing files online without relying on a third-party platform or company. Because Fission is also interested in working in browsers very securely, we decided to work with the Filecoin team on this project. Hear from Ben and Brian about their progress in the Fission Demo Day video. </p><h2 id=\"ipfs-cluster-updates\">IPFS Cluster Updates</h2><p>Daniel (<a href=\"https://talk.fission.codes/u/dholms\">@dholms</a>) talked to us about his updates to the IPFS Cluster. Fission is built on an Interplanetary File System (or IPFS) which is a global peer-to-peer network. Fission builds encryption on top of the IPFS stack, running IPFS servers to make sure that your data stays online and accessible directly from the browser, all with your security in mind. Daniel shares with us some recent backend infrastructure work he's doing to improve our system performance. </p><h2 id=\"tiddlywiki-and-fission\">Tiddlywiki and Fission</h2><p>Jeremy Rustin (<a href=\"https://twitter.com/Jermolene\">@jermolene</a>) is the creator of Tiddlywiki, a serverless web app that allows users to create a non-linear notebook for recording, organizing and sharing complex information. We're collaborating to build an app that will allow users to use TiddlyWiki on the Fission platform. You can hear from Jeremy directly in the Demo Day video. We’ve also been working out in the open in the <a href=\"https://talk.fission.codes/c/apps/tiddlywiki/57\">TiddlyWiki group on the Fission forum</a> so hop over there to see what's going on. </p><h2 id=\"video\">Video</h2><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/515125741?app_id=122963\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen; picture-in-picture\" allowfullscreen title=\"Fission February 2021 Demo Day\"></iframe></figure><!--kg-card-end: embed--><h2 id=\"join-us-next-time\"><strong>Join us next time</strong></h2><p>We're experimenting with <a href=\"https://lu.ma/\">Luma</a> for registering for events. Click the button below to sign up for the Fission March 2021 Demo Day, or <a href=\"https://lu.ma/fission-march-2021\">visit the event page</a> »</p><!--kg-card-begin: html--><a href=\"https://lu.ma/event/evt-pBdosunE2c0q5Rl\" class=\"luma-checkout--button\" data-luma-action=\"checkout\" data-luma-event-id=\"evt-pBdosunE2c0q5Rl\">\n  Register for Event\n</a>\n\n<script id=\"luma-checkout\" src=\"https://embed.lu.ma/checkout-button.js\"></script><!--kg-card-end: html-->","url":"https://blog.fission.codes/fission-demo-day-february-2021/","canonical_url":null,"uuid":"52a35b3a-7bb6-4fc6-abed-459c26adc746","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"6033d1a3151ab1001ec3de6c","reading_time":null}},{"node":{"id":"Ghost__Post__5f7d56dc5117dc001edafbdf","title":"Web Native File System Technical Design Overview","slug":"web-native-file-system-presentation","featured":false,"feature_image":"https://images.unsplash.com/photo-1524351543168-8e38787614e9?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"Brooklyn and Daniel from the Fission team present a technical overview of the Web Native File System.","custom_excerpt":"Brooklyn and Daniel from the Fission team present a technical overview of the Web Native File System.","created_at_pretty":"07 October, 2020","published_at_pretty":"14 August, 2020","updated_at_pretty":"19 November, 2020","created_at":"2020-10-06T22:49:16.000-07:00","published_at":"2020-08-13T22:49:00.000-07:00","updated_at":"2020-11-19T11:58:53.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ♥λ Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null},{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"WNFS","slug":"wnfs","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Fission has designed a spec for what we call the Web Native File System (WNFS).\nIt is implemented on top of IPFS and can be loaded in any browser, including\nmobile.\n\nWe’ve designed the system to store metadata, encrypt private files, and offer a\nnumber of features for end users and developers using the file system to build\nweb apps with a web native file system, where files are owned by users. This\nalso leads to a style of single tenant architecture for web apps, but for this\npresentation we will focus mainly on the file system details.\n\nJoin Brooklyn Zelenka and Daniel Holmgren as they present a technical design\noverview of WNFS. Leave a comment in the forum\n[https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818] \n if you have questions.\n\nSlides\nFull Slide deck available on Notist »\n[https://noti.st/expede/QAYFyW/webnative-file-system]Screencast\nSorry, your browser doesn't support embedded videos.Video\nResources\n * Slides on Notist [https://noti.st/expede/QAYFyW/webnative-file-system]\n * Fission Whitepaper\n   [https://whitepaper.fission.codes/file-system/file-system-basics]  (continues\n   to be a living document)\n * Implemented in webnative SDK on Github\n   [https://github.com/fission-suite/webnative], with basic info in the README \n * Extended usage and documentation in the Fission Guide\n   [https://guide.fission.codes/webnative-sdk/getting-started-webnative-sdk]","html":"<p>Fission has designed a spec for what we call the Web Native File System (WNFS). It is implemented on top of IPFS and can be loaded in any browser, including mobile.</p><p>We’ve designed the system to store metadata, encrypt private files, and offer a number of features for end users and developers using the file system to build web apps with a web native file system, where files are owned by users. This also leads to a style of single tenant architecture for web apps, but for this presentation we will focus mainly on the file system details.</p><p>Join Brooklyn Zelenka and Daniel Holmgren as they present a technical design overview of WNFS. Leave a <a href=\"https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818https://talk.fission.codes/t/fission-s-web-native-file-system-technical-design-overview-with-daniel-and-brooklyn/818\">comment in the forum</a> if you have questions.</p><h2 id=\"slides\">Slides</h2><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/10/common-concepts-virtual-nodes-large-34.png\" class=\"kg-image\"><figcaption><a href=\"https://noti.st/expede/QAYFyW/webnative-file-system\">Full Slide deck available on Notist »</a></figcaption></figure><!--kg-card-end: image--><h2 id=\"screencast\">Screencast</h2><!--kg-card-begin: html--><video width=\"100%\" height=\"100%\" controls>\n\n    <source src=\"https://ipfs.runfission.com/ipfs/QmaLfohLFTdBu3SU7H3CX6vT8qMZHjUQ8v2mYqcXosBnYY/Screencast_from_08-12-2020_090507_PM.webm\" type=\"video/webm\">\n\n    Sorry, your browser doesn't support embedded videos.\n</video>\n\n<!--kg-card-end: html--><h2 id=\"video\">Video</h2><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/479944561?app_id=122963\" width=\"426\" height=\"240\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Technical Overview of the Web Native File System with Brooklyn Zelenka, Daniel Holmgren - Fission Video Chat Aug 13, 2020\"></iframe></figure><!--kg-card-end: embed--><h2 id=\"resources\">Resources</h2><ul><li><a href=\"https://noti.st/expede/QAYFyW/webnative-file-system\">Slides on Notist</a></li><li><a href=\"https://whitepaper.fission.codes/file-system/file-system-basics\">Fission Whitepaper</a> (continues to be a living document)</li><li>Implemented in <a href=\"https://github.com/fission-suite/webnative\">webnative SDK on Github</a>, with basic info in the README </li><li>Extended usage and documentation in the <a href=\"https://guide.fission.codes/webnative-sdk/getting-started-webnative-sdk\">Fission Guide</a></li></ul>","url":"https://blog.fission.codes/web-native-file-system-presentation/","canonical_url":null,"uuid":"6f6ff611-83a0-4e6f-a8ef-8290044743d3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5f7d56dc5117dc001edafbdf","reading_time":null}},{"node":{"id":"Ghost__Post__5ea068b333f762001e6c6fae","title":"Experimenting with HLS Video Streaming and IPFS","slug":"experimenting-with-hls-video-streaming-and-ipfs","featured":false,"feature_image":"https://images.unsplash.com/photo-1501141178950-e7fa06e4adf5?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"Walk through of encoding video using HTTP Live Streaming (HLS) and publishing to Fission.","custom_excerpt":"Walk through of encoding video using HTTP Live Streaming (HLS) and publishing to Fission.","created_at_pretty":"22 April, 2020","published_at_pretty":"22 April, 2020","updated_at_pretty":"22 April, 2020","created_at":"2020-04-22T08:54:27.000-07:00","published_at":"2020-04-22T10:09:39.000-07:00","updated_at":"2020-04-22T10:09:39.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"HLS","slug":"hls","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We've been running weekly developer lunch & learn sessions\n[https://talk.fission.codes/c/events/dweblunchnlearn/27]  over video. I've been\ndownloading the video from Zoom, doing some basic trimming, and then uploading\nit using Fission, and embedding the IPFS link in our Discourse forum. This works\npretty well – Discourse recognizes the video file extension and embeds a video\nplayer in the post automatically. I had read a bit about HTTP Live Streaming\n(HLS) and wanted to experiment.\n\nOriginally developed by Apple, and now widely supported, HLS doesn't need any\nspecial server-side support. A bit more in this freeCodeCamp article:\n\n> The most important feature of HLS is its ability to adapt the bitrate of the\nvideo to the actual speed of the connection. This optimizes the quality of the\nexperience.\n\nHLS videos are encoded in different renditions at different resolutions and\nbitrates. This is usually referred to as the bitrate ladder. When a connection\ngets slower, the protocol automatically adjusts the requested bitrate to the\nbandwidth available.\n\n– freeCodeCamp: HLS Video Streaming: What it is, and When to Use it\n[https://www.freecodecamp.org/news/what-is-hls-and-when-to-use-it/]\nThere's an example in the JavaScript implementation of IPFS about using HLS\nwith\njs-ipfs\n[https://github.com/ipfs/js-ipfs/tree/master/examples/browser-video-streaming].\nThe README explains:\n\n> The fact that HLS content is just \"a bunch of files\" makes it a good choice for\nIPFS (another protocol that works this way is MPEG-DASH, which could certainly\nbe a good choice as well). Furthermore, the hls.js\n[https://github.com/video-dev/hls.js]  library enables straightforward\nintegration with the HTML5 video element.\n\"Just a bunch of files\" is pretty much how we're thinking about Fission. Fission\nand any standard IPFS gateway serves up files over HTTP and/or natively with\nIPFS, without plugins, in any browser. It's really great to get back to what is\nbasically the 2020 equivalent of upload files to the server.\n\nI took the latest video file of Joel talking about Ceramic Network\n[https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559] \n and ran the ffmpeg  command from the js-ipfs example. On MacOS, brew install\nffmpeg  will get you the program.\n\nffmpeg -i ../YOURVIDEO.mp4 -profile:v baseline -level 3.0 -start_number 0\n-hls_time 5 -hls_list_size 0 -f hls master.m3u8\n\nOn my desktop iMac, the progress showed to be encoding at 4x - 5x speed. The\nvideo is about an hour, so it took about 20 minutes to complete. The output is\n400+ files, which I uploaded with fission up  and then noted down the hash of\nthe folder.\n\nBrowse the files on IPFS using Fission Drive\n[https://drive.fission.codes/#/QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S]\nThen I went back and edited the streaming.js  folder and index.html. The \nstreaming.js  file just needs the hash of the folder that contains the\nHLS-encoded video, which for this video is \nQmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S. Feel free to use this to\nexperiment with! I kept the master.m3u8  file name so didn't need to change\nthat.\n\nOne change I made was to to also include the IPFS script from a CDN in the \nindex.html  file (the js-ipfs example assumes you're running things locally and\nworking with js-ipfs from there). Just add this line:\n\n<script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"></script>\n\nYou can browse all the files directly using Fission Drive\n[https://drive.fission.codes/#/events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network]\n, including the source video that was encoded. Visiting the index page\n[https://events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network/] \nwill load the player and HLS stream the video.\n\nExample HLS Video\nHere's the source and video embedded via Codepen – hit the HTML button to view\nsource. Note the Fission gateway link to the published version of the \nstreaming.js  file, also remotely included:\n\nThe video isn't very high quality to begin with, and adding width/height to the\nvideo element could constrain it to different sizes.\n\nMore about Joel and Ceramic Network on the forum event page »\n[https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559]\n\nConclusion\nThis is a very manual process, and there are lots of dedicated video encoding\nservices. It was a good experiment to see that anything that is a \"bunch of\nfiles\" can just work over the distributed IPFS network, and easily published and\nhosted on Fission.\n\nExperimenting with a large, high quality video and testing across different\ndevices and network speeds (and whether or not nearby peers had a copy of the\nvideo) would need to be done vs. just embedding the original video to see what\nthe user experience is actually like.\n\nThis also leads to some interesting thoughts about distributed encoding. Once an\noriginal video is encoded and added to the network by one person, it never needs\nto be encoded again. From some brief research, ffmpeg is not deterministic,\nwhich lead to this thread on Mastodon\n[https://mastodon.social/@Gargron/11088922]. This means that different people\nencoding a video could get different output files, which means different hashes\nin IPFS.\n\nHowever, the original video file is unique, so adding metadata to the original\nsource video file for discovery of the unique, permanent hash of an HLS-encoded\nversion could work.\n\nWe're currently doing some work on how to do this for images, so that different\nsizes are automatically available and cached in the network.\n\n\n--------------------------------------------------------------------------------\n\nFission is an app & web hosting platform that implements a web native file\nsystem powered by IPFS. Build and run locally, fission up  to host everywhere. \nRead our guide [https://guide.fission.codes]  to get started and sign up right\nfrom the command line.","html":"<p>We've been running <a href=\"https://talk.fission.codes/c/events/dweblunchnlearn/27\">weekly developer lunch &amp; learn sessions</a> over video. I've been downloading the video from Zoom, doing some basic trimming, and then uploading it using Fission, and embedding the IPFS link in our Discourse forum. This works pretty well – Discourse recognizes the video file extension and embeds a video player in the post automatically. I had read a bit about HTTP Live Streaming (HLS) and wanted to experiment.</p><p>Originally developed by Apple, and now widely supported, HLS doesn't need any special server-side support. A bit more in this freeCodeCamp article:</p><blockquote>The most important feature of HLS is its ability to adapt the bitrate of the video to the actual speed of the connection. This optimizes the quality of the experience.<br><br>HLS videos are encoded in different renditions at different resolutions and bitrates. This is usually referred to as the bitrate ladder. When a connection gets slower, the protocol automatically adjusts the requested bitrate to the bandwidth available.<br><br>– <a href=\"https://www.freecodecamp.org/news/what-is-hls-and-when-to-use-it/\">freeCodeCamp: HLS Video Streaming: What it is, and When to Use it</a></blockquote><p>There's an <a href=\"https://github.com/ipfs/js-ipfs/tree/master/examples/browser-video-streaming\">example in the JavaScript implementation of IPFS about using HLS with js-ipfs</a>. The README explains:</p><blockquote>The fact that HLS content is just \"a bunch of files\" makes it a good choice for IPFS (another protocol that works this way is MPEG-DASH, which could certainly be a good choice as well). Furthermore, the <a href=\"https://github.com/video-dev/hls.js\">hls.js</a> library enables straightforward integration with the HTML5 video element.</blockquote><p>\"Just a bunch of files\" is pretty much how we're thinking about Fission. Fission and any standard IPFS gateway serves up files over HTTP and/or natively with IPFS, without plugins, in any browser. It's really great to get back to what is basically the 2020 equivalent of upload files to the server.</p><p>I took the latest video file of <a href=\"https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559\">Joel talking about Ceramic Network</a> and ran the <code>ffmpeg</code> command from the js-ipfs example. On MacOS, <code>brew install ffmpeg</code> will get you the program.</p><p><code>ffmpeg -i ../YOURVIDEO.mp4 -profile:v baseline -level 3.0 -start_number 0 -hls_time 5 -hls_list_size 0 -f hls master.m3u8</code></p><p>On my desktop iMac, the progress showed to be encoding at 4x - 5x speed. The video is about an hour, so it took about 20 minutes to complete. The output is 400+ files, which I uploaded with <code>fission up</code> and then noted down the hash of the folder.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/04/hls-video-files-in-drive-600.png\" class=\"kg-image\"><figcaption>Browse the <a href=\"https://drive.fission.codes/#/QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S\">files on IPFS using Fission Drive</a></figcaption></figure><!--kg-card-end: image--><p>Then I went back and edited the <code>streaming.js</code> folder and <code>index.html</code>. The <code>streaming.js</code> file just needs the hash of the folder that contains the HLS-encoded video, which for this video is <code>QmYGs1ksGX3eMiGvxNuvRT6PD7zPKZpHyiUDXKGQoL4R7S</code>. Feel free to use this to experiment with! I kept the <code>master.m3u8</code> file name so didn't need to change that.</p><p>One change I made was to to also include the IPFS script from a CDN in the <code>index.html</code> file (the js-ipfs example assumes you're running things locally and working with js-ipfs from there). Just add this line:</p><p><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js\"&gt;&lt;/script&gt;</code></p><p>You can <a href=\"https://drive.fission.codes/#/events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network\">browse all the files directly using Fission Drive</a>, including the source video that was encoded. <a href=\"https://events.fission.name/2020/04-16-dweb-lunchnlearn-joel-ceramic-network/\">Visiting the index page</a> will load the player and HLS stream the video.</p><h2 id=\"example-hls-video\">Example HLS Video</h2><p>Here's the source and video embedded via Codepen – hit the HTML button to view source. Note the Fission gateway link to the published version of the <code>streaming.js</code> file, also remotely included:</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe id=\"cp_embed_GRprJoZ\" src=\"https://codepen.io/borismann/embed/preview/GRprJoZ?height=300&amp;slug-hash=GRprJoZ&amp;default-tabs=html,result&amp;host=https://codepen.io\" title=\"HLS Streaming over IPFS Example\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" class=\"cp_embed_iframe\" style=\"width: 100%; overflow: hidden;\"></iframe></figure><!--kg-card-end: embed--><p>The video isn't very high quality to begin with, and adding width/height to the video element could constrain it to different sizes.</p><p>More about <a href=\"https://talk.fission.codes/t/ceramic-network-technical-discussion-with-joel-thorstensson-cto-of-3box/559\">Joel and Ceramic Network on the forum event page »</a></p><h2 id=\"conclusion\">Conclusion</h2><p>This is a very manual process, and there are lots of dedicated video encoding services. It was a good experiment to see that anything that is a \"bunch of files\" can just work over the distributed IPFS network, and easily published and hosted on Fission.</p><p>Experimenting with a large, high quality video and testing across different devices and network speeds (and whether or not nearby peers had a copy of the video) would need to be done vs. just embedding the original video to see what the user experience is actually like.</p><p>This also leads to some interesting thoughts about distributed encoding. Once an original video is encoded and added to the network by one person, it never needs to be encoded again. From some brief research, <a href=\"https://mastodon.social/@Gargron/11088922\">ffmpeg is not deterministic, which lead to this thread on Mastodon</a>. This means that different people encoding a video could get different output files, which means different hashes in IPFS.</p><p>However, the original video file is unique, so adding metadata to the original source video file for discovery of the unique, permanent hash of an HLS-encoded version could work.</p><p>We're currently doing some work on how to do this for images, so that different sizes are automatically available and cached in the network.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p><em>Fission is an app &amp; web hosting platform that implements a web native file system powered by IPFS. Build and run locally, <code>fission up</code> to host everywhere. <a href=\"https://guide.fission.codes\">Read our guide</a> to get started and sign up right from the command line.</em></p>","url":"https://blog.fission.codes/experimenting-with-hls-video-streaming-and-ipfs/","canonical_url":null,"uuid":"a59c1236-5ed1-4fda-8b61-e88a76aca80c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5ea068b333f762001e6c6fae","reading_time":null}},{"node":{"id":"Ghost__Post__5e6687c859c1cc001e896fc2","title":"Fission on the IPFS Community Call","slug":"fission-on-the-ipfs-community-call","featured":true,"feature_image":"https://s3.fission.codes/2020/03/ipfsbot-twitter-header-community-call.png","excerpt":"Fission presented what we've been up to on the IPFS Weekly Call on March 9th, 2020.","custom_excerpt":"Fission presented what we've been up to on the IPFS Weekly Call on March 9th, 2020.","created_at_pretty":"09 March, 2020","published_at_pretty":"09 March, 2020","updated_at_pretty":"31 March, 2020","created_at":"2020-03-09T11:15:36.000-07:00","published_at":"2020-03-09T12:34:27.000-07:00","updated_at":"2020-03-31T13:46:57.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"web native","slug":"web-native","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Community Call","slug":"community-call","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Thanks to the IPFS team for hosting us on the weekly community call! These \ncommunity calls happen weekly on Mondays at 1600 UTC\n[https://talk.fission.codes/t/ipfs-weekly-community-calls/521].\n\nWe presented an intro to what we're building at Fission, including our hosted\nservices, open source contributions, and more.\n\nWe've started to use the phrase \"web native apps\" to describe Fission's app\ncreation platform that decouples storage from apps, with user controlled data,\nand secure by default. Which is what is expected by users  from native mobile\napps.\n\nYou can watch the video – stored on IPFS! – here:\n\nhttps://ipfs.runfission.com/ipfs/QmdAdEPac3X41pVZE2m3EUJibg5mXqtW6sE5LuMDV5mR7x/Fission%20Building%20Web%20Native%20Apps%20IPFS%20Weekly%20Call%202020-03-09.mp4\n\n Originally from the IPFS YouTube [https://youtu.be/wvmZj7IE9Bo]The slides are available on IPFS as a PDF\n[https://events.fission.name/2020/ipfs-community-call/Fission-IPFS-Community-Call-March2020.pdf]\n:\n\nAlso on Notist [https://noti.st/bmann/TltFLG/fission-building-web-native-apps]\n--------------------------------------------------------------------------------\n\nFrom the final slide, here are all the places where you can find out more and\nconnect with us:\n\n * Github: fission-suite [https://github.com/fission-suite]\n * Install Guide & Docs: guide.fission.codes [https://guide.fission.codes]\n * Technical Whitepaper: whitepaper.fission.codes\n   [https://whitepaper.fission.codes]   – this is a work in progress! 🚧 👷‍♀️✍️\n * Discourse forum: talk.fission.codes [https://talk.fission.codes]\n * Discord chat: fission.codes/discourse [https://fission.codes/discourse]\n * Twitter: @fissioncodes [https://twitter.com/fissioncodes], team accounts \n   @expede [https://twitter.com/expede],@bmann [https://twitter.com/bmann], \n   @icidasset [https://twitter.com/icidasset], and @dholms on Github\n   [https://github.com/dholms]","html":"<p>Thanks to the IPFS team for hosting us on the weekly community call! These <a href=\"https://talk.fission.codes/t/ipfs-weekly-community-calls/521\">community calls happen weekly on Mondays at 1600 UTC</a>.</p><p>We presented an intro to what we're building at Fission, including our hosted services, open source contributions, and more.</p><p>We've started to use the phrase \"web native apps\" to describe Fission's app creation platform that decouples storage from apps, with user controlled data, and secure by default. Which is what is expected by users  from native mobile apps.</p><p>You can watch the video – stored on IPFS! – here:</p><!--kg-card-begin: html--><figure class=\"kg-card kg-card-hascaption\">\n<video width=\"100%\" height=\"100%\" controls>\n              <source src=\"https://ipfs.runfission.com/ipfs/QmdAdEPac3X41pVZE2m3EUJibg5mXqtW6sE5LuMDV5mR7x/Fission%20Building%20Web%20Native%20Apps%20IPFS%20Weekly%20Call%202020-03-09.mp4\">\n              <a href=\"https://ipfs.runfission.com/ipfs/QmdAdEPac3X41pVZE2m3EUJibg5mXqtW6sE5LuMDV5mR7x/Fission%20Building%20Web%20Native%20Apps%20IPFS%20Weekly%20Call%202020-03-09.mp4\">https://ipfs.runfission.com/ipfs/QmdAdEPac3X41pVZE2m3EUJibg5mXqtW6sE5LuMDV5mR7x/Fission%20Building%20Web%20Native%20Apps%20IPFS%20Weekly%20Call%202020-03-09.mp4</a>\n            </video>\n    <figcaption>Originally from the <a href=\"https://youtu.be/wvmZj7IE9Bo\">IPFS YouTube</a></figcaption>\n</figure><!--kg-card-end: html--><p>The slides are <a href=\"https://events.fission.name/2020/ipfs-community-call/Fission-IPFS-Community-Call-March2020.pdf\">available on IPFS as a PDF</a>:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/03/Screen-Shot-2020-03-09-at-12.19.32-PM.png\" class=\"kg-image\"><figcaption><a href=\"https://noti.st/bmann/TltFLG/fission-building-web-native-apps\">Also on Notist</a></figcaption></figure><!--kg-card-end: image--><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>From the final slide, here are all the places where you can find out more and connect with us:</p><ul><li>Github: <a href=\"https://github.com/fission-suite\">fission-suite</a></li><li>Install Guide &amp; Docs: <a href=\"https://guide.fission.codes\">guide.fission.codes</a></li><li>Technical Whitepaper: <a href=\"https://whitepaper.fission.codes\">whitepaper.fission.codes</a>  – this is a work in progress! 🚧 👷‍♀️✍️</li><li>Discourse forum: <a href=\"https://talk.fission.codes\">talk.fission.codes</a></li><li>Discord chat: <a href=\"https://fission.codes/discourse\">fission.codes/discourse</a></li><li>Twitter: <a href=\"https://twitter.com/fissioncodes\">@fissioncodes</a>, team accounts <a href=\"https://twitter.com/expede\">@expede</a>,  <a href=\"https://twitter.com/bmann\">@bmann</a>, <a href=\"https://twitter.com/icidasset\">@icidasset</a>, and <a href=\"https://github.com/dholms\">@dholms on Github</a></li></ul>","url":"https://blog.fission.codes/fission-on-the-ipfs-community-call/","canonical_url":null,"uuid":"9ee77a98-26c4-4879-b9e3-349650be7806","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e6687c859c1cc001e896fc2","reading_time":null}},{"node":{"id":"Ghost__Post__5e17a981f14aa0001e823397","title":"Fission Drive Preview","slug":"fission-drive-preview","featured":true,"feature_image":"https://s3.fission.codes/2020/02/fission-drive-preview-ramen.png","excerpt":"We're pleased to present the Preview release of Fission Drive, the web native file system browser that we're including as a base component of the Fission stack.","custom_excerpt":"We're pleased to present the Preview release of Fission Drive, the web native file system browser that we're including as a base component of the Fission stack.","created_at_pretty":"09 January, 2020","published_at_pretty":"13 February, 2020","updated_at_pretty":"13 February, 2020","created_at":"2020-01-09T14:30:25.000-08:00","published_at":"2020-02-13T10:51:41.000-08:00","updated_at":"2020-02-13T10:53:28.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"FISSION","slug":"fission","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"FISSION","slug":"fission","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Fission Drive","slug":"fission-drive","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We're pleased to present the Preview release of Fission Drive, the web native\nfile system browser that we're including as a base component of the Fission\nstack.\n\nWe've been hosting files, static websites, and client-side apps on Fission since\nwe launched our CLI tool in October of 2019.\n\nUnderneath, we use IPFS, but increasingly that's a detail that we don't think\nmost users of our service should have to care about. It's a dependency, just\nlike using MySQL or Redis.\n\nOf course, if you do  know what IPFS, great! We want to make it as easy to use\nas any existing Web2 component, while having capabilities at the protocol level\n– like file de-duplication, a global CDN, peer-to-peer sync, immutability, and\noffline support, to name a few– that let us empower all developers to build new\nand interesting tools. \n\nFission Drive is the app that we're building to showcase what the entire Fission\nstack can do, hosted on our own infrastructure. \n\nSteven @icidasset [https://twitter.com/icidasset]  joined the team in December\nand has been full time since January. He designed and built Fission Drive, as\nwell as our slick new home page [https://fission.codes], which is also now\nrunning on Fission. Next up for Steven is building out web-based passwordless\nlogin for Drive, as well as the TypeScript libraries that will let all\ndevelopers build apps like this.\n\nDrive has a few features to play with, like image previews and support for dark\nmode. We'll keep the guide docs updated [https://guide.fission.codes/drive]  as\nwe add features.\n\nFission Drive in Dark Mode, with an image previewThis preview release supports\nbrowsing any public IPFS hash, not just those on Fission. You can use this\nexample hash QmbCLefkFuXbhHBWSW7PWmJzBL7W7e8zm41HK4DGJ1RDwV  to see it in action\nat drive.fission.codes [https://drive.fission.codes].\n\nWant to add your own files? Follow the install instructions for the Fission CLI\n[https://guide.fission.codes/apps/installation]  to easily upload using fission\nup.\n\nYou can subscribe to keep up to date with Fission Drive and other product\nupdates\n[https://5d04d668.sibforms.com/serve/MUIEAD0fi3_BJE-4eieeuK6_0_XZaOPiu1_nfh56jvP1pV9uWy9OLxWLrHtjC148osZF2vcRb0XAymSdzFxhVD7XgvvODjbrp5ClBvQLmY70hyvU1JKu7ucoOP5KFJVRcfNgYN-3qvVppxg72KGyYZlWAJr2IkO7Ae9CIhnjpufaP7npZGPrBFzpmyEaKKLGYyqu0dnQIobGLAMM]\n.","html":"<p>We're pleased to present the Preview release of <strong>Fission Drive</strong>, the web native file system browser that we're including as a base component of the Fission stack.</p><p>We've been hosting files, static websites, and client-side apps on Fission since we launched our CLI tool in October of 2019.</p><p>Underneath, we use IPFS, but increasingly that's a detail that we don't think most users of our service should have to care about. It's a dependency, just like using MySQL or Redis.</p><p>Of course, if you <strong>do</strong> know what IPFS, great! We want to make it as easy to use as any existing Web2 component, while having capabilities at the protocol level – like file de-duplication, a global CDN, peer-to-peer sync, immutability, and offline support, to name a few– that let us empower all developers to build new and interesting tools. </p><p>Fission Drive is the app that we're building to showcase what the entire Fission stack can do, hosted on our own infrastructure. </p><p><a href=\"https://twitter.com/icidasset\">Steven @icidasset</a> joined the team in December and has been full time since January. He designed and built Fission Drive, as well as our <a href=\"https://fission.codes\">slick new home page</a>, which is also now running on Fission. Next up for Steven is building out web-based passwordless login for Drive, as well as the TypeScript libraries that will let all developers build apps like this.</p><p>Drive has a few features to play with, like image previews and support for dark mode. We'll keep the <a href=\"https://guide.fission.codes/drive\">guide docs updated</a> as we add features.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2020/02/fission-drive-dark-mode.png\" class=\"kg-image\"><figcaption>Fission Drive in Dark Mode, with an image preview</figcaption></figure><!--kg-card-end: image--><p>This preview release supports browsing any public IPFS hash, not just those on Fission. You can use this example hash <code>QmbCLefkFuXbhHBWSW7PWmJzBL7W7e8zm41HK4DGJ1RDwV</code> to see it in action at <a href=\"https://drive.fission.codes\">drive.fission.codes</a>.</p><p>Want to add your own files? Follow the <a href=\"https://guide.fission.codes/apps/installation\">install instructions for the Fission CLI</a> to easily upload using <code>fission up</code>.</p><p>You can <a href=\"https://5d04d668.sibforms.com/serve/MUIEAD0fi3_BJE-4eieeuK6_0_XZaOPiu1_nfh56jvP1pV9uWy9OLxWLrHtjC148osZF2vcRb0XAymSdzFxhVD7XgvvODjbrp5ClBvQLmY70hyvU1JKu7ucoOP5KFJVRcfNgYN-3qvVppxg72KGyYZlWAJr2IkO7Ae9CIhnjpufaP7npZGPrBFzpmyEaKKLGYyqu0dnQIobGLAMM\">subscribe to keep up to date with Fission Drive and other product updates</a>.</p>","url":"https://blog.fission.codes/fission-drive-preview/","canonical_url":null,"uuid":"ea8c3e36-1184-4679-82d7-1224e7bc4729","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e17a981f14aa0001e823397","reading_time":null}},{"node":{"id":"Ghost__Post__5dfc1defaa0f04001e9572d6","title":"IPFS on Hackage","slug":"ipfs-on-hackage","featured":false,"feature_image":"https://s3.fission.codes/2019/12/ipfs-haskell-long.png","excerpt":"This library offers a high level API for interacting with IPFS nodes. Most of the functionality was refactored out of our Web API, which provides a convenient HTTP interface for accessing the IPFS network.","custom_excerpt":"This library offers a high level API for interacting with IPFS nodes. Most of the functionality was refactored out of our Web API, which provides a convenient HTTP interface for accessing the IPFS network.","created_at_pretty":"20 December, 2019","published_at_pretty":"20 December, 2019","updated_at_pretty":"20 December, 2019","created_at":"2019-12-19T17:03:43.000-08:00","published_at":"2019-12-20T13:27:05.000-08:00","updated_at":"2019-12-20T14:29:19.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"Haskell","slug":"haskell","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Package","slug":"package","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"We just published version 1.0.0  of our IPFS package on Hackage\n[https://hackage.haskell.org/package/ipfs-1.0.0]  🎉\n\nThis library offers a high level API for interacting with IPFS nodes. Most of\nthe functionality was refactored out of our Web API\n[https://github.com/fission-suite/web-api\\], which provides a convenient HTTP\ninterface for accessing the IPFS network.\n\nThe library can communicate with IPFS nodes in two different ways:\n\n * Locally: This is done by shelling out to an IPFS daemon that is running on\n   the same machine. This would be the equivalent of running an IPFS command in\n   your terminal.\n * Remotely: This is done by communicating with a node's HTTP interface. This\n   could either be a node running on the same machine or on another machine.\n\nThe package doesn't currently implement all the IPFS commands, but the base\nfunctionality is present: add, get, pin, and dag put  (for building IPLD\nstructures). The existing code provides helpful building blocks for adding\nadditional functionality.\n\nCheck out the code on GitHub [https://github.com/fission-suite/ipfs-haskell].\nLet us know what features would be helpful for you and any issues that you might\nrun into along the way!\n\nWhen you're ready to start building, head over to Hackage\n[https://hackage.haskell.org/package/ipfs]  and grab the library.","html":"<p>We just published version <code>1.0.0</code> of our IPFS package on <a href=\"https://hackage.haskell.org/package/ipfs-1.0.0\">Hackage</a> 🎉</p><p>This library offers a high level API for interacting with IPFS nodes. Most of the functionality was refactored out of our <a href=\"https://github.com/fission-suite/web-api\\\">Web API</a>, which provides a convenient HTTP interface for accessing the IPFS network.</p><!--kg-card-begin: markdown--><p>The library can communicate with IPFS nodes in two different ways:</p>\n<ul>\n<li>Locally: This is done by shelling out to an IPFS daemon that is running on the same machine. This would be the equivalent of running an IPFS command in your terminal.</li>\n<li>Remotely: This is done by communicating with a node's HTTP interface. This could either be a node running on the same machine or on another machine.</li>\n</ul>\n<!--kg-card-end: markdown--><p>The package doesn't currently implement all the IPFS commands, but the base functionality is present: <code>add</code>, <code>get</code>, <code>pin</code>, and <code>dag put</code> (for building IPLD structures). The existing code provides helpful building blocks for adding additional functionality.</p><p>Check out <a href=\"https://github.com/fission-suite/ipfs-haskell\">the code on GitHub</a>. Let us know what features would be helpful for you and any issues that you might run into along the way!</p><p>When you're ready to start building, head over to <a href=\"https://hackage.haskell.org/package/ipfs\">Hackage</a> and grab the library. </p>","url":"https://blog.fission.codes/ipfs-on-hackage/","canonical_url":null,"uuid":"ac6688b6-d67c-4a15-b12e-96445f6e03ff","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dfc1defaa0f04001e9572d6","reading_time":null}},{"node":{"id":"Ghost__Post__5df7baaf6da96c001e323622","title":"IPFS Storage Adapter for Ghost Blog with Heroku Deploy","slug":"ipfs-storage-adapter-for-ghost-blog-heroku-deploy","featured":true,"feature_image":"https://s3.fission.codes/2019/12/typewriter-ghost-ipfs-heroku-sidebyside.jpg","excerpt":"We wrote an IPFS Storage Adapter for the Ghost blogging platform, and have packaged it as a one-click deploy to Heroku.","custom_excerpt":"We wrote an IPFS Storage Adapter for the Ghost blogging platform, and have packaged it as a one-click deploy to Heroku.","created_at_pretty":"16 December, 2019","published_at_pretty":"20 December, 2019","updated_at_pretty":"23 January, 2020","created_at":"2019-12-16T09:11:11.000-08:00","published_at":"2019-12-19T16:51:05.000-08:00","updated_at":"2020-01-22T17:42:33.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"Ghost","slug":"ghost-tag","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Heroku","slug":"heroku","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"NodeJS","slug":"nodejs","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Back in May, as part of putting the Fission blog on Ghost, I packaged it up to\nbe a one-click deploy on Heroku\n[https://blog.fission.codes/ghost2-blog-on-heroku/]. We've gone one step further\nand gotten an IPFS Storage Adapter completed, and upgraded to Ghost v3.x.\n\nThis one-click deploy is possible because our IPFS Heroku Add-on is in beta\n[https://elements.heroku.com/addons/interplanetary-fission]! 🙌 🎉\n\nOur IPFS Heroku Add-on\n[https://elements.heroku.com/addons/interplanetary-fission]  is in beta with a\nfree \"test\" plan.This means you can package up apps to be deployed on Heroku\nthat automatically add our add-on. This provisions you a username and API key\nand your app can use our Web API to read and write to IPFS, manage DNS, and\nanything else accessible through our API.\n\nCheck the Github repo for more details\n[https://github.com/fission-suite/heroku-ipfs-ghost], or go ahead and deploy a\nnew Ghost 3 blog here:\n\n \n[https://heroku.com/deploy?template=https://github.com/fission-suite/heroku-ipfs-ghost]\n\nTo complete the Ghost deploy, the only configuration you'll need to do is to set\nthe public URL for your blog – e.g. https://boris-ghost-test1.herokuapp.com.\n\nWe've set the IPFS gateway to use ours by default, but you can put in any\ngateway you like. Images are included from this gateway, but of course using the\n IPFS Companion extension [https://github.com/ipfs-shipyard/ipfs-companion] \nmeans you can serve the images from your local machine.\n\nGo ahead and setup your first user, create a new post, and add an image – voila!\nInterplanetary Ghost Blogging! Here's my sample post\n[https://boris-ghost-test1.herokuapp.com/i-am-testing-ipfs/].\n\n\n--------------------------------------------------------------------------------\n\nWe're working on adding IPFS support for basic file uploads to a number of other\nplatforms. This is a first step in getting more content natively available in\nIPFS. Imagine managing your blog's media assets or a gallery page from your\ndesktop, being able to login to any system and have all your photos and files\navailable for you there.\n\nJoin our App Ideas forum [https://talk.fission.codes/c/app-ideas]  to suggest\nother things you'd like to see. Thanks to Mike Taylor [https://mktlr.com]  \n@mktlrwho [https://twitter.com/MKTLRwho]  for working on this with us!","html":"<p>Back in May, as part of putting the Fission blog on Ghost, I <a href=\"https://blog.fission.codes/ghost2-blog-on-heroku/\">packaged it up to be a one-click deploy on Heroku</a>. We've gone one step further and gotten an IPFS Storage Adapter completed, and upgraded to Ghost v3.x.</p><p>This one-click deploy is possible because our <a href=\"https://elements.heroku.com/addons/interplanetary-fission\">IPFS Heroku Add-on is in beta</a>! 🙌 🎉</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2019/12/heroku-add-on.png\" class=\"kg-image\"><figcaption>Our <a href=\"https://elements.heroku.com/addons/interplanetary-fission\">IPFS Heroku Add-on</a> is in beta with a free \"test\" plan.</figcaption></figure><!--kg-card-end: image--><p>This means you can package up apps to be deployed on Heroku that automatically add our add-on. This provisions you a username and API key and your app can use our Web API to read and write to IPFS, manage DNS, and anything else accessible through our API.</p><p>Check the <a href=\"https://github.com/fission-suite/heroku-ipfs-ghost\">Github repo for more details</a>, or go ahead and deploy a new Ghost 3 blog here:</p><!--kg-card-begin: markdown--><p><a href=\"https://heroku.com/deploy?template=https://github.com/fission-suite/heroku-ipfs-ghost\"><img src=\"https://www.herokucdn.com/deploy/button.svg\" alt=\"Deploy\"></a></p>\n<!--kg-card-end: markdown--><p>To complete the Ghost deploy, the only configuration you'll need to do is to set the public URL for your blog – e.g. <code>https://boris-ghost-test1.herokuapp.com</code>.</p><p>We've set the IPFS gateway to use ours by default, but you can put in any gateway you like. Images are included from this gateway, but of course using the <a href=\"https://github.com/ipfs-shipyard/ipfs-companion\">IPFS Companion extension</a> means you can serve the images from your local machine.</p><p>Go ahead and setup your first user, create a new post, and add an image – voila! Interplanetary Ghost Blogging! <a href=\"https://boris-ghost-test1.herokuapp.com/i-am-testing-ipfs/\">Here's my sample post</a>.</p><!--kg-card-begin: hr--><hr><!--kg-card-end: hr--><p>We're working on adding IPFS support for basic file uploads to a number of other platforms. This is a first step in getting more content natively available in IPFS. Imagine managing your blog's media assets or a gallery page from your desktop, being able to login to any system and have all your photos and files available for you there.</p><p><a href=\"https://talk.fission.codes/c/app-ideas\">Join our App Ideas forum</a> to suggest other things you'd like to see. Thanks to <a href=\"https://mktlr.com\">Mike Taylor</a> <a href=\"https://twitter.com/MKTLRwho\">@mktlrwho</a> for working on this with us!</p>","url":"https://blog.fission.codes/ipfs-storage-adapter-for-ghost-blog-heroku-deploy/","canonical_url":null,"uuid":"c4d7ca0a-9ccc-4ef6-a2d7-1025c1a681e9","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5df7baaf6da96c001e323622","reading_time":null}},{"node":{"id":"Ghost__Post__5de882325bb934001e62966f","title":"Fission one-click IPFS publishing for VSCode Extension 🎉","slug":"fission-ipfs-vscode-extension","featured":false,"feature_image":"https://s3.fission.codes/2019/12/vscode-header.png","excerpt":"Put your whole project, folder, or file live on the internet from VSCode in just one click. Uses IPFS, and is powered by Fission Live.","custom_excerpt":"Put your whole project, folder, or file live on the internet from VSCode in just one click. Uses IPFS, and is powered by Fission Live.","created_at_pretty":"05 December, 2019","published_at_pretty":"09 December, 2019","updated_at_pretty":"10 December, 2019","created_at":"2019-12-04T20:06:10.000-08:00","published_at":"2019-12-09T15:44:11.000-08:00","updated_at":"2019-12-09T16:57:00.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Ben Church","slug":"ben","bio":"An Engineer at Fission. Looking to make the serverless framework of the future.","profile_image":"https://s3.fission.codes/2019/11/IMG_4313.PNG","twitter":"@bnchrch","facebook":null,"website":"https://ben.church"}],"primary_author":{"name":"Ben Church","slug":"ben","bio":"An Engineer at Fission. Looking to make the serverless framework of the future.","profile_image":"https://s3.fission.codes/2019/11/IMG_4313.PNG","twitter":"@bnchrch","facebook":null,"website":"https://ben.church"},"primary_tag":{"name":"Product","slug":"product","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Product","slug":"product","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"VSCode","slug":"vscode","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"CLI","slug":"cli","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Diffusion","slug":"diffusion","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"hackathon","slug":"hackathon","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"A simple idea born out of the Diffusion Hackathon in Berlin\n[https://blog.fission.codes/fission-at-diffusion-2019-wrap-up/]  has become a\nreality. As well as helping to ship our Fission Live  service, I spent some hack\ntime putting together a Visual Studio Code Extension.\n\nNow you can put a whole project (or folder, or just a single file) live to the\ninternet directly from your favourite editor: \n\n⚡️Live from your laptop, instantly, around the worldHow can I get this sweet,\nsweet extension?\nGlad you asked, it's all too simple really.\n\n 1. First you install the Fission CLI [https://guide.fission.codes/installation]\n 2. Then you install the Fission VSCode extension\n    [https://marketplace.visualstudio.com/items?itemName=fission.fission-live]\n 3. Next open your command palate (cmd + shift + p) and look for Fission\n    Register  \n\nNow you’re all set to run Fission Up  and Fission Watch  to put any file or\nfolder live to the internet under your brand spanking new Fission subdomain.\nWOW!\n\nHow does this whole thing work?\nAt Fission, we're building developer tools to make it easy to build and deploy\nserverless apps directly from your desktop.  Our first service uses the\nInterPlanetary File System (IPFS), a p2p file system, so that files stream\ndirectly from your computer. Meaning that the data isn't hosted solely by us but\nis instead replicated around the world – including directly from your own\ncomputer.\n\nHave other ideas for the Fission VSCode extension? Head on over to the app\ngallery [https://talk.fission.codes/t/fission-up-vscode-extension/305]  to post\nyour feature ideas and feedback.","html":"<p>A simple idea born out of the <a href=\"https://blog.fission.codes/fission-at-diffusion-2019-wrap-up/\">Diffusion Hackathon in Berlin</a> has become a reality. As well as helping to ship our <strong>Fission Live</strong> service, I spent some hack time putting together a Visual Studio Code Extension.</p><p>Now you can put a whole project (or folder, or just a single file) live to the internet directly from your favourite editor: </p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2019/12/Dec-04-2019-21-10-08.gif\" class=\"kg-image\"><figcaption>⚡️Live from your laptop, instantly, around the world&nbsp;</figcaption></figure><!--kg-card-end: image--><h2 id=\"how-can-i-get-this-sweet-sweet-extension\">How can I get this sweet, sweet extension?</h2><p>Glad you asked, it's all too simple really.</p><ol><li>First you <a href=\"https://guide.fission.codes/installation\">install the Fission CLI</a></li><li>Then you <a href=\"https://marketplace.visualstudio.com/items?itemName=fission.fission-live\">install the Fission VSCode extension</a></li><li>Next open your command palate (<code>cmd + shift + p</code>) and look for <code>Fission Register</code> </li></ol><p>Now you’re all set to run <code>Fission Up</code> and <code>Fission Watch</code> to put any file or folder live to the internet under your brand spanking new Fission subdomain. WOW!</p><h2 id=\"how-does-this-whole-thing-work\">How does this whole thing work?</h2><p>At Fission, we're building developer tools to make it easy to build and deploy serverless apps directly from your desktop.<em> </em>Our first service uses the InterPlanetary File System (IPFS), a p2p file system, so that files stream directly from your computer. Meaning that the data isn't hosted solely by us but is instead replicated around the world – including directly from your own computer.</p><p>Have other ideas for the Fission VSCode extension? <a href=\"https://talk.fission.codes/t/fission-up-vscode-extension/305\">Head on over to the app gallery</a> to post your feature ideas and feedback.</p>","url":"https://blog.fission.codes/fission-ipfs-vscode-extension/","canonical_url":null,"uuid":"ce09acd3-a662-42df-9cc2-9c6d8164cdc4","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5de882325bb934001e62966f","reading_time":null}},{"node":{"id":"Ghost__Post__5dcaf1bbf6c4ba001ee5c08f","title":"A Universal Hostless Substrate for a Post-Serverless Future at Øredev 2019","slug":"a-universal-hostless-substrate-for-a-post-serverless-future","featured":true,"feature_image":"https://s3.fission.codes/2019/11/fission-next-wave-of-platforms.jpg","excerpt":"Brooke was at Oredev 2019 in Malmo, Sweden and presented a talk covering the evolution of server architecture that we call \"hostless\". This also serves as a high level technical roadmap for what we're working on here at Fission.","custom_excerpt":"Brooke was at Oredev 2019 in Malmo, Sweden and presented a talk covering the evolution of server architecture that we call \"hostless\". This also serves as a high level technical roadmap for what we're working on here at Fission.","created_at_pretty":"12 November, 2019","published_at_pretty":"12 November, 2019","updated_at_pretty":"23 January, 2020","created_at":"2019-11-12T09:54:03.000-08:00","published_at":"2019-11-12T10:22:12.000-08:00","updated_at":"2020-01-22T17:44:44.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ♥λ Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"ØREDEV","slug":"oredev","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"hostless","slug":"hostless","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"serverless","slug":"serverless","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"zero-knowledge proof","slug":"zero-knowledge-proof","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"DID","slug":"did","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Brooke was at Øredev 2019 [https://oredev.org/]  in Malmö, Sweden and presented\na talk covering the evolution of server architecture that we call \"hostless\".\nThis also serves as a high level technical roadmap for what we're working on\nhere at Fission. We've shipped IPFS support, and will move on to identity using\nzero-knowledge proofs and DIDs, and distributed compute with WASM and smart\ncontracts.\n\nWhile those are a blizzard of next-gen technology concepts, we're integrating\nthem in such a way as to make them usable and turnkey. The outcome is a better\ndeveloper experience (DX).\n\nKey takeaways:\n\n * There has been a 60-year progression of server architecture, and there is one\n   final phase left\n * There have been recent advances in cryptography, distributed systems, and web\n   infrastructure\n * It is possible to store data and run computation anywhere, even on untrusted\n   machines\n * Remove the concept of “local development”, “production”, and “deployment”\n   entirely\n\nThe last 60 years has seen the rise and fall of several models of computing:\nmainframes, private server, shared hosting, containers, and serverless (to name\na few). We have one final phase left: “hostless” or universal apps. By\nleveraging technologies like secure multiparty compute, the content-addressable\nweb, blockchain, and the rise of WASM, we are seeing the beginnings of a future\nliberated from specialized providers, acting on a distributed substrate of store\nand compute.\n\nWith all this in place, users fully control their own data (and it never touches\nyour servers), deployment is as simple as setting a flag on your local\nenvironment, and developers maintain zero infrastructure.\n\nCome learn about what is being built today for the next wave of computing, how\nwe evolve past the serverless paradigm, and how it can make life simpler for\ndevelopers and end users!\n\nThe slides are available on Notist\n[https://noti.st/expede/I79QlQ/a-universal-hostless-substrate-for-a-post-serverless-future]\n.","html":"<p>Brooke was at <a href=\"https://oredev.org/\">Øredev 2019</a> in Malmö, Sweden and presented a talk covering the evolution of server architecture that we call \"hostless\". This also serves as a high level technical roadmap for what we're working on here at Fission. We've shipped IPFS support, and will move on to identity using zero-knowledge proofs and DIDs, and distributed compute with WASM and smart contracts.</p><p>While those are a blizzard of next-gen technology concepts, we're integrating them in such a way as to make them usable and turnkey. The outcome is a better developer experience (DX).</p><p>Key takeaways:</p><ul><li>There has been a 60-year progression of server architecture, and there is one final phase left</li><li>There have been recent advances in cryptography, distributed systems, and web infrastructure</li><li>It is possible to store data and run computation <strong>anywhere</strong>, even on untrusted machines</li><li>Remove the concept of “local development”, “production”, and “deployment” entirely</li></ul><p>The last 60 years has seen the rise and fall of several models of computing: mainframes, private server, shared hosting, containers, and serverless (to name a few). We have one final phase left: “hostless” or universal apps. By leveraging technologies like secure multiparty compute, the content-addressable web, blockchain, and the rise of WASM, we are seeing the beginnings of a future liberated from specialized providers, acting on a distributed substrate of store and compute.</p><p>With all this in place, users fully control their own data (and it never touches your servers), deployment is as simple as setting a flag on your local environment, and developers maintain zero infrastructure.</p><p>Come learn about what is being built today for the next wave of computing, how we evolve past the serverless paradigm, and how it can make life simpler for developers and end users!</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/372223208?app_id=122963\" width=\"426\" height=\"240\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Brooklyn Zelenka - A Universal &amp;quot;Hostless&amp;quot; Substrate for a Post-Serverless Futur | &amp;Oslash;redev 2019\"></iframe></figure><!--kg-card-end: embed--><p>The slides are <a href=\"https://noti.st/expede/I79QlQ/a-universal-hostless-substrate-for-a-post-serverless-future\">available on Notist</a>.</p>","url":"https://blog.fission.codes/a-universal-hostless-substrate-for-a-post-serverless-future/","canonical_url":null,"uuid":"1c03fb1b-ae5b-4b66-ab39-b87e9c9c29c2","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dcaf1bbf6c4ba001ee5c08f","reading_time":null}},{"node":{"id":"Ghost__Post__5dc7cad72c7d24001ef7ff16","title":"Exporting your Facebook photos to Fission","slug":"exporting-your-facebook-photos-to-fission","featured":false,"feature_image":"https://images.unsplash.com/photo-1522159698025-071104a1ddbd?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","excerpt":"A quick how-to on getting the Facebook export of your photos and videos, and then hosting them on Fission.","custom_excerpt":"A quick how-to on getting the Facebook export of your photos and videos, and then hosting them on Fission.","created_at_pretty":"10 November, 2019","published_at_pretty":"10 November, 2019","updated_at_pretty":"10 November, 2019","created_at":"2019-11-10T00:31:19.000-08:00","published_at":"2019-11-10T01:01:10.000-08:00","updated_at":"2019-11-10T01:01:10.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"},"primary_tag":{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"How To","slug":"how-to","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Facebook","slug":"facebook","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"photos","slug":"photos","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"videos","slug":"videos","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Facebook has a fairly extensive data export system built in. I decided to export\nmy photos and videos and put them up on Fission.\n\nFor now, this is a manual process and involves some command line usage. I'll\nwrite this up as an App Idea in our forum\n[https://talk.fission.codes/c/app-ideas]  and see if we can spend some time\nmaking this \"one-click\".\n\n> Please make that one click for me dude\n\n— Jamie Burke (@jamie247) November 9, 2019\n[https://twitter.com/jamie247/status/1193083841826770944?ref_src=twsrc%5Etfw]\nRead the Facebook help article on Accessing & Downloading Your Information\n[https://www.facebook.com/help/1701730696756992/]  for instructions on how to\nnavigate to the right section of your Facebook account.\n\nOn a desktop browser, it should be under the triangle in the upper right hand\ncorner, then Settings, then Your Facebook Information, then Download Your\nInformation.\n\nI don't upload much to Facebook and only cross-post my Instagram photos (which\nare cross-posted to my personal blog), so I clicked Deselect All  (says Select\nAll  in the screenshot above), and only selected Photos and Videos. I also set\nMedia Quality to \"High\" (although some people still report that these are still\nnot as large as the originals, which may only be accessible through the API).\n\nYou can experiment with including other items. But, be aware that because there\naren't any permissions, you may be sharing information you don't want to if you\npublish the files. Same goes for the photos. I have posted most things on\nFacebook the assumption that they are \"public\".\n\nClick the Create File  button and go make a coffee. Facebook will notify when\nyour download is ready.\n\nJust over 13 years of Facebook.To download, you'll need to click on the Download  button and enter your\nFacebook password. You now have a zip file with browse-able HTML files and your\nphoto and video files.\n\nPutting your files online with Fission\nYou'll need to type a few commands into the command line Terminal on your\nmachine, but everything should just work if you copy-paste.\n\nInstall the IPFS Desktop [https://github.com/ipfs-shipyard/ipfs-desktop#install] \n and run it. You've got a graphical interface to explore your local IPFS server,\nwhich is running in the background.\n\nOn Mac, make sure you've got homebrew installed [https://brew.sh], then open the\nTerminal app and install the Fission tools using these commands:\n\nbrew tap fission-suite/fission\nbrew install fission-cli\n\nYou can find extended installation instructions in our Fission Guide\n[https://guide.fission.codes/installation], and I expect our friends running\nLinux will have no problem.\n\nNow, you're going to register for Fission.\n\nfission register\n\nYour username will be your subdomain, e.g. boris.fission.name. Pick a password\nand enter an email address. We are adding support for custom domain names, stay\ntuned!\n\nNow, you've got a zip file in your Downloads folder from Facebook, called\nsomething like \"facebook-YOURNAME.zip\". Unzip it and you'll have a\n\"facebook-YOURNAME\" folder.\n\nBack to the terminal! This is the last step!\n\nThe fission up  command is going to add all your files to IPFS, through your\nlocal IPFS Desktop. Then, Fission's server will get sent the hash that\nrepresents the folder, we'll use IPFS to keep a copy of all your files, and\nupdate DNS of your subdomain.\n\nThe following command will be correct if you're on a Mac and downloaded to the\nstandard downloads folder. Otherwise, just enter the path to where the unzipped\nFacebook folder is:\n\nfission up ~/Downloads/facebook-YOURNAME/\n\nI only had about 200MB of files, so this happened pretty quickly. Visit\nYOURNAME.fission.name in your browser and you should see something like this:\n\nYour Facebook photos are online and browse-able! You can see mine at \nboris.fission.name/Photos/facebook [https://boris.fission.name/Photos/facebook/] \n (I put mine in a subfolder, because I already host a bunch of public files on\nmy Fission site).\n\nTechnically the files are being served directly from your computer, when you're\nonline and have IPFS Desktop running. The Fission service is also serving those\nfiles, and stays online when you're offline. As a next step, you can explore\ninstalling the IPFS Companion browser extension\n[https://github.com/ipfs-shipyard/ipfs-companion]  which will access IPFS\ncontent natively.\n\nJoin us in our Discord chat forum [https://fission.codes/discord]  if you have\nquestions or just come say \"hi\"!","html":"<p>Facebook has a fairly extensive data export system built in. I decided to export my photos and videos and put them up on Fission.</p><p>For now, this is a manual process and involves some command line usage. I'll write this up as an <a href=\"https://talk.fission.codes/c/app-ideas\">App Idea in our forum</a> and see if we can spend some time making this \"one-click\".</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Please make that one click for me dude</p>&mdash; Jamie Burke (@jamie247) <a href=\"https://twitter.com/jamie247/status/1193083841826770944?ref_src=twsrc%5Etfw\">November 9, 2019</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n</figure><!--kg-card-end: embed--><p>Read the Facebook help article on <a href=\"https://www.facebook.com/help/1701730696756992/\">Accessing &amp; Downloading Your Information</a> for instructions on how to navigate to the right section of your Facebook account.</p><p>On a desktop browser, it should be under the triangle in the upper right hand corner, then <em>Settings</em>, then <em>Your Facebook Information</em>, then <em>Download Your Information</em>.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/11/Screenshot-2019-11-09-at-8.29.37-AM-1.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>I don't upload much to Facebook and only cross-post my Instagram photos (which are cross-posted to my personal blog), so I clicked <em>Deselect All</em> (says <em>Select All</em> in the screenshot above), and only selected Photos and Videos. I also set Media Quality to \"High\" (although some people still report that these are still not as large as the originals, which may only be accessible through the API).</p><p>You can experiment with including other items. But, be aware that because there aren't any permissions, you may be sharing information you don't want to if you publish the files. Same goes for the photos. I have posted most things on Facebook the assumption that they are \"public\".</p><p>Click the <em>Create File</em> button and go make a coffee. Facebook will notify when your download is ready.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2019/11/Screenshot-2019-11-09-at-8.38.38-AM-1.png\" class=\"kg-image\"><figcaption>Just over 13 years of Facebook.</figcaption></figure><!--kg-card-end: image--><p>To download, you'll need to click on the <em>Download</em> button and enter your Facebook password. You now have a zip file with browse-able HTML files and your photo and video files.</p><h2 id=\"putting-your-files-online-with-fission\">Putting your files online with Fission</h2><p>You'll need to type a few commands into the command line Terminal on your machine, but everything should just work if you copy-paste.</p><p><a href=\"https://github.com/ipfs-shipyard/ipfs-desktop#install\">Install the IPFS Desktop</a> and run it. You've got a graphical interface to explore your local IPFS server, which is running in the background.</p><p>On Mac, make sure you've got <a href=\"https://brew.sh\">homebrew installed</a>, then open the Terminal app and install the Fission tools using these commands:</p><!--kg-card-begin: code--><pre><code class=\"language-bash\">brew tap fission-suite/fission\nbrew install fission-cli</code></pre><!--kg-card-end: code--><p>You can find extended <a href=\"https://guide.fission.codes/installation\">installation instructions in our Fission Guide</a>, and I expect our friends running Linux will have no problem.</p><p>Now, you're going to register for Fission.</p><!--kg-card-begin: code--><pre><code class=\"language-bash\">fission register</code></pre><!--kg-card-end: code--><p>Your username will be your subdomain, e.g. <code>boris.fission.name</code>. Pick a password and enter an email address. We are adding support for custom domain names, stay tuned!</p><p>Now, you've got a zip file in your Downloads folder from Facebook, called something like \"facebook-YOURNAME.zip\". Unzip it and you'll have a \"facebook-YOURNAME\" folder.</p><p>Back to the terminal! This is the last step!</p><p>The <code>fission up</code> command is going to add all your files to IPFS, through your local IPFS Desktop. Then, Fission's server will get sent the hash that represents the folder, we'll use IPFS to keep a copy of all your files, and update DNS of your subdomain.</p><p>The following command will be correct if you're on a Mac and downloaded to the standard downloads folder. Otherwise, just enter the path to where the unzipped Facebook folder is:</p><!--kg-card-begin: code--><pre><code class=\"language-bash\">fission up ~/Downloads/facebook-YOURNAME/</code></pre><!--kg-card-end: code--><p>I only had about 200MB of files, so this happened pretty quickly. Visit YOURNAME.fission.name in your browser and you should see something like this:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2019/11/Screenshot-2019-11-09-at-9.33.57-AM-1.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>Your Facebook photos are online and browse-able! You can see mine at <a href=\"https://boris.fission.name/Photos/facebook/\">boris.fission.name/Photos/facebook</a> (I put mine in a subfolder, because I already host a bunch of public files on my Fission site).</p><p>Technically the files are being served directly from your computer, when you're online and have IPFS Desktop running. The Fission service is also serving those files, and stays online when you're offline. As a next step, you can explore installing the <a href=\"https://github.com/ipfs-shipyard/ipfs-companion\">IPFS Companion browser extension</a> which will access IPFS content natively.</p><p>Join us in our <a href=\"https://fission.codes/discord\">Discord chat forum</a> if you have questions or just come say \"hi\"!</p>","url":"https://blog.fission.codes/exporting-your-facebook-photos-to-fission/","canonical_url":null,"uuid":"74f42f87-7308-45b9-8e73-7b42dc192d6e","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dc7cad72c7d24001ef7ff16","reading_time":null}}]}},"pageContext":{"slug":"ipfs","pageNumber":0,"humanPageNumber":1,"skip":0,"limit":12,"numberOfPages":3,"previousPagePath":"","nextPagePath":"/tag/ipfs/page/2"}}