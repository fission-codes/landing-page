{"data":{"ghostTag":{"slug":"did","name":"DID","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__602afb91b749da001eeb5b7b","title":"Inside Fission’s Account Recovery Design","slug":"fission-account-recovery-design","featured":false,"feature_image":"https://s3.fission.codes/2021/02/franck-DoWZMPZ-M9s-unsplash-1.jpg","localImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='2000'%20height='1500'%20viewBox='0%200%202000%201500'%20preserveAspectRatio='none'%3e%3cpath%20d='M694%20486v1c-1%201%200%201%202%201l10-1h7a629%20629%200%200047%202l-8%202a20643%2020643%200%2000752-5h-223a29508%2029508%200%2001-587%200m-129%202l16%201%2011%201%2028%201%2020-1-8-1h8l8-1a929%20929%200%2000-83%200m87%201c-3%201-1%201%208%201s11%200%208%201c-4%201-4%201-1%201l8-1h11l17%201h18l-17-1-16-1h24c-1-1-56-2-60-1m891%201l-109%201-232%202H804c-310-1-297-1-313%202-24%204-38%2012-52%2029-9%2011-17%2035-17%2053l-1%206h-1c-1%202-1-4%201-19l2-12%203-7c3-9%204-13%206-15%201-2%201-2-1-2s-3%201-4%204c-3%209-3%2010-3%203v-6l-2%201-2-1h-2c0%202-2%201-2-1s-1-2-4-2c-4%200-4%201-4%203s0%202-4%202-4%200-4%203l-1%202-3%203-2%203c-2%200-2%202-2%206%200%205%200%206-1%205-2-1-2-1-3%202l-2%204-1%206c0%203%200%203-1%202-1-4-2-1-2%205l-1%208-2%2015a673%20673%200%2000-4%20109l-1%204%201%204%201%204-1%204-1%208-1%208v28l-1%2028c-2%200-2%201-2%204l-1%204-1%208-1%208-1%2012%201%2012c2%201%201%208-1%208s-2%201-2%204l1%204%201%204-1%204-1%207-1%2014-1%2021-1%2014v19a427%20427%200%20003%2079l1%204v2l1%202%204%206%202%204%203%204%201%201%207%207%201%201%204%202%204%204%203%201%202%201%206%202%208%204a197%20197%200%200027%208h13v1l8%203c19%2012%2035%2014%2085%2014%2034%200%2035%200%2035%202%201%202%202%202%2023%202h22v-5h28a486%20486%200%200034%201%201182%201182%200%200183-2c1-2%2031-2%2030%200h57c21%200%2026-1%2026-2l1-1a11110%2011110%200%2000246-2c317-2%20415-3%20438-5%2016-1%2034-6%2020-6-13%201-21%202-21%204l-2%201c-2%200-2%200-2-2%201-1%201-1-1-1a10094%2010094%200%2001-123%200c132-1%20135-1%20154-6%2024-6%2041-20%2050-41%209-20%209-26%208-133a206936%20206936%200%2001-5-268c0-52-2-69-8-83-11-31-35-46-74-50a2146%202146%200%2001-20-2m93%2085c-4%206-4%2010-3%2051a10594%2010594%200%20014%20233l5%20109a173%20173%200%20010%2048c2-1%204-8%205-18a2106%202106%200%2000-1-172l-6-246c0-8-1-9-4-5m-607%2072c-32%208-57%2047-57%2086v7l-3%202c-7%203-13%209-16%2016l-3%206-1%2047c0%2050%200%2054%205%2065%2028%2058%20143%2060%20177%204%208-13%209-24%207-85-1-29-1-32-3-36-3-8-8-14-15-17-5-3-5-3-5-7%200-32-19-68-42-82-14-7-31-10-44-6m6%2032c-19%205-32%2026-33%2052v6h83v-8c-2-21-13-40-26-47-7-4-18-5-24-3m501%2091c-4%204-1%2028%203%2028%202%200%204-3%203-5l-2-13c-1-12-1-13-4-10m-503%2021c-18%208-21%2031-7%2044l4%204v23h28v-24l4-3c11-11%2011-28%200-39-7-7-20-9-29-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/b82aa528ba541ab1a7aac9f767fd5155/643b0/franck-DoWZMPZ-M9s-unsplash-1.jpg","srcSet":"/static/b82aa528ba541ab1a7aac9f767fd5155/51a07/franck-DoWZMPZ-M9s-unsplash-1.jpg 500w,\n/static/b82aa528ba541ab1a7aac9f767fd5155/de105/franck-DoWZMPZ-M9s-unsplash-1.jpg 1000w,\n/static/b82aa528ba541ab1a7aac9f767fd5155/643b0/franck-DoWZMPZ-M9s-unsplash-1.jpg 2000w","sizes":"(min-width: 2000px) 2000px, 100vw"},"sources":[{"srcSet":"/static/b82aa528ba541ab1a7aac9f767fd5155/12849/franck-DoWZMPZ-M9s-unsplash-1.webp 500w,\n/static/b82aa528ba541ab1a7aac9f767fd5155/85e35/franck-DoWZMPZ-M9s-unsplash-1.webp 1000w,\n/static/b82aa528ba541ab1a7aac9f767fd5155/5803e/franck-DoWZMPZ-M9s-unsplash-1.webp 2000w","type":"image/webp","sizes":"(min-width: 2000px) 2000px, 100vw"}]},"width":2000,"height":1500}}},"excerpt":"At first glance, account recovery might seem like a simple topic. But, Fission’s commitment to prioritizing user control makes things a little more complicated","custom_excerpt":"At first glance, account recovery might seem like a simple topic. But, Fission’s commitment to prioritizing user control makes things a little more complicated","created_at_pretty":"15 February, 2021","published_at_pretty":"16 February, 2021","updated_at_pretty":"16 February, 2021","created_at":"2021-02-15T14:54:09.000-08:00","published_at":"2021-02-16T08:41:23.000-08:00","updated_at":"2021-02-16T08:41:23.000-08:00","meta_title":"Passwordless Account Recovery | Fission Data Security","meta_description":"Learn how we make Fission's account recovery process easy and password-free while protecting your private data and user control","og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Courtney Hall","slug":"courtney","bio":"I'm a content writer and marketer in Charlotte, NC.","profile_image":"https://s3.fission.codes/2021/02/me.jpg","twitter":"@contentcourtney","facebook":null,"website":null},{"name":"Boris Mann","slug":"boris","bio":"Hand-waving web tinkerer who cares about open source and the decentralized web. Cooks & eats.","profile_image":"https://s3.fission.codes/2019/05/5A4DF670-6003-4612-B06B-A9DA17C6D6F3.jpeg","twitter":"@bmann","facebook":null,"website":"https://blog.bmannconsulting.com"}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Security","slug":"security","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"Security","slug":"security","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Privacy","slug":"privacy","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Roadmap","slug":"roadmap","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"passwordless","slug":"passwordless","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"DID","slug":"did","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Account Recovery","slug":"account-recovery","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"At first glance, account recovery might seem like a simple topic: just write a\nreset password function, send a challenge code, and you're done!\n\nBut, Fission’s commitment to prioritizing user control makes things a little\nmore complicated. When the user is in control, how do we help them get back into\ntheir data if they get locked out? The main relevant factors are:\n\n 1. We’ve designed our account system around portable account identifiers,\n    called Decentralized IDs (DIDs)\n 2. Your account holds encryption keys that keep your private content encrypted\n    and private only to you — even the Fission platform doesn’t have access and\n    can’t see your content.\n 3. We wanted an account recovery system that was as trust-minimized as\n    possible. Meaning, you don’t have to trust us, and you would require as few\n    third-party systems as possible to help you out if you lose account access.\n\n> Oh, and one more thing: we wanted to do all of this without passwords.\nAt Fission, being password-free is the default. Instead, we use technology built\ninto modern browsers — including mobile browsers — that generates and keeps a\nprivate encryption key safely stored. This is called the Web Crypto API.\n\nBy the way, if you haven’t tried this yet, head over to the default Fission\nDrive app [https://drive.fission.codes]  and create a new Fission account.\nNotice that it asks you for a unique username and an email address, but it\ndoesn’t ask you for a password.\n\nTo use your account on other devices — like your desktop browser, tablet, or\nphone — you get access by creating a key on your new device and linking it to\nanother device that already has permission.\n\nNow, the private keys built into the browsers on all your devices have\npermission to access your account and all of your encrypted, personal data — all\nwithout setting up or having to remember a password.\n\nApple is known for providing users with end-to-end encryption that keeps\neveryone, including Apple, out of any personal information. Fission is taking\nthe same approach.\n\nWhat about lost devices?\nBut what happens if you lose all your devices? Can you still get access to the\nencrypted content stored and synced online by your Fission account? Right now,\nthe answer is no! We don’t have a copy of your key — and the Web Crypto API\nbuilt into browsers is designed in such a way that we can’t get a copy for\nsecurity reasons. If you lose access to all your devices, how can you recover\nyour encrypted content? This is where Account Recovery comes in.\n\nOne of the design goals we have with Fission is to support a broad number of\ndefault use cases — we think this stuff should just work for everyone. We do\nrely on the most cutting edge browser standards, but we choose these standards\nbased on the real world support available in all major browsers, including\nmobile browsers.\n\nUsing a single-device as a base case\nLet’s consider the base case scenario of a person having just one mobile\ncomputing device — owning and using a single phone — meaning that losing that\none mobile device means you’ve lost everything.\n\nThis is the common base case we need to keep in mind.\n\nIt’s crucial to remember that the typical software developer or early adopter is\nmuch easier to support: at least one mobile device and one desktop/laptop\ndevice. The private key stored on a desktop is much more likely to stick around\nfor a really long time.\n\nIn fact, in some of our user research interviews, developers told us that the \nprivate key they used to securely connect to GitHub\n[https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh] \n was often on their machine for 5 years. Basically, the entire lifetime of\nowning the machine before they got a new computer and set up a new key!\n\nBut since that isn’t the deal for our single mobile device base case, we have to\nplan for account recovery process with just a single device to make the system\naccessible and recoverable by the largest number of users.\n\nSplitting up keys\nOur basic principle involves making backup keys and splitting them into pieces.\nWe then store some of those pieces on the Fission platform linked to the user\naccount.\n\nThe other half is stored “offline” by the user, as recovery codes.\n\nWhen the offline recovery codes are combined with the pieces on Fission, it\ncreates the complete key that can access the person’s account.\n\nBecause of our commitment to privacy, Fission never has access to the whole key.\n\n> If someone breaks into Fission's database, there are no passwords and no secret\nkeys to leak.\nWhere should I store recovery codes?\nOn Apple iOS devices, basic iCloud file storage is built into the operating\nsystem — just like Fission accounts have the Web Native File System included.\nWe’ll recommend that users download the recovery codes and store them in their\nSafari iCloud downloads folder — or somewhere else on their iCloud files.\n\nOn Android, the defaults are a lot more varied. Many Android phones have Google\nservices built in by default, so we’ll recommend this as a similar approach to\nusing iCloud in our iOS example.\n\nAdvanced users can store this file anywhere they feel comfortable - be it in\nApple Notes with a password, printed out on paper, stored in their 1Password\naccount, or even sent as a “Note to Self” in their Signal messenger app.\n\nSignal's Note to Self feature\n[https://support.signal.org/hc/en-us/articles/360043272451-Note-to-Self]And in\nthe future, based on the feedback, we may allow advanced security-conscious\nusers to forgo the use of recovery codes entirely, allowing them to self-manage\nbackup keys.\n\nGet involved\nYou can check out the in-progress diagrams and notes of our Account Recovery\ndesign process [https://talk.fission.codes/t/account-recovery/1432]  in the\nforum.\n\nWe’re not done with our design. We are still working at the level of security,\nsystems, and cryptographic principles, as well as streamlining the user\nexperience and the flows for users.\n\nThe code is being developed out in the open in the Dashboard code repository\n[https://github.com/fission-suite/dashboard]. We welcome questions, suggestions,\nand contributions – drop by our Discord chat [https://fission.codes/discord].","html":"<p>At first glance, account recovery might seem like a simple topic: just write a reset password function, send a challenge code, and you're done!</p><p>But, Fission’s commitment to prioritizing user control makes things a little more complicated. When the user is in control, how do we help them get back into their data if they get locked out? The main relevant factors are:</p><ol><li>We’ve designed our account system around portable account identifiers, called Decentralized IDs (DIDs)</li><li>Your account holds encryption keys that keep your private content encrypted and private only to you — even the Fission platform doesn’t have access and can’t see your content.</li><li>We wanted an account recovery system that was as trust-minimized as possible. Meaning, you don’t have to trust us, and you would require as few third-party systems as possible to help you out if you lose account access.</li></ol><blockquote><strong>Oh, and one more thing: we wanted to do all of this without passwords.</strong></blockquote><p>At Fission, being password-free is the default. Instead, we use technology built into modern browsers — including mobile browsers — that generates and keeps a private encryption key safely stored. This is called the Web Crypto API.</p><p>By the way, if you haven’t tried this yet, head over to the default <a href=\"https://drive.fission.codes\">Fission Drive app</a> and create a new Fission account. Notice that it asks you for a unique username and an email address, but it doesn’t ask you for a password.</p><p>To use your account on other devices — like your desktop browser, tablet, or phone — you get access by creating a key on your new device and linking it to another device that already has permission.</p><p>Now, the private keys built into the browsers on all your devices have permission to access your account and all of your encrypted, personal data — all without setting up or having to remember a password.</p><p>Apple is known for providing users with end-to-end encryption that keeps everyone, including Apple, out of any personal information. Fission is taking the same approach.</p><h2 id=\"what-about-lost-devices\"><strong>What about lost devices?</strong></h2><p>But what happens if you lose all your devices? Can you still get access to the encrypted content stored and synced online by your Fission account? Right now, the answer is no! We don’t have a copy of your key — and the Web Crypto API built into browsers is designed in such a way that we can’t get a copy for security reasons. If you lose access to all your devices, how can you recover your encrypted content? This is where Account Recovery comes in.</p><p>One of the design goals we have with Fission is to support a broad number of default use cases — we think this stuff should just work for everyone. We do rely on the most cutting edge browser standards, but we choose these standards based on the real world support available in all major browsers, including mobile browsers.</p><h2 id=\"using-a-single-device-as-a-base-case\"><strong>Using a single-device as a base case</strong></h2><p>Let’s consider the base case scenario of a person having just one mobile computing device — owning and using a single phone — meaning that losing that one mobile device means you’ve lost everything.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2021/02/markus-winkler-ZM0mca86fQM-unsplash-square-crop.jpg\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>This is the common base case we need to keep in mind.</p><p>It’s crucial to remember that the typical software developer or early adopter is much easier to support: at least one mobile device and one desktop/laptop device. The private key stored on a desktop is much more likely to stick around for a really long time.</p><p>In fact, in some of our user research interviews, developers told us that the <a href=\"https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh\">private key they used to securely connect to GitHub</a> was often on their machine for 5 years. Basically, the entire lifetime of owning the machine before they got a new computer and set up a new key!</p><p>But since that isn’t the deal for our single mobile device base case, we have to plan for account recovery process with just a single device to make the system accessible and recoverable by the largest number of users.</p><h2 id=\"splitting-up-keys\"><strong>Splitting up keys</strong></h2><p>Our basic principle involves making backup keys and splitting them into pieces. We then store some of those pieces on the Fission platform linked to the user account.</p><p>The other half is stored “offline” by the user, as recovery codes.</p><p>When the offline recovery codes are combined with the pieces on Fission, it creates the complete key that can access the person’s account.</p><p>Because of our commitment to privacy, Fission never has access to the whole key.</p><blockquote><strong>If someone breaks into Fission's database, there are no passwords and no secret keys to leak.</strong></blockquote><h2 id=\"where-should-i-store-recovery-codes\"><strong>Where should I store recovery codes?</strong></h2><p>On Apple iOS devices, basic iCloud file storage is built into the operating system — just like Fission accounts have the Web Native File System included. We’ll recommend that users download the recovery codes and store them in their Safari iCloud downloads folder — or somewhere else on their iCloud files.</p><p>On Android, the defaults are a lot more varied. Many Android phones have Google services built in by default, so we’ll recommend this as a similar approach to using iCloud in our iOS example.</p><p>Advanced users can store this file anywhere they feel comfortable - be it in Apple Notes with a password, printed out on paper, stored in their 1Password account, or even sent as a “Note to Self” in their Signal messenger app.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://s3.fission.codes/2021/02/signal_note_to_self.jpg\" class=\"kg-image\"><figcaption>Signal's <a href=\"https://support.signal.org/hc/en-us/articles/360043272451-Note-to-Self\">Note to Self feature</a></figcaption></figure><!--kg-card-end: image--><p>And in the future, based on the feedback, we may allow advanced security-conscious users to forgo the use of recovery codes entirely, allowing them to self-manage backup keys.</p><h2 id=\"get-involved\"><strong>Get involved</strong></h2><p>You can check out the in-progress diagrams and notes of our <a href=\"https://talk.fission.codes/t/account-recovery/1432\">Account Recovery design process</a> in the forum.</p><p>We’re not done with our design. We are still working at the level of security, systems, and cryptographic principles, as well as streamlining the user experience and the flows for users.</p><p>The code is being developed out in the open in the <a href=\"https://github.com/fission-suite/dashboard\">Dashboard code repository</a>. We welcome questions, suggestions, and contributions – drop by our <a href=\"https://fission.codes/discord\">Discord chat</a>.<br></p>","url":"https://blog.fission.codes/fission-account-recovery-design/","canonical_url":null,"uuid":"f777ba3e-c8f5-48fa-b85b-3f7e875b9159","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"602afb91b749da001eeb5b7b","reading_time":null}},{"node":{"id":"Ghost__Post__5e274d05fbc2c9001eeb9759","title":"Everything you wanted to know about Elliptic Curve Cryptography","slug":"everything-you-wanted-to-know-about-elliptic-curve-cryptography","featured":true,"feature_image":"https://s3.fission.codes/2020/03/math.jpg","localImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1280'%20height='800'%20viewBox='0%200%201280%20800'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20139v140l9-1c9%200%209%200%2014%203%204%203%206%204%209%204l8-4%202-1%202-1%204-2a87%2087%200%200011-1l3-2c0-2%201-2%2014-2l15%201h2c2-1%203-1%206%201%203%203%204%203%2012%202h9l20%201a467%20467%200%2001129%2013%20272%20272%200%200148%209c3%200%2012%205%2014%207%202%203%205%203%205%200l3-3c3-1%204%200%206%206l3%207c2%200%203-2%204-10%200-7%201-9%206-9%204%200%206%203%204%207-2%206%200%2012%205%2015s13%2012%2017%2019c3%206%203%2023%201%2027l-1%205c-2%206-15%2016-22%2016-4%200-10-2-15-5-4-3-5-4-10-14l-7-12c-4-6-2-6-18-5-5%200-7%200-11-2-5-2-8-3-16-3l-11-1%201%203%201%2016c0%2012%200%2013%202%2013%201%201%202%200%202-1%200-2%202-3%207-3s9%203%209%207c0%201%206%205%209%205l5%202%207%202%208%205c5%205%2013%208%2020%206l6%201%206%202%205%204c2%202%204%202%207%202%204%200%204%201%206%204%202%205%205%208%207%208s2%201%202%203c-1%201%200%204%202%208l3%206-3%204-4%204c0%203-7%2010-12%2013-7%203-19%203-22-1l-3-2-6-4c-1-2-4-3-5-3l-6-5c-3-3-4-3-11-3l-10%201-5%202-5%202-5%201-4%202-14%202c-5%200-6%203-4%207%202%203%202%2010-1%2012-5%205-9%2010-9%2015l-1%206-2%2012-3%2015c-4%2010-4%2012-2%2015%206%2012%208%2017%208%2021%200%206-3%2014-6%2018-5%205-6%206-8%2014-3%2012-2%2030%203%2047%202%207%201%2021-3%2028l-1%204c0%203%200%203%204%203a283%20283%200%200058-16l15-5a600%20600%200%200099-40l28-10a296%20296%200%2000100-54c2-3%205-3%206%200l3%202%202%201%202%201c3%200%203%200%203%203%200%202-1%203-2%203-2%200-2%201-2%204%200%204-1%205-2%202l-3-1c-1%201-1%203%201%203l1%204c0%203%200%204%202%204s2%201%202%204%200%204%202%204%202%201%202%204l-1%204c-2%200-2%201-2%204l-1%204-2%201%202%202v5l-2%201h-2l-4-1-2-2c0-3-1-3-3%200l-4%202-1%201%203%201c7%200%209%202%209%206l-2%206-2%202-1%201c-2%200-2-1-2-4l-1-5-1%204c0%204%200%204-2%204-3%200-3%200-3%204l1%204%201-1h1c2%202%202%203-2%203-2%200-6%203-6%205l-2%201c-2%200-2%201-2%204l-1%204-1%203-2%202-1%202-1%201-3%202-4%202c-2%200-3%202-4%205l-4%204c-2%200-8%204-13%2010l-38%201c-34%200-42-1-34-2%203-1%203-3%200-4-3%200-4-2-2-2l1-4c0-4-1-5-2-3h-5l-10-1h-7v-4l-1-4-1%202-2%202-2%203-2%201-2%202c0%201-1%202-7%202-8%201-15%203-15%206l-5%201-5-1-2-2c-3%200-3%200-3%204s0%204-2%204l-4-1-3-2-2%202-93%201h-94v-8c-2-25-2-37%200-47l2-14c-2-8-2-28-1-30%201-1%200-2-1-4-2-4-3-4-8-1-12%207-20%208-25%203-4-4-4-9-1-12%203-2%207-1%209%204%202%203%203%203%207%203%208-1%2010-9%205-16-4-5-5-12-4-18%201-7%201-7-3-7-7%202-8%202-9%200%200-4%201-7%203-8%205-1%2010-10%207-11-2-1-2-2-1-5%202-6%200-8-5-5-6%203-8-1-3-9%203-6%202-8-4-12l-4-3-4%203c-9%209-15%2043-12%2072%202%2011%202%2013%207%2021l5%2011c2%202-1%204-3%202-5-3-14-20-17-33-3-10-4-33-2-37l1-5c2-7%2010-24%2014-28%204-3%206-10%204-11l-2-2-1-1c-2-1-5-7-5-9%200-4-3-5-9-5l-3%201-1-5c0-5-1-6-2-3l-4%203c-5%201-5%201-5%204s0%203-3%203h-3l-1-11c-1-17-2-17-4-13s-2%2011%200%2015c2%206%202%206%200%206-5%200-9-8-9-17%200-6-1-6-3-6l-2-1h-2c-2%203-3%202-6%200-2-2-2-2-3-1-1%202-5%203-6%201%200-2-1-2-4%200-2%201-4%202-5%201l-3%201-6%202c-3%201-4%202-5%204-2%204-1%205%202%202h7l7%202c7%200%2011%204%209%208v3c2%204%200%205-7%206-6%200-6%200-7-3l-1-2-2%202c-2%202-3%203-5%203-2-1-4-7-3-9l-7-1-7%201-1-4-1-4c-1-1-1%2068-1%20180v182h1281V584l-1-255v-39h-5c-14%200-27-3-27-7l-3-12c-3-3-23-4-26-1-2%202-2%202-3%200-1-1-1-1-3%202a5137%205137%200%2001-9%207l-4%201c-1%203-11%205-18%205s-9-1-18-5c-7-3-15-3-19%200l-7%204-8%203h-2l-2-1%201%202c2%201-6%205-13%205l-6%202h-7l-5-1-2-1c-2-2-8-2-12-1-3%202-3%202-6-1-2-1-3-3-2-3l-2-4c-2-4-2-4%200-4s2-1%202-4l-1-4-1-1c0-2-2-2-3-1l1%202%201%202-13%206-2%201-9%201c-10%200-10%200-11%208%200%205-1%206-2%206l-2%202-1%203-1%202-2%205c-3%203-3%204-2%208v7l-2%205-3%206c-3%206-10%208-28%209h-84c-3-2-2-5%201-8l6-8%203-4%201-1%201-2%203-3a534%20534%200%200122-32c1-4-6-17-10-19l-4-4-3-4-1-2-3-5a1920%201920%200%2001-16-28l7-3c4-2%2030-4%2044-4l21-1c18-3%2041-1%2043%202%200%201%202%200%203-2%203-3%203-4%203-9s0-6%202-6l5-1%203-1%2011-5%201-1%206-2%205-2%201-1%202-2c3-1%204-5%204-17%200-8-1-12-4-13l-2-2-1-1-1-1c0-3-3-6-4-4h-10c0%202-8%205-12%205l-4%201-1%201c-3%200-7%208-6%2012%200%201%200%202-1%201-1-2-2-1-1%201l-1%202-3-2c0-2-1-3-2-3l-2-2c0-2-1-4-3-5-4-4-4-4-1-9%202-4%202-5%201-7v-5l2-6-1-3h180l3%204%204%203-4%203-4%202%203%201h8l5%201-1%202-1%202c0%201%200%202-3%202l-11%202c-8%201-8%202-8%204%200%203-3%206-6%206l-2%202%204%201c3%200%204%200%204%202l8%201c7-1%208-1%208%201s16%201%2025-3h3l3-2%203-2%202-2c6-6%2021-8%2035-3l9%202v61l1-79V0H0v139m67-10l3%207%204%206%204%205%202%201%204%202%204%201%202%201c3%200%206%202%206%204l4%202%204%201%204-5c4-4%206-4%208%200%202%202%204%201%206-2%203-3%204-4%206-4%207%200%208%201%2010%207%201%204%204%207%204%204%200-4%2011-4%2014%200%202%202%203%202%207%202h8c2-3%205%202%205%207%200%203%202%205%206%205%202%200%202%200%202-5-1-4-1-5%201-6s2-1%201-2v-3h6c0-2%203-1%204%201v2l1%202c2%202%203%203%2010%203l9%202%202%201%202%201c0%201%205%202%206%200h6c2%203%2010%202%2013%200s7-2%2010%201c4%204%2023%205%2034%202%2011-2%2016-1%2012%203-2%201%201%204%203%203l8%202%208%201%204%201%206%202c5%200%206%201%207%205%202%207%2015%2027%2017%2027l5%201h5l9-1%2010-2a775%20775%200%200113-9l4-5%208%201c9%200%2012%200%2017%205%208%206%2022%208%2033%204l16-2%2012-1c0-3%202-2%202%200%201%201%201%201%201-1s1-2%202-2c3%201%203-1%205-21a58%2058%200%20013-16l3-5%202-6%202-5c2-3%202-5%203-14l2-5c4-4%209-4-221-4l-223%201m518%200l-1%2010-3%2014c-2%203-3%207-2%208l-1%203a195%20195%200%2000-18%2068l-1%206-2%2030a172%20172%200%20005%2069c0%206%202%2010%2012%2019%204%204%204%205%206%2014%202%207%203%209%207%2010%201%201%204%203%204%205%202%204%205%207%209%207%202%200%203%201%203%202l3%202a733%20733%200%200120%203h6l-72%203-21%201-1%203-4%2022a344%20344%200%2001-11%2052c-1%200-3-7-3-11%200-3-2-6-4-4v7l3%2014c2%2010%202%2013%204%2014l1-2c1-3%203-2%204%201s8%2011%2010%2010l-3-6c-6-12-6-34%200-43%203-3%202-5%200-4h-3c0-6%208-49%209-50h43a1715%201715%200%2000112-2c0-1-5-2-25-2l-25-2v-1l2-1c0-2%206-6%208-6s3-4%202-5l-2-2h2l5%201%204-1v3c0%205%201%205%206%201%203-3%204-3%209-3l6-1%202-1%204-2c0-2%202-3%205-3%204-1%207-3%207-5s5-3%208-2c7%201%204-4-5-10-7-6-8-7-3-8l5-3c3-4%2016-4%2021%200%203%202%209%204%209%202l3-1%208-6%203-6%203-9%201-3%201-9v-10c2-5%203-13%201-17a145%20145%200%20010-44l-1-4-1-4c-2%200-2-1-2-3a44%2044%200%2000-1-9l-3-5v-9c-2-2-1-5%201-5v-1c-3%200-3-8%200-8%202-1%204-9%203-14l1-5%202-2v2c-1%205%200%206%202%205%203%200%206%203%206%207%200%203%200%203%204%203%206-1%2012-4%2012-6l1%201c2%202%207%200%207-4s6-6%208-3l1-4c-2-13-2-21%200-21h1l1-4c2-1%202-1%203%202l1%203%201%202c0%202%205%208%207%208l1%201%204%201c6%200%2010-4%206-7l-3-1c-7%200-7-21-1-24%205-1%209%208%208%2022-1%2018-5%2026-18%2035-2%202-2%205%201%205%202%200%2012-6%2015-10%2010-10%2014-27%2011-44-2-9-8-15-15-15-5%200-17%208-16%2011%202%202-3%208-6%208l-2%201-1%201c-2%200-3-4-3-7%201-3%201-3-4-2h-11l3-1c2%200%202%200%202-4l-1-4-1-5v-3h-61a392%20392%200%2000-54%203c7%200%207%200%209%203s3%2010%201%2010l-1%204%201%204%204-4%206-4c2%200%202%209-1%2011l-1%204c1%202%200%203-1%203-2%201-3%201-4-3s-1-4-5-3l-4%202-3%201c-2-1-1-5%201-6l1-6v-6h-12c-4%201-10-2-9-5%201-1%200-1-1-1l-8-3-5-4h-26l-26%201M87%20182l2%204c2%202%202%202%202%2011-1%2011%200%2014%203%2012v-10c0-8%201-12%204-11v18c0%2016%200%2019%202%2020%202%202%203-1%203-14%200-20-3-32-7-30h-4c-3-3-5-2-5%200m82%201c-1%200-1%203%201%2013%207%2028%207%2031%203%2041-7%2020-8%2026-4%2026l13%204%2011%202c1-1%202-12%201-14-2-2-3-1-3%201-1%202-4%203-11%201-8-2-8-3-3-17%204-13%205-18%203-25a215%20215%200%2001-7-23c-2-2%202-2%206-1l8%205c4%203%205%203%205%201s-3-7-6-7l-8-4-9-3m448%204l-6%204-1%201c-2%200-8%208-8%2010l3%201%203%201c1%202-3%204-6%204-2-1-2-1-2%204s0%205%203%207c5%201%209%201%209-2l4-1%205-1c3-2%2014-2%2017%201l6%202c3%201%204%201%203%202v2c3%202%200%204-8%205-6%201-10%202-12%201-3-1-3-1-3%202%201%203%200%204-5%205-2%200-4%202-5%203l-2%203%202%203c2%202%202%203%201%204l8%202%2011%203h6l5%201%204%202%202%201%205%202c6%201%2010-1%2019-8%206-6%209-7%2012-5%202%202%201%203-3%204-5%201-11%206-13%2010l-2%204c-4%203-2%204%208%204l11%201%206%201%209-1c4-1%206-2%208-8%200-3%202-6%203-7l1-5c-1-4%200-4%202-6l4-3%201%202%202%203%202-3%202-7%201-4c2%200%204-3%204-6s3-6%207-6c5-1%205-1%202-7-3-7-4-20-2-20%203%200%202-2-4-5-5-3-8-4-8-2l1%201c2%200%201%202-1%205-3%203-5%208-4%209h-2l-5-2-5-1-8-2-12-1c-4-1-5-1-7-3-2-3-3-2-3%203l-2%207-2%206-2%201c-4-1-9-14-5-16%202-1%201-5-2-4l-5-1h-8l-7%201h-6c-3%201-4%200-8-2s-5-2-7-1h-4l-7%202m-505%2020c-2%202%200%204%207%206%209%204%2012%204%2012%201-1-4-16-10-19-7m863%2015c-20%202-27%202-30%204-3%201-3%201-2%204l3%206%202%202%204%207%205%209%205%206c6%205%2010%2016%207%2020s-8%207-9%205h-2l-1%203-2%205-2%206-1%201c-1-1-1%200-2%202l-2%204-3%205c-2%205-7%2012-9%2013l-1%203-1%201v2c4%204%2053%202%2062-2%204-3%204-3%204-8l1-16-1-3-1%204c0%206-3%2012-5%2010-1-5%200-35%203-41%201-2%201-1%201%204l1%209%201%204c0%202%200%202%202%201l1-7%203-14a153%20153%200%20007-22l1-12c-1-1%200-3%202-5%204-5%205-8%204-9s-34-2-45-1m-693%2012l-1%205c0%203%200%203-3%204-11%205-12%2017-1%2022l4%204c0%206%205%208%206%203%200-4%201-5%204-6s7-4%207-7c2-4%203-1%203%206%200%209%200%209%206%209%206-1%207-2%205-6-2-2-2-3-1-5%202-3%201-4-1-4s-3-1-4-3c-1-3-2-3-4-3l-4-4-6-5c-4-1-4-1-4-6s-1-6-3-6-3%200-3%202m-51%208c-7%201-11%205-12%2011l-1%205c-1-1-3%200-4%201-6%202-10-4-7-10%201-3%202-3%205%201%203%202%207%202%207-2%200-6-12-8-17-3-7%208-3%2022%207%2022%204%200%208-3%2010-6l1-2%201%202c2%205%2011%207%2016%204h4c1%203%203%204%204%203l6-1c5%200%207-1%208-4%202-5%201-9-3-11-3-2-4-4-1-4s4%200%204-2c-1-4-11-4-14%200-1%202-5-1-5-4%200-2-1-2-9%200m203%2011v6l-1%202-7%201-8-1-5-1c-3%201-7-1-7-2l1-1c1%200%204-3%203-4-1-2-7-1-8%201l-1%203c2%200%201%202-2%203l-3%203c0%202%206%203%2019%202%2014-1%2026%200%2033%201%207%200%2013-2%2011-5l-8-1c-9%200-11%200-11-4l-1-3-1-3c0-4-3-2-4%203m231%2022c-2%201%201%202%206%202h5c2%201%201%203-1%203l-3%201-1%203%204%201c5%200%205%200%205-4%200-3%201-4%202-4l1-2h-18M40%20301l-1%205c-1%206-4%2012-7%2013l-3%203c-2%204-13%208-21%208H1v44h3l5%201c1%202%209%201%2010-1%203-3%206-3%208-1%203%204%2013%203%2013-1h6c1%202%205%201%206-1l1-3%204-8%201-2c2-3%201-3-5-3s-9-1-7-4%2012-4%2013-1c0%202%202%203%204%200%202-1%202-2%201-6l-2-11c0-6-2-9-5-11-1-1-2%200-2%206l-1%2011c-1%202-1%202-2-5%200-7%200-7-3-7-3%201-3%200-3-4l4-3c4%200%204%200-1-7l-4-8c-1-3-5-6-5-4m423%201v3l-1%206-1%206c-1%203-7%207-10%207-6-3-16%209-11%2013l2%204c0%208%203%2018%208%2024%208%2010%2039%2014%2060%208%209-3%2012-5%209-5-2%200-2-3%200-5l1-3%201-7c3-7%203-7%201-10-1-2-2-4-1-5%200-1-7-9-10-10-7-5-9-5-13-6l-17-2c-13%200-13%200-13-7%200-4-2-7-3-6l-1-1%201-2%201-2h-3m-79%207l-4%201c-3%201-3%201-2%203%203%203%2028%201%2027-2l-21-2M37%20322l-1%2017c0%2015%200%2016%202%2016l2-1c1-13%200-31-1-32h-2m53%207v11h4l4%201h6c1%202%208%200%208-2s0-2-8-2c-9%201-12%200-11-4%201-2%205-3%2016-3%2020-1%2016-3-5-3-12%200-13%200-14%202m606%206l-3%203c0%203-4%206-6%206s-5%206-5%209l-2%202c-5%202-8%206-8%209l-1%204-5%202-4%204-2%204c0%202%200%202%202%200l2-2%202%204c1%204%203%205%203%203l2-4%202-3%204-3%203-3%202-2c3%200%206-2%206-4l1-1%205-4%204-6c2%200%203-3%201-6-2-2-2-3-1-3%202%200%204-6%203-8%200-2-1-2-5-1m259%2053l-3%201c0%203%2024%204%2029%202%202-2%202-2%200-3h-26m-551%2010c-4%200-8%202-10%205-2%202-3%205-1%205l1%205%201%205%201-1%201-1c3%200%203-2%201-5-4-4-4-5%200-7l6-1c9%202%2010%2012%201%2026-4%206-3%206%202%201l5-4c1%200%204-5%204-8l1-2c2%200%200-8-2-13-1-2-7-7-8-6l-3%201m37%201c-5%202-5%202-2%205%202%202%203%203%203%2012%200%2014-1%2026-3%2028-3%202-1%203%206%203s9-1%205-3c-2-1-2-2-2-24l-1-23-6%202m511%200l-4%202%204%201c12%203%2031%201%2029-3h-29m-447%2011c-5%209-9%2020-10%2030l-2%2011c0%201-18%202-23%201-1%200-2-1-2-5-1-7-4-7-4%200%200%204-1%205-4%205s-4%201-5%202c-1%202-1%203%205%203%203%200%204%201%204%204%200%204%204%204%204%200%200-3-1-3%2014-3%2012%200%2012%200%2012%206%200%204%200%204-4%205l-10-1h-9l-9%201c-4-1-5%200-6%201-3%203%203%204%2029%204h11l1%206c2%209%2011%2026%2012%2024l-3-9c-4-11-6-19-3-22%201-2%201-2-1-4-4-4-4-8%200-11%202-3%202-6%200-6-3%200-3-2-1-12%201-10%204-19%208-27%205-10%201-13-4-3m225-2l5%2013c4%209%206%2049%203%2061l-1%204-1-5c-1-7-3-13-8-22-5-8-4-7-11-5-3%200-4-2-1-4v-2c-1-1%200-1%203-1%206-1%206-2%201-3l-8-1c-4-1-5-1-7%201l-3%202c-4%200-7%2012-5%2020%201%201%200%202-2%204l-3%202-3-2c-5-4-11-1-11%205%200%203%201%204%203%202%204-5%206-1%207%2012l1%2011h6v-11c1-13%203-18%208-14%202%202%202%204%203%2019l2%2020c3%203%205-1%205-9v-14c1-12%200-17-4-21-3-3-3-3-1-4l2-2c1-2%204%201%204%204s2%203%204%201l2-1c0%202%203%202%205%200s3%203%203%2017c0%2013-1%2016-6%2022-2%203%201%204%204%200l4-3c1%200%206-5%206-7l1-1%206-14c2-9%203-9%209-10%206%200%208-1%207-3-1-1-2-2-5-2-5%200-5-1%200-5l4-9c2-8%200-11-7-12-5%200-5%200-6-5a96%2096%200%2000-11-26c-2-3-4-4-4-2m156%206c-3%203-1%205%202%203%204-2%207%202%206%208%200%205%201%205%203%201%202-5%202-7%200-10-3-5-8-5-11-2m-323%205l1%2023c2%201%205-2%204-6%200-4%202-4%205%201%203%204%205%205%208%204%202%200%202-1-4-7-5-6-5-8%200-11l3-4c0-2-4-1-6%202-3%205-6%206-6%202s0-5-2-5l-3%201m41%200v11c0%2010%201%2012%202%2012%203%200%203-1%202-13%200-10%200-11-2-11l-2%201m55%200c-1%203%200%2021%201%2022%201%202%204%200%204-3%200-6%201-6%205%200%202%203%203%204%205%204%204-1%203-2-1-7-5-6-5-8%200-12%202-2%203-3%202-4-2-2-4-1-6%203-4%205-5%205-5%200-1-4-4-6-5-3m-107%202c-2%203-2%205-1%205s2%203%201%205h-4c-1-1-4%200-4%202s2%203%206%203l3%202c0%203%202%202%204-1v-6l-1-8c0-5-2-5-4-2m82%202l-1%203c0%203-2%205-6%205-6%200-3%202%204%203l2%204c1%205%203%205%204%200%200-3%201-4%203-4%206%200%206-2%201-3-4-1-5-2-5-6%200-3-1-4-2-2m172%205l-1%2010c0%2012%200%2012-13%2012-10%200-12%201-11%204%201%202%202%202%2012%202l12%201v11c1%2011%201%2013%203%2012s2-3%202-12v-12h9c11%200%2013%200%2013-3%200-2-2-3-13-3h-8l-1-11c0-10-1-13-3-13l-1%202m198%204v5c2%206%201%209-3%2010h-6c-6%200-13%2011-13%2021%200%209%209%2016%2018%2014h7c5%201%2012-5%208-6-2-1-3-15-3-33l-1-11h-7m-606%205l-2%202c-2%200-4%203-4%206%200%202%200%202%2013%202%2014%200%2014%200%2016-3s0-5-3-3h-18v-4c2-4%201-4-2%200m661%201c-3%201-4%204-4%2015-1%206-2%207-5%204-3-2-3-9-2-15%202-4-2-3-5%202-5%208-2%2018%206%2022%205%203%206%204%205%206-1%204%201%208%204%208%202%200%202%200%202-7%200-4%201-5%205-7%207-3%209-7%209-15%200-10-7-16-15-13m-211%202v16l1%2014h2c2%200%203-1%203-4%201-10%203-10%2010-2%204%205%207%208%2010%208s1-3-4-11l-6-9c0-2%203-5%206-5%202%200%204-2%204-5-1-4-7-3-10%201-3%205-7%209-8%209l-2-6-1-6h-5m213%205l-1%208c0%205%200%206%202%206%204%200%208-3%208-7%200-6-5-10-9-7m-98%204h-13v4c1%203%202%2021%201%2025l-1%203h5c5%200%205%200%204-2v-25c2-2%207-3%209%200%201%201%202%2015%201%2025%200%202%200%203%203%203l5-1v-14c-1-14-1-15-4-17-3-3-5-4-10-1m-31%202c2%201%202%203%202%205v11c0%207-1%209-5%209-5%200-7-5-3-10%203-4%200-4-4-1-9%207-5%2018%206%2015h8c5%203%2010%200%206-4l-2-13c0-12-1-15-6-15h-3l1%203m63%200c-6%203-6%2018-1%2023%206%204%2010%201%2010-7%200-10%200-12-2-15-3-2-4-2-7-1m-441%204c-12%200-13%202-2%202s12%201%207%2012a883%20883%200%2000-11%2032c5%201%206-1%206-5l1-8%202-3h16l2%203%201%208c1%203%201%204%205%204%206%200%208%200%206-3l-5-11-5-11c-3-5-6-14-6-16s1-2%2055-2l62%201a3552%203552%200%2000-134-4m78%2015c0%208-1%2010-3%2010-12%201-15%201-16-2-1-4-4-5-9-4-5%200-5%200-4%2012%200%209%201%2011%202%2011%202%200%202%200%202-3l1-18c3-1%205%203%205%208-1%205-1%206%202%204%202-3%204-2%208%201%203%204%204%204%204%200%200-2%200-3%202-2l1%204c0%203%200%203%202%203%202-1%203%201%203%207%200%204%200%205%202%205%201%200%202-2%202-8%200-13%200-12%209-12s11-1%2011-2c0-2-2-3-11-3s-9%200-9-11c0-6-1-8-2-8-2%200-2%201-2%208m468-5c-2%200-3%203-1%204%201%202%205%202%2022%202%2022%200%2024%200%2024-4%200-2-1-2-8-2a840%20840%200%2001-37%200m-537%204c-1%202-4%2011-3%2012%200%202%2010%201%2011%200l-6-13-2%201m536%2010l-1%203c1%201%202%202%2023%202s22-1%2023-2c0-4-2-4-23-4l-22%201m-128%2045c0%203%203%2010%204%2010l7%2020%201%202c1-1%205%203%205%206l2%203%202%203%201%201%204%204c1%204%202%205%203%203l2-1-1%202-1%201%2014%205%202%202c0%202%205%208%207%208l1%202c0%202%202%205%207%207l7%206%208%205c4%201%207%202%209%204s2%202%202%200l4-2c4-2%206-2%206%201l3%201c2%201%202%202%202%205l1%203c2%200%205%203%206%208l1%202c0-2%201-2%204-2l4-1-4-1h-4v-14h8c7%200%207%200%2011%204%204%203%205%204%208%204l5-1c1-2%203%200%205%205l4%204%204%203c2%202%202%202%203%200%201-1%201-1%204%202l5%203%202%201c2%202%2013%207%2016%207s3%200%203%204l1%204%201-1%201-2%202%202%202%201c5%200%2018%207%2017%209l1%202c1%201%201%200%201-1%200-2%201-2%204-2h4v8h88v-5l-1-5-7-2-6-3-1-4c0-4%200-5-2-5l-1-2c2-4%202-14%201-14s-2-1-2-4l-2-4-1-4-1-4-1%204c0%203%200%204-2%204s-2-1-2-8%200-8-2-8-2%201-2%208l-1%208c-2%200-2%201-2%204%200%204%200%204%204%204%203%200%204%201%201%203-1%200-2%201-2%203%200%201-1%202-3%202l-2%201%202%202%203%201%201%202c0%204-4%205-12%202a468%20468%200%2000-22-7l-10-4a355%20355%200%2001-55-22l-13-6-8-4-10-4-7-4-7-3-3-2c-3-2-10-4-18-5l-4-2-4-1-20-7-3-1-29-12a257%20257%200%2001-24-17c-9-6-17-13-21-19s-8-9-8-5m172%2026l-12%203-3%201c0-2-2-1-3%201%200%202-2%203-4%204-2%200-4%201-4%203l-3%202c-2%201-4%205-3%205l1%203c0%203%200%203%203%203%204%200%2013-3%2013-5l20-1%2020-1%208-1%208-1%204-2c5-2%205-4%201-7-3-1-4-2-3-3%201-4-20-6-43-4m-231%2043l-4%203c-3%200-8%2014-9%2024%200%203-1%205-2%205l-1%201-7%207-1-1-1-1-2%201-2%201-3%201c0%202-5%204-8%204l-21%2010-2%201-7%205c-6%206-10%208-10%206l-6-1-6-1-2-1-2-1c-1-2-6-1-7%201l3%204%206%207%204%205h85v-7l1-11%201-13c0-7%200-9%202-11l2-4%201-2%203-8c4-9%204-20%201-24s-3-4-6%200m-872%201l-2%202c-4%201-11%205-11%207l-2%203c-2%202-3%2018-1%2022%203%203%204%203%204%200l1-3c2%200%208%2012%208%2015l2%205%205%207c1%203%204%206%207%208%207%205%208%2011%201%2011l-5%201%2038%201c44%200%2043%200%2040-5v-3c3-1-12-18-17-19-6-2-7-4-7-9%202-12-4-25-13-29l-28-3c-6%200-9-1-6-3%202-1%202-3%201-3l-2%201-3%201c-2%200-2%200-2-2v-2l-3-2c-2-2-5-3-5-1m606%2025l-3%201h-3l7%2018c3%206%206%2012%206%2016l2%203%201%205c0%204%201%206%202%207l1%203%2022%201h23l3-4a784%20784%200%20018-13l2-3-3-3-5-3-6-2c-2-1-4-2-5-1-2%201-16-3-19-6-1-2-4-3-6-4-3-1-5-2-5-4l-3-3c-3%200-12-4-13-5-2-3-5-4-6-3m145%2042c-9%200-10%200-11%202l-2%202-2%201c0%202-10%202-13%201-3-2-4-2-6%200h-3c0-2-10-3-10-1l-4%201-4-1-6-2c-8-1-9%200-10%205v4h90v-3c0-7-2-10-6-10l-13%201m381%205l-8%201-4%201-4%203-4%201%203%201%205-1c1-1%207-1%2013%201l3-1%201-4c2-3-1-5-5-2'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/29e1b7a6c71a7dc9cbcc0d52659b2a13/b2ce3/math.jpg","srcSet":"/static/29e1b7a6c71a7dc9cbcc0d52659b2a13/2c1fd/math.jpg 320w,\n/static/29e1b7a6c71a7dc9cbcc0d52659b2a13/394a8/math.jpg 640w,\n/static/29e1b7a6c71a7dc9cbcc0d52659b2a13/b2ce3/math.jpg 1280w","sizes":"(min-width: 1280px) 1280px, 100vw"},"sources":[{"srcSet":"/static/29e1b7a6c71a7dc9cbcc0d52659b2a13/09d71/math.webp 320w,\n/static/29e1b7a6c71a7dc9cbcc0d52659b2a13/359e0/math.webp 640w,\n/static/29e1b7a6c71a7dc9cbcc0d52659b2a13/dccd3/math.webp 1280w","type":"image/webp","sizes":"(min-width: 1280px) 1280px, 100vw"}]},"width":1280,"height":800}}},"excerpt":"So you've heard of Elliptic Curve Cryptography. Maybe you know it's supposed to\nbe better than RSA. Maybe you know that all these cool new decentralized\nprotocols use it. Maybe you've seen the landslide of acronyms that go along with\nit: ECC, ECDSA, ECDH, EdDSA, Ed25519, etc. Maybe you've seen some cool looking\ngraphs but don't know how those translate to working cryptography. The articles\nyou find online either don't answer your questions, or launch in to a 30 minute\ndescription of birational e","custom_excerpt":null,"created_at_pretty":"21 January, 2020","published_at_pretty":"19 March, 2020","updated_at_pretty":"19 March, 2020","created_at":"2020-01-21T11:12:05.000-08:00","published_at":"2020-03-18T18:50:41.000-07:00","updated_at":"2020-03-19T09:16:18.000-07:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null}],"primary_author":{"name":"Daniel Holmgren","slug":"daniel","bio":null,"profile_image":"https://s3.fission.codes/2019/09/75f5c64c98dbaf2b49b86c299104ab06.png","twitter":null,"facebook":null,"website":null},"primary_tag":{"name":"cryptography","slug":"cryptography","description":null,"feature_image":null,"meta_description":null,"meta_title":null},"tags":[{"name":"cryptography","slug":"cryptography","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"elliptic","slug":"elliptic","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"ecc","slug":"ecc","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"keys","slug":"keys","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"DID","slug":"did","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"encryption","slug":"encryption","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"Technology Highlight","slug":"technology-highlight","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"So you've heard of Elliptic Curve Cryptography. Maybe you know it's supposed to\nbe better than RSA. Maybe you know that all these cool new decentralized\nprotocols use it. Maybe you've seen the landslide of acronyms that go along with\nit: ECC, ECDSA, ECDH, EdDSA, Ed25519, etc. Maybe you've seen some cool looking\ngraphs but don't know how those translate to working cryptography. The articles\nyou find online either don't answer your questions, or launch in to a 30 minute\ndescription of birational equivalence.\n\nWe feel your pain. We wanted to create a resource that answers all those\nquestions you have, gives you a cheat sheet for those pesky acronyms, and takes\nyou from crypto-kindergartener to elliptic-expert in less than 10 minutes.\n\nEnough with the talk! I just need to figure out what all these funky acronyms\nmean!\n  \nRSA:  Rivest–Shamir–Adleman (the three inventors of RSA)\nOld school cryptography that uses prime-factorization\n\nECC:  Elliptic Curve Cryptography\nNew-fangled cryptography that uses elliptic curves. More secure & smaller keys\nthan RSA.\n\nECDH:  Elliptic Curve Diffie Hellman\nKey-sharing algorithm used for asymmetric encryption\n\nECDSA:  Elliptic Curve Digital Signing Algorithm\nDigital signing algorithm using elliptic curves (makes sense right?)\n\nEdwards Curve:  \nA special type of elliptic curve (most are Montgomery Curves). Faster for\ncertain operations.\n\nEdDSA:  Edwards Digital Signing Algorithm\nDigital signing algorithm using an Edwards curve. Runs in constant time.\n\nEd25519:  Edwards Curve 25519\nThe most commonly used Edwards Curve\n\nCurve25519:\nThe non-edwards companion to Ed25519\n\nsecp256k1:\nThe curve used by Bitcoin & Ethereum\n\nNIST Curves:\nCurves created and standardized by the National Institute of Standards and\nTechnology \n\nWhat is asymmetric cryptography?\n\nAsymmetric cryptography  (or \"public key cryptography\") is a cryptographic\nsystem that uses keypairs (a private key and a public key). The public key is\nshared widely, while the private key must be kept \ncompletely secret. \n\nThere are two main use cases for public key cryptography: asymmetric encryption\nand digital signatures.\n\nAsymmetric encryption  is a method by which Alice can send a message to Bob\nwithout leaking any information about her private key to Bob and nothing about\nthe key or the message to the outside world. \n\nDigital signatures  are a means of verifying that a message came from the holder\nof a certain private key and that the information has not been tampered with in\nflight.\n\nHow on earth does that work?\n\nAll public key cryptography relies on the existence of one-way functions:\nmathematical functions that are very easy to calculate in one direction but\nnearly impossible to \"undo\", or calculate in the other direction.\n\nRSA has been the predominant cryptosystem since its introduction in 1977. It\nrelies on prime factorization  of very large numbers.\n\nPrime factorization is the process of breaking a number down into the product of\nprime numbers. This is easy with small numbers: for instance, the prime factors\nof 70 are 2 * 5 * 7. Now do that with a 2048-bit integer, and it ends up being\npretty complicated.\n\nSweet good thing someone figured that out. Now we can all kick back and relax\nknowing all of our information is secure!\n\nWell, computers are a lot faster nowadays than in 1977. Unfortunately that means\nthat they're also getting faster at factoring large prime numbers. While a 256\nbit key might've cut it at one point, now that key can be broken in ⌚👀, 103\nseconds. \n\nComputers and prime numbers are now in an arms race, with the current key size\nrecommendation being 2048 bits. As keys get larger, operations obviously become\nslower. Meanwhile, the threat of quantum computing looms on the horizon. The now\ninfamous Shor's algorithm [https://en.wikipedia.org/wiki/Shor%27s_algorithm] \nthreatens to solve prime factorization in polynomial time. Which would render\nRSA as good as done.\n\nIs there no hope for privacy?!\n\nThere's a new one-way function on the block: Elliptic Curve Cryptography. Now\nwith 100% less prime factorization! \n\nWhat's an elliptic curve?\n\nElliptic curves are cool looking curves that look like this: \n\nAnd are graphed with equations that looks like this: \n\ny^2 = x^3 + ax + b\n\nExcept decimals are a bit unruly so we only take the integers, and then take a\nmodulus of the function (basically wrap the graph around the edges like an old\ngame of snake), so the graph actually ends up looking something like this (note\nthere's still a horizontal line of symmetry):\n\nAlright, but what do these have to do with cryptography?\nThe basic procedure of ECC is this:\n\n * Choose a curve and a point P  on the curve (everyone uses the same point)\n * Choose an arbitrary very large number N  (this is your private key).\n * Using point addition, add P  to itself N  times\n * The x-coordinate of N*P  is your public-key\n\nCan you ground this in reality a bit?\n\nSure! Let's draw an analogy to adjusting a clock. Here are the same steps listed\nout but with a clock instead of an elliptic curve:\n\n * Grab a clock sitting at exactly midnight and choose an arbitrary number of\n   seconds P\n * Choose a very large number N\n * Move the clock forward P  seconds N  times (pretend you have really fast\n   hands 😜)\n * Give the clock to a friend and tell them how big each step was (P) then see\n   if they can figure out how many times you moved it (N) to arrive at the\n   current location\n\nAnd how well does this whole thing work?\n\nIt turns out this is a much more robust one-way function than prime\nfactorization. In fact, we can achieve the same security as a 3072-bit RSA key\nwith a 256-bit ECC key. Not bad!\n\nWhat if someone guesses the same number N  that I chose?\n\nThere's a mind-blowingly large range of numbers to choose from. Each key is 256\nbits so you have 2^256 = 10^77  options. To give you a scale of how big this is,\nthere are: \n\n * ~10^18  grains of sand on earth\n * ~10^22  stars in the observable universe\n * ~10^78  atoms in the observable universe\n\nSo guessing someone's private key would be approximately equivalent to guessing\na random atom in the universe.\n\nDoesn't it take a long time to calculate my public key?\n\nNope, point addition is associative. Meaning:\nP + P + P + P = (P + P) + (P + P) = 2P + 2P\n\nSo when calculating a N*P  for a very large N, you only need to calculate P + 2P\n+ 4P + 8P...\n\nAt most, you must calculate 256 terms. Trivial for a computer. But to guess the\npublic key for a given private key, you would need to check every number in\nbetween (that big number we talked about earlier).\n\nHow do these keys translate into cryptographic functions?\n\nECDH  is a key sharing algorithm, most commonly used to send encrypted messages.\nECDH works by multiplying your private key by another's public key to get a\nshared secret, then using that shared secret to perform symmetric encryption.\n\nTo illustrate why this works:\n\n * Alice and Bob agree on a curve with starting point P\n * Alice has a private key a  and public key A = a * P\n * Bob has a private key b  and public key B = b * P\n * a * B = a * b * P = b * A\n * So a * b * P  ends up being the shared secret\n\nECDSA is a signature algorithm, used to prove authenticity of some information.\nThe algorithm is a bit trickier than ECDH. \nWarning: lots of equations, feel free to skip to the takeways below.\n\n * Alice and bob agree on a curve with starting point P\n * Alice has a private key a  and public key A = a * P\n * Alice chooses a random k  and point K = k * P\n * Alice takes r  which is just the x-value of K\n * Alice hashes her message to produce hash H\n * Alice calculates a value s = inv(k)*(H+ra)\n * Alice sends her message to Bob along with the signature (r, s)\n * Bob calculates H  from the message\n * Bob ensures that r = H*inv(s)*P + r*inv(s)*A\n * If it does, the signature is valid!\n\nIf you skipped those equations or they don't quite click, the key takeaways \nare:\n\n * Alice sends a random value r  and a calculated value s  that could only be\n   calculated with a combination of the private key, the message hash, and the\n   random value, but gives away no information about her private key.\n * Bob can verify r  and s  by using just the message hash and Alice's public\n   key\n * You need  a good source of randomness to use ECDSA. If you're randomness\n   function is broken, repeated signatures can disclose your private key\n\nReal quick, you mentioned symmetric encryption. How does that work?\nSymmetric encryption uses just one key to encrypt and decrypt a message.\nEncrypted messages just look like random jumbles of letters and numbers that\ngive no information about the underlying message unless you have the key to\n\"unjumble\" it. Most algorithms use a block cipher. This involves choosing a\nblock size (say 64 bits), and encrypting the message in blocks of that size.\n\nWe mentioned symmetric encryption when talking about ECDH. When people say\n\"asymmetrically encrypted\", they actually mean \"symmetrically encrypted with a\nsecret that is shared asymmetrically\".\n\nA few examples of algorithms are AES\n[https://en.wikipedia.org/wiki/Advanced_Encryption_Standard], Salsa20\n[https://en.wikipedia.org/wiki/Salsa20], or Triplesec\n[https://keybase.io/triplesec]  (which is actually just a combo of the first two\nfor extra security).\n\nOkay, I generally understand how this works, but how do people decide on a curve\nand a point P?\n\nA bunch of different ways, sometimes they're chosen for a specific reason,\nsometimes they're algorithmically determined. Different curves have different\nproperties. Checkout Safe Curves [https://safecurves.cr.yp.to/]  for an analysis\nof different curves.\n\nCan \"faulty\" curves give backdoors?\n\nYes! Faulty curves can give shortcuts to determining a private key from a given\npublic key. \n\nMany suspect that NIST curves have NSA backdoors in them.  This is because a\npublished NIST randomization algorithm (that the NSA tightly collaborated on)\nwas found to have a backdoor.\n[https://www.ams.org/notices/201402/rnoti-p190.pdf]  We encourage you not to use\nany curves published by the NIST!\n\nWhat's this \"Edwards Curve\" I keep hearing about?\n\nMost Elliptic curves are Montgomery Curves\n[https://en.wikipedia.org/wiki/Montgomery_curve]. Edwards Curves were described\nby mathematician Harold Edwards and popularized by cryptographer Daniel\nBernstein. They have a different structure that allows for a faster signature\nalgorithm. This signature algorithm, when performed on an Edwards curve, is\ncalled EdDSA. This algorithm runs in constant time, meaning it's faster and\nleaks less information\n\nCan Edwards Curves do key sharing?\n\nEdwards curves are specifically used for signatures. There is not a related\nDiffie-Hellman key sharing algorithm.\n\nSo if I want to use both ECDH & EdDSA, I need two key pairs?\n\nNot exactly. Let's take the most common Edwards curve Ed25519. This curve is\nrelated to Montgomery curve Curve25519. In fact Ed25519 is a twist\n[https://en.wikipedia.org/wiki/Twists_of_curves]  of Curve25519. A \"twist\"\nbasically means that the curves are mappable to one another. What this means is\nthat you can use the same private key to generate a public key on both curves\nand then transform those public keys between one another without any knowledge\nof the private key. Specifically, with these equations.\n\n(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)\n(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))\n\n\nwhere (u, v)  is the Curve25519 point and (x, y)  is the Ed25519 point\n\nYou can read a more in-depth post about that Here\n[https://blog.filippo.io/using-ed25519-keys-for-encryption/].\n\nWhat cryptography algorithms do protocols like Bitcoin, Ethereum, and IPFS use?\n\nBitcoin uses secp256k1  for completely arbitrary reasons\n[https://bitcointalk.org/index.php?topic=2699.msg37328#msg37328]\nEtherem uses secp256k1  for interop with Bitcoin\n[https://forum.ethereum.org/discussion/comment/53/#Comment_53]\nIPFS uses Ed25519  and RSA.\n\nOkay so what do you recommend?\nWe're using Ed25519 & Curve25519. We chose these because:\n\n * They are well-recognized as safe curves [https://safecurves.cr.yp.to/]\n * They are one of the more commonly used curves, so we have easier interop\n * They allow us to use EdDSA for signatures\n * We're fairly certain that they don't have any backdoors in them\n\nThis is sweet! Why doesn't everyone have a private key??\n\nWe ask ourselves the same question everyday. The main reason is: it's a pain.\nKeys look scary (6A576D5A7134743777217A25432A462D4A614...). And if you lose a\nkey, you're forever screwed. There's no \"recovery by email\" available. \n\nWhat are people doing about this?\n\nWe need to fix the UX of public keys. Remove the scary hexadecimal strings and\nprovide more painless recovery.\n\nA few options are\n\n * Replication: Share the same key across multiple devices. If you drop your\n   phone in a lake, you can recover your key with your laptop\n * Shamir Secret Sharing: This involves splitting a key up into separate\n   \"shares\". Each share reveals nothing about the key, but by combining the\n   shares back together, you can recover the private key. This leads to\n   interesting solutions like social recovery\n   [https://www.coindesk.com/pay-your-friends-to-protect-your-keys-one-startups-new-take-on-crypto-custody] \n    or zero-knowledge key recovery\n   [https://medium.com/@amanladia1/zerowallet-a-zkp-based-wallet-authentication-mechanism-9871dcca0a01] \n    which we implemented as a Proof of Concept\n   [https://github.com/fission-suite/zerowallet-poc].\n * Secure Hardware Enclaves: Many phones and computers that are coming out these\n   days have Secure Hardware Enclaves. These use both hardware and software to\n   provide very  strong security gurantees\n * Hardware Secure Modules (HSMs): These are similar to Secure Hardware\n   Enclaves, but larger and hold more information. Physical modules exist, and\n   you can also rent space from cloud providers such as AWS. Less\n   security-minded users might be interested in backing up their keys with a\n   \"trusted custodian\" (this still ends up being quite a bit safer than the\n   internet's current security model).\n\nHow are you using private keys?\n\nHere at Fission, we wanted to get private keys into the hands of our users as\nquickly as possible. We just rolled out our new authentication scheme which uses\nprivate keys to power our command line tool: Fission Live\n[https://github.com/fission-suite/cli]. Give it a go and let us know what you\nthink! We have other big projects coming down the pipeline soon that will use\nthis public key infrastructure to power some really neat features: a global\nencrypted filesystem, cryptographically verifiable claims, and more!","html":"<p>So you've heard of Elliptic Curve Cryptography. Maybe you know it's supposed to be better than RSA. Maybe you know that all these cool new decentralized protocols use it. Maybe you've seen the landslide of acronyms that go along with it: ECC, ECDSA, ECDH, EdDSA, Ed25519, etc. Maybe you've seen some cool looking graphs but don't know how those translate to working cryptography. The articles you find online either don't answer your questions, or launch in to a 30 minute description of <em>birational equivalence</em>.<br><br>We feel your pain. We wanted to create a resource that answers all those questions you have, gives you a cheat sheet for those pesky acronyms, and takes you from crypto-kindergartener to elliptic-expert in less than 10 minutes.</p><h3 id=\"enough-with-the-talk-i-just-need-to-figure-out-what-all-these-funky-acronyms-mean-\">Enough with the talk! I just need to figure out what all these funky acronyms mean!</h3><p> <br><strong>RSA:</strong> Rivest–Shamir–Adleman (the three inventors of RSA)<br>Old school cryptography that uses prime-factorization<br><br><strong>ECC:</strong> Elliptic Curve Cryptography<br>New-fangled cryptography that uses elliptic curves. More secure &amp; smaller keys than RSA.<br><br><strong>ECDH:</strong> Elliptic Curve Diffie Hellman<br>Key-sharing algorithm used for asymmetric encryption<br><br><strong>ECDSA:</strong> Elliptic Curve Digital Signing Algorithm<br>Digital signing algorithm using elliptic curves (makes sense right?)<br><br><strong>Edwards Curve:</strong> <br>A special type of elliptic curve (most are Montgomery Curves). Faster for certain operations.<br><br><strong>EdDSA:</strong> Edwards Digital Signing Algorithm<br>Digital signing algorithm using an Edwards curve. Runs in constant time.<br><br><strong>Ed25519:</strong> Edwards Curve 25519<br>The most commonly used Edwards Curve<br><br><strong>Curve25519:</strong><br>The non-edwards companion to Ed25519<br><br><strong>secp256k1:</strong><br>The curve used by Bitcoin &amp; Ethereum<br><br><strong>NIST Curves:</strong><br>Curves created and standardized by the National Institute of Standards and Technology </p><h3 id=\"what-is-asymmetric-cryptography\">What is asymmetric cryptography?<br></h3><p><strong>Asymmetric cryptography</strong> (or \"public key cryptography\") is a cryptographic system that uses keypairs (a private key and a public key). The public key is shared widely, while the private key must be kept <br>completely secret. <br><br>There are two main use cases for public key cryptography: asymmetric encryption and digital signatures.<br><br><strong>Asymmetric encryption</strong> is a method by which Alice can send a message to Bob without leaking any information about her private key to Bob and nothing about the key or the message to the outside world. <br><br><strong>Digital signatures</strong> are a means of verifying that a message came from the holder of a certain private key and that the information has not been tampered with in flight.</p><h3 id=\"how-on-earth-does-that-work\">How on earth does that work?<br></h3><p>All public key cryptography relies on the existence of <strong>one-way functions</strong>: mathematical functions that are very easy to calculate in one direction but nearly impossible to \"undo\", or calculate in the other direction.<br><br>RSA has been the predominant cryptosystem since its introduction in 1977. It relies on <strong>prime factorization</strong> of very large numbers.<br><br>Prime factorization is the process of breaking a number down into the product of prime numbers. This is easy with small numbers: for instance, the prime factors of 70 are 2 * 5 * 7. Now do that with a 2048-bit integer, and it ends up being pretty complicated.</p><h3 id=\"sweet-good-thing-someone-figured-that-out-now-we-can-all-kick-back-and-relax-knowing-all-of-our-information-is-secure-\">Sweet good thing someone figured that out. Now we can all kick back and relax knowing all of our information is secure!<br></h3><p>Well, computers are a lot faster nowadays than in 1977. Unfortunately that means that they're also getting faster at factoring large prime numbers. While a 256 bit key might've cut it at one point, now that key can be broken in ⌚👀, 103 seconds. <br><br>Computers and prime numbers are now in an arms race, with the current key size recommendation being 2048 bits. As keys get larger, operations obviously become slower. Meanwhile, the threat of quantum computing looms on the horizon. The now infamous <a href=\"https://en.wikipedia.org/wiki/Shor%27s_algorithm\">Shor's algorithm</a> threatens to solve prime factorization in polynomial time. Which would render RSA as good as done.</p><h3 id=\"is-there-no-hope-for-privacy-\">Is there no hope for privacy?!<br></h3><p>There's a new one-way function on the block: <strong>Elliptic Curve Cryptography</strong>. Now with 100% less prime factorization! </p><h3 id=\"what-s-an-elliptic-curve\">What's an elliptic curve?<br></h3><p>Elliptic curves are cool looking curves that look like this: </p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2020/01/ecc.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><p>And are graphed with equations that looks like this: </p><!--kg-card-begin: markdown--><p><code>y^2 = x^3 + ax + b</code></p>\n<!--kg-card-end: markdown--><p>Except decimals are a bit unruly so we only take the integers, and then take a modulus of the function (basically wrap the graph around the edges like an old game of snake), so the graph actually ends up looking something like this (note there's still a horizontal line of symmetry):</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card\"><img src=\"https://s3.fission.codes/2020/01/sageplot_06.png\" class=\"kg-image\"></figure><!--kg-card-end: image--><h3 id=\"alright-but-what-do-these-have-to-do-with-cryptography\">Alright, but what do these have to do with cryptography?</h3><!--kg-card-begin: markdown--><p>The basic procedure of ECC is this:</p>\n<ul>\n<li>Choose a curve and a point <code>P</code> on the curve (everyone uses the same point)</li>\n<li>Choose an arbitrary very large number <code>N</code> (this is your private key).</li>\n<li>Using point addition, add <code>P</code> to itself <code>N</code> times</li>\n<li>The x-coordinate of <code>N*P</code> is your public-key</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"can-you-ground-this-in-reality-a-bit\">Can you ground this in reality a bit?<br></h3><p>Sure! Let's draw an analogy to adjusting a clock. Here are the same steps listed out but with a clock instead of an elliptic curve:</p><!--kg-card-begin: markdown--><ul>\n<li>Grab a clock sitting at exactly midnight and choose an arbitrary number of seconds <code>P</code></li>\n<li>Choose a very large number <code>N</code></li>\n<li>Move the clock forward <code>P</code> seconds <code>N</code> times (pretend you have really fast hands 😜)</li>\n<li>Give the clock to a friend and tell them how big each step was (<code>P</code>) then see if they can figure out how many times you moved it (<code>N</code>) to arrive at the current location</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"and-how-well-does-this-whole-thing-work\">And how well does this whole thing work?<br></h3><p>It turns out this is a much more robust one-way function than prime factorization. In fact, we can achieve the same security as a 3072-bit RSA key with a 256-bit ECC key. Not bad!</p><h3 id=\"what-if-someone-guesses-the-same-number-n-that-i-chose\">What if someone guesses the same number <em>N</em> that I chose?<br></h3><p>There's a mind-blowingly large range of numbers to choose from. Each key is 256 bits so you have <code>2^256 = 10^77</code> options. To give you a scale of how big this is, there are: </p><!--kg-card-begin: markdown--><ul>\n<li><code>~10^18</code> grains of sand on earth</li>\n<li><code>~10^22</code> stars in the observable universe</li>\n<li><code>~10^78</code> atoms in the observable universe</li>\n</ul>\n<!--kg-card-end: markdown--><p>So guessing someone's private key would be approximately equivalent to guessing a random atom in the <em>universe.</em></p><h3 id=\"doesn-t-it-take-a-long-time-to-calculate-my-public-key\">Doesn't it take a long time to calculate my public key?<br></h3><p>Nope, point addition is associative. Meaning:<br><code>P + P + P + P = (P + P) + (P + P) = 2P + 2P</code><br><br>So when calculating a <code>N*P</code> for a very large <code>N</code>, you only need to calculate <code>P + 2P + 4P + 8P...</code>  <br><br>At most, you must calculate 256 terms. Trivial for a computer. But to guess the public key for a given private key, you would need to check every number in between (that big number we talked about earlier).</p><h3 id=\"how-do-these-keys-translate-into-cryptographic-functions\">How do these keys translate into cryptographic functions?<br></h3><p><strong>ECDH</strong> is a key sharing algorithm, most commonly used to send encrypted messages. ECDH works by multiplying your private key by another's public key to get a shared secret, then using that shared secret to perform symmetric encryption.</p><!--kg-card-begin: markdown--><p>To illustrate why this works:</p>\n<ul>\n<li>Alice and Bob agree on a curve with starting point <code>P</code></li>\n<li>Alice has a private key <code>a</code> and public key <code>A = a * P</code></li>\n<li>Bob has a private key <code>b</code> and public key <code>B = b * P</code></li>\n<li><code>a * B = a * b * P = b * A</code></li>\n<li>So <code>a * b * P</code> ends up being the shared secret</li>\n</ul>\n<!--kg-card-end: markdown--><p><strong>ECDSA </strong>is a signature algorithm, used to prove authenticity of some information. The algorithm is a bit trickier than ECDH. <br><em>Warning: lots of equations, feel free to skip to the takeways below.</em></p><!--kg-card-begin: markdown--><ul>\n<li>Alice and bob agree on a curve with starting point <code>P</code></li>\n<li>Alice has a private key <code>a</code> and public key <code>A = a * P</code></li>\n<li>Alice chooses a random <code>k</code> and point <code>K = k * P</code></li>\n<li>Alice takes <code>r</code> which is just the x-value of <code>K</code></li>\n<li>Alice hashes her message to produce hash <code>H</code></li>\n<li>Alice calculates a value <code>s = inv(k)*(H+ra)</code></li>\n<li>Alice sends her message to Bob along with the signature <code>(r, s)</code></li>\n<li>Bob calculates <code>H</code> from the message</li>\n<li>Bob ensures that <code>r = H*inv(s)*P + r*inv(s)*A</code></li>\n<li>If it does, the signature is valid!</li>\n</ul>\n<p>If you skipped those equations or they don't quite click, the key <strong>takeaways</strong> are:</p>\n<ul>\n<li>Alice sends a random value <code>r</code> and a calculated value <code>s</code> that could only be calculated with a combination of the private key, the message hash, and the random value, but gives away no information about her private key.</li>\n<li>Bob can verify <code>r</code> and <code>s</code> by using just the message hash and Alice's public key</li>\n<li>You <em>need</em> a good source of randomness to use ECDSA. If you're randomness function is broken, repeated signatures can disclose your private key</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"real-quick-you-mentioned-symmetric-encryption-how-does-that-work\">Real quick, you mentioned symmetric encryption. How does that work?</h3><p>Symmetric encryption uses just one key to encrypt and decrypt a message. Encrypted messages just look like random jumbles of letters and numbers that give no information about the underlying message unless you have the key to \"unjumble\" it. Most algorithms use a <strong>block cipher. </strong>This involves choosing a block size (say 64 bits), and encrypting the message in blocks of that size.</p><p>We mentioned symmetric encryption when talking about ECDH. When people say \"asymmetrically encrypted\", they actually mean \"symmetrically encrypted with a secret that is shared asymmetrically\".</p><p>A few examples of algorithms are <a href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">AES</a>, <a href=\"https://en.wikipedia.org/wiki/Salsa20\">Salsa20</a>, or <a href=\"https://keybase.io/triplesec\">Triplesec</a> (which is actually just a combo of the first two for <em>extra security</em>).</p><h3 id=\"okay-i-generally-understand-how-this-works-but-how-do-people-decide-on-a-curve-and-a-point-p\">Okay, I generally understand how this works, but how do people decide on a curve and a point P?<br></h3><p>A bunch of different ways, sometimes they're chosen for a specific reason, sometimes they're algorithmically determined. Different curves have different properties. Checkout <a href=\"https://safecurves.cr.yp.to/\">Safe Curves</a> for an analysis of different curves.</p><h3 id=\"can-faulty-curves-give-backdoors\">Can \"faulty\" curves give backdoors?<br></h3><p>Yes! Faulty curves can give shortcuts to determining a private key from a given public key. <br><br><em>Many suspect that NIST curves have NSA backdoors in them.</em> <a href=\"https://www.ams.org/notices/201402/rnoti-p190.pdf\">This is because a published NIST randomization algorithm (that the NSA tightly collaborated on) was found to have a backdoor.</a> We encourage you not to use any curves published by the NIST!</p><h3 id=\"what-s-this-edwards-curve-i-keep-hearing-about\">What's this \"Edwards Curve\" I keep hearing about?<br></h3><p>Most Elliptic curves are <a href=\"https://en.wikipedia.org/wiki/Montgomery_curve\"><strong>Montgomery Curves</strong></a>. Edwards Curves were described by mathematician Harold Edwards and popularized by cryptographer Daniel Bernstein. They have a different structure that allows for a faster signature algorithm. This signature algorithm, when performed on an Edwards curve, is called <strong>EdDSA</strong>. This algorithm runs in constant time, meaning it's faster and leaks less information</p><h3 id=\"can-edwards-curves-do-key-sharing\">Can Edwards Curves do key sharing?<br></h3><p>Edwards curves are specifically used for signatures. There is not a related Diffie-Hellman key sharing algorithm.</p><h3 id=\"so-if-i-want-to-use-both-ecdh-eddsa-i-need-two-key-pairs\">So if I want to use both ECDH &amp; EdDSA, I need two key pairs?<br></h3><p>Not exactly. Let's take the most common Edwards curve <strong>Ed25519</strong>. This curve is related to Montgomery curve <strong>Curve25519</strong>. In fact Ed25519 is a <strong><a href=\"https://en.wikipedia.org/wiki/Twists_of_curves\">twist</a></strong> of Curve25519. A \"twist\" basically means that the curves are mappable to one another. What this means is that you can use the same private key to generate a public key on both curves and then transform those public keys between one another without any knowledge of the private key. Specifically, with these equations.</p><!--kg-card-begin: markdown--><pre><code>(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)\n(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))\n</code></pre>\n<p>where <code>(u, v)</code> is the Curve25519 point and <code>(x, y)</code> is the Ed25519 point</p>\n<!--kg-card-end: markdown--><p>You can read a more in-depth post about that <a href=\"https://blog.filippo.io/using-ed25519-keys-for-encryption/\">Here</a>.</p><h3 id=\"what-cryptography-algorithms-do-protocols-like-bitcoin-ethereum-and-ipfs-use\">What cryptography algorithms do protocols like Bitcoin, Ethereum, and IPFS use?<br></h3><p>Bitcoin uses <strong>secp256k1</strong> for <a href=\"https://bitcointalk.org/index.php?topic=2699.msg37328#msg37328\">completely arbitrary reasons</a><br>Etherem uses <strong>secp256k1</strong> for <a href=\"https://forum.ethereum.org/discussion/comment/53/#Comment_53\">interop with Bitcoin</a><br>IPFS uses <strong>Ed25519</strong> and <strong>RSA</strong>.</p><h3 id=\"okay-so-what-do-you-recommend\">Okay so what do you recommend?</h3><!--kg-card-begin: markdown--><p>We're using Ed25519 &amp; Curve25519. We chose these because:</p>\n<ul>\n<li>They are well-recognized as <a href=\"https://safecurves.cr.yp.to/\">safe curves</a></li>\n<li>They are one of the more commonly used curves, so we have easier interop</li>\n<li>They allow us to use EdDSA for signatures</li>\n<li>We're fairly certain that they don't have any backdoors in them</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"this-is-sweet-why-doesn-t-everyone-have-a-private-key\">This is sweet! Why doesn't everyone have a private key??<br></h3><p>We ask ourselves the same question everyday. The main reason is: it's a pain. Keys look scary (<code>6A576D5A7134743777217A25432A462D4A614...</code>). And if you lose a key, you're forever screwed. There's no \"recovery by email\" available. </p><h3 id=\"what-are-people-doing-about-this\">What are people doing about this?<br></h3><!--kg-card-begin: markdown--><p>We need to fix the UX of public keys. Remove the scary hexadecimal strings and provide more painless recovery.</p>\n<p>A few options are</p>\n<ul>\n<li>Replication: Share the same key across multiple devices. If you drop your phone in a lake, you can recover your key with your laptop</li>\n<li>Shamir Secret Sharing: This involves splitting a key up into separate &quot;shares&quot;. Each share reveals nothing about the key, but by combining the shares back together, you can recover the private key. This leads to interesting solutions like <a href=\"https://www.coindesk.com/pay-your-friends-to-protect-your-keys-one-startups-new-take-on-crypto-custody\">social recovery</a> or <a href=\"https://medium.com/@amanladia1/zerowallet-a-zkp-based-wallet-authentication-mechanism-9871dcca0a01\">zero-knowledge key recovery</a> which we implemented as a <a href=\"https://github.com/fission-suite/zerowallet-poc\">Proof of Concept</a>.</li>\n<li>Secure Hardware Enclaves: Many phones and computers that are coming out these days have Secure Hardware Enclaves. These use both hardware and software to provide <em>very</em> strong security gurantees</li>\n<li>Hardware Secure Modules (HSMs): These are similar to Secure Hardware Enclaves, but larger and hold more information. Physical modules exist, and you can also rent space from cloud providers such as AWS. Less security-minded users might be interested in backing up their keys with a &quot;trusted custodian&quot; (this still ends up being quite a bit safer than the internet's current security model).</li>\n</ul>\n<!--kg-card-end: markdown--><h3 id=\"how-are-you-using-private-keys\">How are you using private keys?<br></h3><p>Here at Fission, we wanted to get private keys into the hands of our users as quickly as possible. We just rolled out our new authentication scheme which uses private keys to power our command line tool: <a href=\"https://github.com/fission-suite/cli\">Fission Live</a>. Give it a go and let us know what you think! We have other big projects coming down the pipeline soon that will use this public key infrastructure to power some really neat features: a global encrypted filesystem, cryptographically verifiable claims, and more!</p>","url":"https://blog.fission.codes/everything-you-wanted-to-know-about-elliptic-curve-cryptography/","canonical_url":null,"uuid":"c045a827-06e6-4b75-895e-782a8b2ddfce","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5e274d05fbc2c9001eeb9759","reading_time":null}},{"node":{"id":"Ghost__Post__5dcaf1bbf6c4ba001ee5c08f","title":"A Universal Hostless Substrate for a Post-Serverless Future at Øredev 2019","slug":"a-universal-hostless-substrate-for-a-post-serverless-future","featured":true,"feature_image":"https://s3.fission.codes/2019/11/fission-next-wave-of-platforms.jpg","localImage":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='1600'%20height='900'%20viewBox='0%200%201600%20900'%20preserveAspectRatio='none'%3e%3cpath%20d='M224%2077c-2%200-3%202-4%205-4%2013%203%2022%2015%2018%203-2%203-2%203-7%200-4-1-5-4-5-5%200-5%202-1%203%202%200%203%201%203%203%200%205-10%206-13%201-2-4-1-14%202-16s8-1%2010%202c1%204%204%203%203-1-2-4-9-6-14-3m188-1c-6%203-5%2010%204%2013%209%202%2011%209%201%209-4%200-5-1-6-3-1-3-3-4-3-1%200%205%208%208%2014%206%207-3%205-11-2-13-10-2-12-9-3-9%203%200%204%201%206%203%202%203%204%201%202-2-2-4-8-5-13-3M88%2088l1%2012%201-10V80l4%2010c3%207%205%2010%206%2010s3-3%206-10l4-10v10c0%208%200%2010%202%2010l1-12c0-11-1-12-2-12-2%200-3%202-6%2010l-5%2010-5-10c-2-7-4-10-5-10-2%200-2%201-2%2012m38-1a1413%201413%200%2001-3%2013l2-3c1-2%201-3%207-3s6%200%206%203l3%203c2%200%200-5-5-17l-2-6-2-1c-1%200-3%203-6%2011m25%201c0%2010%200%2012%202%2012l1-3c0-3%201-4%203-6%202-3%203-2%207%205l3%204c2%200%202-1-3-9-4-5-4-4%201-9%203-5%204-6%202-6l-7%207-5%206-1-6c0-5%200-7-2-7l-1%2012m40%200l1%2012%201-10%201-10%206%2010c9%2013%2010%2013%2010-2l-1-12c-2%200-2%202-2%2010v9l-6-9c-9-14-10-13-10%202m106%200l1%2012c1%200%202-1%202-5v-5l5-1c7%200%208-2%201-2l-6-1c-1-1-1-7%201-8h6c8%200%206-2-2-2h-8v12m23%200v12h8l8-1-6-1h-7v-9h5l6-1-6-2h-5v-8h7l6-1-8-1h-8v12m38-2v12c-1%202%200%202%208%202l8-1-8-1h-6v-9h6l5-1c0-1-2-2-5-2h-6v-8h7l6-1-7-1h-8v10m26%201c-5%2013-5%2013-3%2013%201%200%202-1%202-3%201-3%201-3%207-3s6%200%207%203c0%202%202%203%202%203a751%20751%200%2001-5-17c-3-10-5-9-10%204m65%201v12h8l8-1-6-1h-7v-9h5c7-1%207-2%200-3h-5v-4l1-3%206-1c9%200%207-2-2-2h-8v12m24%200c0%2010%200%2012%202%2012l1-5v-4h4c4%200%205%201%206%205l4%204c2%200%202-1-1-5l-2-4%202-2%202-3c1-8-1-10-11-10h-7v12m3-5v5h5c7%200%2010-4%206-8l-6-2h-5v5m81%2045c-6%204-8%2018-4%2027s19%209%2023%200c4-8%202-24-3-27-4-2-12-2-16%200m261-1c-5%203-6%206-6%2017s1%2015%208%2017c3%201%2011%201%2013-1%205-4%207-20%203-28-2-5-11-8-18-5m126%201c-3%201-4%204-4%208s2%206%2011%209%2012%205%2010%2010c-2%206-12%207-17%202l-3-4-1-2c-3%200%201%208%204%209%209%204%2018%201%2019-6%200-5-1-8-6-9l-9-4c-5-1-7-5-6-9%203-6%2017-5%2018%201%201%203%203%204%203%202%200-7-12-12-19-7m-858%200l6%201h5v16l1%2016%201-16v-16h5l7-1-13-1c-8%200-13%200-12%201m37%2016l1%2017v-17h21v9l1%208%201-17-1-17-1%208v7h-21v-7l-1-8v17m40%200v17h11l10-1-9-1h-10v-15h9l8-1-8-1h-9v-13h10l9-1-10-1h-11v17m53%200c0%2022%202%2023%202%202l1-15%206%209%2015%2021%201-17c0-12%200-17-1-16l-1%2013v15l-16-22c-7-10-7-10-7%2010m41%200v17h10l11-1-9-1h-10v-15h8l8-1-8-1h-8v-13h9l10-1-10-1h-11v17m33-14l6%208%204%206-6%208-6%209%207-7%206-8%206%208%206%207-7-11-4-6%206-8%206-9c0-1-3%201-7%207l-6%208-6-8c-5-7-9-10-5-4m35-2l5%201%205-1v17l1%2016%201-16v-16h5l7-1-13-1c-9%200-12%200-11%201m51%200l1%205a1334%201334%200%200111%2028l1-2%208-27%204%2011c5%2018%206%2021%207%2017a18436%2018436%200%2001-1-4l-2-6-8-23-5%2016-5%2013a580%20580%200%2001-11-28m62%201a1338%201338%200%2001-8%2027l1-5h18l2%205%203%205c1%200-12-33-14-34l-2%202m24%203l9%2025c3%206%204%204%2011-13%207-19%206-17%205-17l-7%2016c-5%2014-6%2015-7%2013a402%20402%200%2001-11-29c-2%200-2%201%200%205m38%2012v17h11l10-1-9-1h-10v-15h9l8-1-9-1h-8v-13h9l10-1-10-1h-11v17m92%200l1%2017c1%200%202-2%202-8v-8l8-1%209-1h-17l-1-7v-7h9l10-1-10-1h-11v17m52%200l1%2017%201-6v-7h9c10-1%2013-3%2013-10%200-9-3-11-16-11h-8v17m38%200v17h10l9-1-9-1h-8v-16l-1-16-1%2017m35-3l-7%2020%203-5%202-4h17l2%204%203%205v-3a1608%201608%200%2001-13-31l-7%2014m27-13l5%201h6l-1%2016%201%2016%201-16v-16h6l6-1-13-1c-8%200-12%200-11%201m36%2016l1%2017%201-8v-9h8l9-1h-17v-14h9l10-1-10-1h-11v17m73%200l1%2017%201-7v-7h13l4%207%205%207v-2c-5-8-7-12-6-13%206-2%208-12%204-17-3-2-4-2-12-2h-10v17m39%200l1%2017v-15c0-17%200-18%205-6a693%20693%200%20008%2019c2%204%203%202%2010-13l7-15v15c0%2021%202%2020%202-2%200-24%200-24-12%203-5%2011-5%2011-7%207a356%20356%200%2000-9-21c-4-10-5-8-5%2011m-334-14c-4%204-5%206-5%2014%200%2011%204%2016%2011%2016%209%200%2012-5%2012-16s-3-16-12-16l-6%202m88%207v9h7c10%200%2013-2%2013-8%200-7-2-9-13-10h-7v9m172-7c-7%205-7%2025%201%2029%2012%206%2022-10%2016-25-2-5-12-8-17-4m37%207l1%208h7c10%200%2012-2%2012-8%200-7-2-8-12-8h-8v8m-416-5l-6%2017h15l-4-10c-3-8-4-9-5-7m283%201l-6%2016h15l-2-6-4-10-2-3-1%203M284%20302l-5%205c-2%202-2%202-2%2057v55l3%204c3%202%205%203%209%203%2012%202%20477%201%20480-1%206-3%206-2%206-61%200-60%200-58-7-62-5-2-479-2-484%200m548%200c-7%204-7%202-7%2062%200%2059%200%2058%206%2061%203%202%20468%203%20480%201%204%200%206-1%209-3l3-4v-55c0-55%200-55-2-57-5-6%2012-6-247-6l-242%201m-609%2011c-5%202-5%2010-1%2012%207%204%2015-3%2011-10-2-3-3-2-3%202l-1%205-1-5c0-5-1-5-5-4m-3%2020c-1%206%200%209%204%209%206%202%2010-1%2010-6-1-2%200-3%201-3l1%205%201%204%202-6c0-6-1-7-11-7h-8v4m-27-2c-7%201-9%203-7%2010%201%204%203%202%202-2l1-4c2%200%202%201%202%203%200%205%201%206%204%206%204%200%205-2%204-9v-4h-6m-93%209l-12%208-1%2015v16l7%204%2013%207%206%204%2012-7%2013-7c2-1%202-3%202-17l-1-16-6-3-20-11-13%207m12-3l-18%209c-2%202-2%202%200%204l3%202%207%204%2010%203%209-3%207-4%203-2c3-2%203-2-5-7-10-6-12-7-16-6m109%2011c-1%202-2%206-1%209%202%204%203%203%203-2v-4c2%200%202%201%202%203%200%204%202%206%205%206s4-3%204-8l-1-4-5-1-7%201m-34%202c-2%201-2%203-2%204%201%203%201%203-2%203-2%200-3%200-3%202s1%202%209%202l10%201v-6l-1-7c-2-2-9-1-11%201m381%2013v12h22v-13l-4%201h-5v-5c-1-7-2-8-8-8h-5v13M89%20353l-1%2010c0%2014%202%2016%2017%2024l6%203%201-10c0-12-2-16-7-19l-9-5-7-3m44%201l-15%2010-1%203c-2%201-2%204-2%2012%200%2011%200%2011%202%2011%204-2%2017-10%2018-13l2-2%201-11-1-12-4%202m837%2010v10h5c7%200%209-2%209-9s-2-9-9-10h-5v9m69-8l-4%208c-3%208-4%2012-1%208%202-4%209-4%2011%200s3%202%201-3c-5-13-6-15-7-13m17%209v9h5l7-1c2-1%203-6%201-8v-2c3-4-1-8-8-8h-5v10m-60-1a7292%207292%200%2001-1%208c1-4%2010-4%2011%200l2%202c1-1-6-18-8-18l-4%208m88-6l-3%209-2%207%201-2c1-4%2010-4%2012%200%203%206%202%200-1-8-4-8-5-9-7-6m-113%207c0%208%201%209%206%208%204-1%207-5%206-10s-3-6-8-6h-4v8m-784%201c-2%201-2%208%200%2010%202%203%208%203%2011%201%202-2%202-7%201-10-2-2-9-3-12-1m35%209c-4%201-3%2010%201%2012%208%203%2014-4%209-11-1-2-6-3-10-1m-39%2017c-3%202-3%209%200%2011l6%202c7%200%2010-2%2010-8s0-7-5-7c-4%200-4%200-4%204%200%203%202%204%203%201%200-3%202-3%203%200%201%204%200%206-5%206-6%200-9-4-5-7v-4l-3%202m42%2010l-2%206-3%204c-2%200-2-4-1-6%202-2%201-5-1-4-4%202-4%2012%200%2013l3%201c2%200%204-3%205-7l3-4c2%201%203%204%201%206s-3%205-1%205%205-4%205-7c0-6-6-10-9-7m61%2073c-2%201-5%202-6%204l-2%202-1%2054c0%2060%200%2059%207%2062%205%203%20479%203%20485%200s6-3%206-62v-53l-3-3c-1-2-4-3-6-4H286m548%200c-2%201-5%202-6%204l-2%202-1%2053c0%2060%200%2060%206%2063s480%203%20485%200c7-3%207-2%207-62v-53l-3-3c-1-2-4-3-6-4H834m-614%208l5%203%204%202-4%202c-4%201-5%201-5%203s0%202%207-1l9-2c5%200%203-2-5-5s-11-4-11-2m-32%2021c-2%201-2%203-2%206%201%205%202%205%202%201%201-4%202-5%203-2%201%205%201%206%203%207%203%201%205-2%205-8v-5h-5l-6%201m-75%205l-5%208a247%20247%200%2000-10%2017l-2%203%204%202%2014%208%2017-10c1-1-14-26-16-29-2-1-2-1-2%201m1087%2014l-2%201c-2-1-5%201-7%204s-3%206-1%206l1%203c2%206%209%2010%2014%208s10-10%209-14l-2-3-2-1-5-3-4-1h-1m-758%2014l1%2010h4c7%200%2010-3%2010-9%200-8-2-10-10-10h-5v9m45%200c0%2011%202%2012%202%202l1-7%204%206c8%2012%208%2012%208%200l-1-10-1%208v7l-5-7c-7-10-8-10-8%201m498-8c-2%201-1%2017%201%2017h11l-5-1h-5v-3c0-4%200-4%204-4l5-1-4-1c-5%200-5%200-5-3s0-3%205-3l5-1h-12m66%208l1%2010%201-3c0-4%200-4%204-4%206%200%208-1%208-6s-1-6-8-6h-6v9m25-7c-3%203-3%2013%200%2015%203%203%209%203%2012%200%202-3%202-13%200-15-2-3-10-3-12%200m35%207c0%2011%202%2012%202%202l1-8%204%208c7%209%208%209%208-2l-1-9-1%208v8l-3-5c-9-14-10-14-10-2m-33-6c-3%202-3%2010%200%2012%202%203%207%202%208%200%206-7-3-19-8-12m-634%207v7h4c4%200%207-3%207-8s-2-7-7-7h-4v8m-258%206c0%206%202%208%208%206%204%200%205-1%205-6%200-2%200-3%202-3%202%201%203%205%201%206-1%202%200%203%202%202l1-5c0-5-2-6-11-6h-8v6m-64%202l-8%205-8-4-8-5%204%206%208%2011%204%206%206-8%208-11c5-7%204-7-6%200m99-1c-1%202-1%209%201%2010l1-4%201-4%201%203c0%204%202%207%204%207%203%200%204-3%204-8v-5h-5l-7%201m-35%2018c-3%201-4%202-5%209v5h18v-6c-1-7-5-10-13-8m31%2015c-3%203-3%208%200%2011s7%202%209-4c1-5%202-6%204-5v7c-3%202-2%203%200%203%203%200%204-5%203-9-2-7-8-6-10%202-1%203-1%204-3%204-2-1-3-6-1-7l1-2c0-2-1-2-3%200m74%2076c-15%201-14-2-14%2062v54l2%203c5%206-12%206%20249%206%20232%200%20239-1%20241-2%206-4%206-3%206-61%200-57%200-57-6-61a24120%2024120%200%2000-479-1m547%200c-5%200-8%202-10%206-2%203-2%205-2%2056%200%2058%200%2057%206%2061%202%201%209%202%20241%202%20261%200%20244%200%20249-6l2-3v-54c0-59%200-57-6-61a38748%2038748%200%2000-480-2m-616%206c-2%202-2%208%201%2010l5%201c6%200%209-5%206-11-2-3-2-2-2%203%200%203-1%204-2%204-2%200-2%200-2-3%200-5%200-6-2-6l-4%202m-34%203c-2%202-3%206%200%209%201%202%209%203%2011%201%201-2%202-8%201-10-2-2-3-1-2%203l-1%204c-3%202-3%201-3-4%200-6-2-7-6-3m2%2023c-2%201-4%204-3%207%200%202%200%202-3%202-2%200-3%200-3%202%200%201%202%202%2010%202h9v-5c0-7-4-10-10-8m31%201c0%202%201%202%205%202s5%201%205%203-1%203-5%203l-5%201c0%202%202%203%208%202h5v-11c2-1%200-2-7-2-5%200-6%200-6%202M91%20716v22h45v-45h-9c-8%200-8%200-9%202-2%205-8%204-9%200-1-2-2-2-10-2h-8v23m131-14c-2%201-2%202-2%207v6l10-1c8%200%2010%200%2010-2l-4-1c-3%200-3%200-3-3%200-6-6-9-11-6m-35%201c-2%203-2%206-1%208%201%204%203%204%202-1l1-4c2%200%202%201%202%203%200%204%202%206%205%206s4-3%203-9v-4h-5l-7%201m1050%200v13l1%2012h22v-5c-1-4-2-7-3-3-2%204-13%209-13%206l2-1c2%200%2010-8%2010-10s0-2%202-2c1%200%202-4%201-10%200-2-21-1-22%200m-665%205c-3%201-4%205-4%2011%201%206%203%208%208%208%209%200%2011-16%203-19h-7m475%200c-4%202-6%2012-2%2016%205%206%2014%202%2014-6%200-4-2-10-4-10h-8m-741%209l1%2010%205-1c7%200%209-2%209-9s-2-9-10-9h-5v9m79-6v16l1-2v-4l4-2c3%200%203%200%205%203l2%204v-4c-2-2-2-3%200-4%205-5%201-10-7-10-5%200-5%200-5%203m35%207v9h5c8%200%2011-4%207-9v-9l-7-1h-5v10m89-1v10h3c9%200%2011-3%2011-11%200-6-2-8-9-8h-5v9m84%200c0%2011%202%2012%202%202l1-7%203%207c1%204%203%207%204%207l4-7%204-7v7l1%207%201-9c0-11-2-12-6-1l-4%208-4-8c-5-11-6-10-6%201m30%200l1%209%201-3c0-3%200-3%204-3%205%200%208-2%208-6s-2-6-9-6h-5v9m289-8v17l1-7v-7l4%207c4%209%204%209%209%200l3-7v7c0%2010%202%209%202-2s-2-12-5-4l-3%208c-2%204-2%204-6-5-3-8-4-9-5-7m35%200l-7%2017c1%201%201%200%202-1%201-4%2010-4%2012-1l1%202-2-9c-4-8-5-10-6-8m18%209l1%209%201-3c0-5%200-5%203-5%202%200%203%201%205%204l3%204-1-4c-2-4-2-4%200-5%205-5%201-10-7-10h-5v10m103-1l1%209%201-8v-7l4%206%205%207c3%204%204%202%204-7%200-11-2-12-2-1v7l-6-7-6-8-1%209m46%200l1%209%201-3c0-4%200-4%203-4%202%200%203%201%205%204l3%203-1-3c-2-4-2-4%200-5%205-5%201-10-7-10h-5v9m25-1c-3%209-4%2014-1%209%202-4%2010-4%2011%200%201%201%201%202%202%201s-6-18-7-18l-5%208m-831-6v15h4c5%200%207-2%207-8l-1-6c-2-1-9-2-10-1m203%207v8h4c4%200%206-1%207-6s-1-9-7-9l-4-1v8m61-6c-2%201-2%202-2%206%200%206%201%208%205%208%205%200%206-1%207-7%200-8-4-11-10-7m475%200c-2%202-3%209-1%2012%201%202%207%203%209%200%202-2%202-9%200-12-1-3-6-3-8%200m-931%208l-2%206-1%204v-6c-1-7-4-7-6%200l-1%205v-5c-1-4-3-6-4-5l1%208c1%206%202%207%203%207%202%200%202-1%203-4%201-6%202-6%202%200%202%207%204%206%206-3%202-7%201-12-1-7m6-1l-3%2015c0%202%202%201%203-1%200-2%206-3%206%200l2%201c1%200%201-1-1-9-1-5-2-6-4-6h-3m99%202l-1%2010v10h7c7-1%209-2%202-3-4%200-5-1-6-2%200-3%201-4%206-4%206-1%205-2-1-3-4%200-4-1-4-3s0-3%204-3%205-1%205-2-9-2-12%200m-34%2023c-5%207%203%2015%2011%2010%202-2%202-8%200-10-2-3-10-3-11%200m35%202c-3%202-3%209%200%2011%206%205%2014-1%2011-9-2-3-8-4-11-2m-39%2013l-1%208v6h8c8%200%209%200%209-2s-1-2-3-2c-3%200-3%200-3-4%200-6-5-9-10-6m34%205c-2%202-2%205-1%209%201%205%2013%205%2016%201%203-5%201-12-3-12-3%200-3%203%200%204%205%202%201%207-5%207-5%200-8-4-4-7v-4l-3%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/4f2e63b13ced7466c4002eb6df516136/f6810/fission-next-wave-of-platforms.jpg","srcSet":"/static/4f2e63b13ced7466c4002eb6df516136/eee8e/fission-next-wave-of-platforms.jpg 400w,\n/static/4f2e63b13ced7466c4002eb6df516136/1e21a/fission-next-wave-of-platforms.jpg 800w,\n/static/4f2e63b13ced7466c4002eb6df516136/f6810/fission-next-wave-of-platforms.jpg 1600w","sizes":"(min-width: 1600px) 1600px, 100vw"},"sources":[{"srcSet":"/static/4f2e63b13ced7466c4002eb6df516136/dff21/fission-next-wave-of-platforms.webp 400w,\n/static/4f2e63b13ced7466c4002eb6df516136/b2a35/fission-next-wave-of-platforms.webp 800w,\n/static/4f2e63b13ced7466c4002eb6df516136/e9d78/fission-next-wave-of-platforms.webp 1600w","type":"image/webp","sizes":"(min-width: 1600px) 1600px, 100vw"}]},"width":1600,"height":900}}},"excerpt":"Brooke was at Oredev 2019 in Malmo, Sweden and presented a talk covering the evolution of server architecture that we call \"hostless\". This also serves as a high level technical roadmap for what we're working on here at Fission.","custom_excerpt":"Brooke was at Oredev 2019 in Malmo, Sweden and presented a talk covering the evolution of server architecture that we call \"hostless\". This also serves as a high level technical roadmap for what we're working on here at Fission.","created_at_pretty":"12 November, 2019","published_at_pretty":"12 November, 2019","updated_at_pretty":"23 January, 2020","created_at":"2019-11-12T09:54:03.000-08:00","published_at":"2019-11-12T10:22:12.000-08:00","updated_at":"2020-01-22T17:44:44.000-08:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},{"name":"Brooklyn Zelenka","slug":"expede","bio":"CTO at Fission ♥λ Programs with functions","profile_image":"https://s3.fission.codes/2019/05/IMG_2934-square.jpeg","twitter":"@expede","facebook":null,"website":null}],"primary_author":{"name":"FISSION Team","slug":"fission","bio":"Exploring fundamental shifts in the way we host, deploy, and run software for humans, using decentralized web technologies.","profile_image":"https://s3.fission.codes/2019/05/fission-logo-white-350px-1.png","twitter":"@fissioncodes","facebook":null,"website":"https://fission.codes"},"primary_tag":{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},"tags":[{"name":"Presentations","slug":"presentation","description":null,"feature_image":"https://images.unsplash.com/photo-1535016120720-40c646be5580?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&ixid=eyJhcHBfaWQiOjExNzczfQ","meta_description":null,"meta_title":null},{"name":"ØREDEV","slug":"oredev","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"hostless","slug":"hostless","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"serverless","slug":"serverless","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"IPFS","slug":"ipfs","description":"InterPlanetary File System","feature_image":null,"meta_description":null,"meta_title":null},{"name":"zero-knowledge proof","slug":"zero-knowledge-proof","description":null,"feature_image":null,"meta_description":null,"meta_title":null},{"name":"DID","slug":"did","description":null,"feature_image":null,"meta_description":null,"meta_title":null}],"plaintext":"Brooke was at Øredev 2019 [https://oredev.org/]  in Malmö, Sweden and presented\na talk covering the evolution of server architecture that we call \"hostless\".\nThis also serves as a high level technical roadmap for what we're working on\nhere at Fission. We've shipped IPFS support, and will move on to identity using\nzero-knowledge proofs and DIDs, and distributed compute with WASM and smart\ncontracts.\n\nWhile those are a blizzard of next-gen technology concepts, we're integrating\nthem in such a way as to make them usable and turnkey. The outcome is a better\ndeveloper experience (DX).\n\nKey takeaways:\n\n * There has been a 60-year progression of server architecture, and there is one\n   final phase left\n * There have been recent advances in cryptography, distributed systems, and web\n   infrastructure\n * It is possible to store data and run computation anywhere, even on untrusted\n   machines\n * Remove the concept of “local development”, “production”, and “deployment”\n   entirely\n\nThe last 60 years has seen the rise and fall of several models of computing:\nmainframes, private server, shared hosting, containers, and serverless (to name\na few). We have one final phase left: “hostless” or universal apps. By\nleveraging technologies like secure multiparty compute, the content-addressable\nweb, blockchain, and the rise of WASM, we are seeing the beginnings of a future\nliberated from specialized providers, acting on a distributed substrate of store\nand compute.\n\nWith all this in place, users fully control their own data (and it never touches\nyour servers), deployment is as simple as setting a flag on your local\nenvironment, and developers maintain zero infrastructure.\n\nCome learn about what is being built today for the next wave of computing, how\nwe evolve past the serverless paradigm, and how it can make life simpler for\ndevelopers and end users!\n\nThe slides are available on Notist\n[https://noti.st/expede/I79QlQ/a-universal-hostless-substrate-for-a-post-serverless-future]\n.","html":"<p>Brooke was at <a href=\"https://oredev.org/\">Øredev 2019</a> in Malmö, Sweden and presented a talk covering the evolution of server architecture that we call \"hostless\". This also serves as a high level technical roadmap for what we're working on here at Fission. We've shipped IPFS support, and will move on to identity using zero-knowledge proofs and DIDs, and distributed compute with WASM and smart contracts.</p><p>While those are a blizzard of next-gen technology concepts, we're integrating them in such a way as to make them usable and turnkey. The outcome is a better developer experience (DX).</p><p>Key takeaways:</p><ul><li>There has been a 60-year progression of server architecture, and there is one final phase left</li><li>There have been recent advances in cryptography, distributed systems, and web infrastructure</li><li>It is possible to store data and run computation <strong>anywhere</strong>, even on untrusted machines</li><li>Remove the concept of “local development”, “production”, and “deployment” entirely</li></ul><p>The last 60 years has seen the rise and fall of several models of computing: mainframes, private server, shared hosting, containers, and serverless (to name a few). We have one final phase left: “hostless” or universal apps. By leveraging technologies like secure multiparty compute, the content-addressable web, blockchain, and the rise of WASM, we are seeing the beginnings of a future liberated from specialized providers, acting on a distributed substrate of store and compute.</p><p>With all this in place, users fully control their own data (and it never touches your servers), deployment is as simple as setting a flag on your local environment, and developers maintain zero infrastructure.</p><p>Come learn about what is being built today for the next wave of computing, how we evolve past the serverless paradigm, and how it can make life simpler for developers and end users!</p><!--kg-card-begin: embed--><figure class=\"kg-card kg-embed-card\"><iframe src=\"https://player.vimeo.com/video/372223208?app_id=122963\" width=\"426\" height=\"240\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen title=\"Brooklyn Zelenka - A Universal &amp;quot;Hostless&amp;quot; Substrate for a Post-Serverless Futur | &amp;Oslash;redev 2019\"></iframe></figure><!--kg-card-end: embed--><p>The slides are <a href=\"https://noti.st/expede/I79QlQ/a-universal-hostless-substrate-for-a-post-serverless-future\">available on Notist</a>.</p>","url":"https://blog.fission.codes/a-universal-hostless-substrate-for-a-post-serverless-future/","canonical_url":null,"uuid":"1c03fb1b-ae5b-4b66-ab39-b87e9c9c29c2","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dcaf1bbf6c4ba001ee5c08f","reading_time":null}}]}},"pageContext":{"slug":"did","pageNumber":0,"humanPageNumber":1,"skip":0,"limit":12,"numberOfPages":1,"previousPagePath":"","nextPagePath":""}}